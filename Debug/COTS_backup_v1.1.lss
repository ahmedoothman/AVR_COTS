
COTS_backup_v1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000701e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  0000701e  000070b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  008001de  008001de  00007230  2**0
                  ALLOC
  3 .stab         00007b84  00000000  00000000  00007230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002bce  00000000  00000000  0000edb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00011982  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00011b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00011d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00014368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00015836  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00016b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00016d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001702b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_1>
       8:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__vector_2>
       c:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__vector_3>
      10:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_4>
      14:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_5>
      18:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__vector_9>
      28:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_10>
      2c:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_11>
      30:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_12>
      34:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__vector_13>
      38:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_14>
      3c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_15>
      40:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f0 e7       	ldi	r31, 0x70	; 112
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 34       	cpi	r26, 0x4C	; 76
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 33 	call	0x6658	; 0x6658 <main>
      8a:	0c 94 0d 38 	jmp	0x701a	; 0x701a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 34 	jmp	0x69be	; 0x69be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 34 	jmp	0x69be	; 0x69be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 34 	jmp	0x699e	; 0x699e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 34 	jmp	0x69d6	; 0x69d6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 34 	jmp	0x6998	; 0x6998 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ef 34 	jmp	0x69de	; 0x69de <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 e7 34 	jmp	0x69ce	; 0x69ce <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 56       	subi	r30, 0x6E	; 110
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <RTOS_vStartSchedular>:
#include "RTOS_cfg.h"
#include "RTOS_int.h"
static volatile u32 G_u32Tick_Counts = 0;
TASK TASKS[RTO_NUMBER_OF_TASKS];
void RTOS_vStartSchedular(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
    TIMER_vInit(TIMER_USED);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 c2 09 	call	0x1384	; 0x1384 <TIMER_vInit>
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <RTOS_vInit>:
void RTOS_vInit(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
    TIMER_vDelayMS(TIMER_USED, 1000, &RTOS_vScheduler);
     f06:	20 ec       	ldi	r18, 0xC0	; 192
     f08:	37 e0       	ldi	r19, 0x07	; 7
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	6a e7       	ldi	r22, 0x7A	; 122
     f12:	74 e4       	ldi	r23, 0x44	; 68
     f14:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <TIMER_vDelayMS>
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <RTOS_vCreateTask>:
void RTOS_vCreateTask(u8 A_u8Priority, u16 A_u16Periodicity, FUNC_PTR_IV_OV F_ptr)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <RTOS_vCreateTask+0x6>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <RTOS_vCreateTask+0x8>
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	7b 83       	std	Y+3, r23	; 0x03
     f30:	6a 83       	std	Y+2, r22	; 0x02
     f32:	5d 83       	std	Y+5, r21	; 0x05
     f34:	4c 83       	std	Y+4, r20	; 0x04
    TASKS[A_u8Priority].u16Periodicity = A_u16Periodicity;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	fc 01       	movw	r30, r24
     f46:	e4 5d       	subi	r30, 0xD4	; 212
     f48:	fd 4f       	sbci	r31, 0xFD	; 253
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
    TASKS[A_u8Priority].PFun = F_ptr;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	fc 01       	movw	r30, r24
     f64:	e4 5d       	subi	r30, 0xD4	; 212
     f66:	fd 4f       	sbci	r31, 0xFD	; 253
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	91 83       	std	Z+1, r25	; 0x01
     f6e:	80 83       	st	Z, r24
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <RTOS_vScheduler>:
static void RTOS_vScheduler(void)
{
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	0f 92       	push	r0
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
    G_u32Tick_Counts++;
     f92:	80 91 de 01 	lds	r24, 0x01DE
     f96:	90 91 df 01 	lds	r25, 0x01DF
     f9a:	a0 91 e0 01 	lds	r26, 0x01E0
     f9e:	b0 91 e1 01 	lds	r27, 0x01E1
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	a1 1d       	adc	r26, r1
     fa6:	b1 1d       	adc	r27, r1
     fa8:	80 93 de 01 	sts	0x01DE, r24
     fac:	90 93 df 01 	sts	0x01DF, r25
     fb0:	a0 93 e0 01 	sts	0x01E0, r26
     fb4:	b0 93 e1 01 	sts	0x01E1, r27
    u8 L_u8Counter;
    for (L_u8Counter = 0; L_u8Counter < RTO_NUMBER_OF_TASKS; L_u8Counter++)
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	33 c0       	rjmp	.+102    	; 0x1022 <RTOS_vScheduler+0xa2>
    {
        if (G_u32Tick_Counts % TASKS[L_u8Counter].u16Periodicity == 0)
     fbc:	e0 90 de 01 	lds	r14, 0x01DE
     fc0:	f0 90 df 01 	lds	r15, 0x01DF
     fc4:	00 91 e0 01 	lds	r16, 0x01E0
     fc8:	10 91 e1 01 	lds	r17, 0x01E1
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	fc 01       	movw	r30, r24
     fdc:	e4 5d       	subi	r30, 0xD4	; 212
     fde:	fd 4f       	sbci	r31, 0xFD	; 253
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	9c 01       	movw	r18, r24
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	c8 01       	movw	r24, r16
     fec:	b7 01       	movw	r22, r14
     fee:	0e 94 a1 34 	call	0x6942	; 0x6942 <__udivmodsi4>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	a1 05       	cpc	r26, r1
     ffa:	b1 05       	cpc	r27, r1
     ffc:	79 f4       	brne	.+30     	; 0x101c <RTOS_vScheduler+0x9c>
        {
            TASKS[L_u8Counter].PFun();
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	fc 01       	movw	r30, r24
    1010:	e4 5d       	subi	r30, 0xD4	; 212
    1012:	fd 4f       	sbci	r31, 0xFD	; 253
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	09 95       	icall
}
static void RTOS_vScheduler(void)
{
    G_u32Tick_Counts++;
    u8 L_u8Counter;
    for (L_u8Counter = 0; L_u8Counter < RTO_NUMBER_OF_TASKS; L_u8Counter++)
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	50 f2       	brcs	.-108    	; 0xfbc <RTOS_vScheduler+0x3c>
        else
        {
            /* do nothing */
        }
    }
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	08 95       	ret

00001038 <WDT_vEnable>:
#include "WDT_int.h"
#include "WDT_cfg.h"
#include "WDT_pri.h"

void WDT_vEnable(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR, WDE);
    1040:	a1 e4       	ldi	r26, 0x41	; 65
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e1 e4       	ldi	r30, 0x41	; 65
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 60       	ori	r24, 0x08	; 8
    104c:	8c 93       	st	X, r24
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <WDT_vDisable>:
void WDT_vDisable(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    /* In the same cycle WDE = 1 WDTDFE = 1 */
    WDTCR = 0b00011000;
    105c:	e1 e4       	ldi	r30, 0x41	; 65
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	88 e1       	ldi	r24, 0x18	; 24
    1062:	80 83       	st	Z, r24
    /* Within the next four cycles */
    WDTCR = 0;
    1064:	e1 e4       	ldi	r30, 0x41	; 65
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	10 82       	st	Z, r1
}
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <WDT_vSetSleep>:
void WDT_vSetSleep(u8 Copy_SleepTime)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	89 83       	std	Y+1, r24	; 0x01
    WDTCR &= 0b11111000;
    107c:	a1 e4       	ldi	r26, 0x41	; 65
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e1 e4       	ldi	r30, 0x41	; 65
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 7f       	andi	r24, 0xF8	; 248
    1088:	8c 93       	st	X, r24
    WDTCR |= Copy_SleepTime;
    108a:	a1 e4       	ldi	r26, 0x41	; 65
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e4       	ldi	r30, 0x41	; 65
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	90 81       	ld	r25, Z
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	89 2b       	or	r24, r25
    1098:	8c 93       	st	X, r24
}
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <UART_vInit>:
#include <avr/delay.h>

FUNC_PTR_Iu8_OV G_PTR_FUNC_RX;
static u8 G_u8DataSend;
void UART_vInit()
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    /* Select The Baud Rate */
    UBRRL = UBBR_VALUE;
    10aa:	e9 e2       	ldi	r30, 0x29	; 41
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	83 e3       	ldi	r24, 0x33	; 51
    10b0:	80 83       	st	Z, r24
    UBRRH = UBBR_VALUE >> 8;
    10b2:	e0 e4       	ldi	r30, 0x40	; 64
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	10 82       	st	Z, r1

    /* Enable Writing to UCSRC By Setting URSEL IN Each write in the Register*/
    /* Disable Parity */
    UCSRC = (UCSRC & PARITY_MASK) | PARITY_MODE << 4 | (1 << URSEL);
    10b8:	a0 e4       	ldi	r26, 0x40	; 64
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e0 e4       	ldi	r30, 0x40	; 64
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8f 74       	andi	r24, 0x4F	; 79
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	8c 93       	st	X, r24
    /* Select 1 Stop Bit */
    UCSRC = (UCSRC & STOP_BIT_MASK) | STOP_BIT_MODE << 3 | (1 << URSEL);
    10c8:	a0 e4       	ldi	r26, 0x40	; 64
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e0 e4       	ldi	r30, 0x40	; 64
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	87 77       	andi	r24, 0x77	; 119
    10d4:	80 68       	ori	r24, 0x80	; 128
    10d6:	8c 93       	st	X, r24
    /* Set Data Format 8 bit */
    UCSRC = (UCSRC & FORMAT_MODE_MASK_UCSRC) | DATA_FORMAT_UCSRC << 1 | (1 << URSEL);
    10d8:	a0 e4       	ldi	r26, 0x40	; 64
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e0 e4       	ldi	r30, 0x40	; 64
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	86 68       	ori	r24, 0x86	; 134
    10e4:	8c 93       	st	X, r24
    UCSRB = (UCSRB & FORMAT_MODE_MASK_UCSRB) | DATA_FORMAT_UCSRB << 2;
    10e6:	aa e2       	ldi	r26, 0x2A	; 42
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ea e2       	ldi	r30, 0x2A	; 42
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8b 7f       	andi	r24, 0xFB	; 251
    10f2:	8c 93       	st	X, r24
    /* Set Async Sync Mode */
    // UCSRC = (UCSRC & ASYNC_SYNC_MASK) | ASYNC_SYNC_MODE << 6 | (1 << URSEL);
    /* Set RX Pin as input PORTD PIN0*/
    DIO_vSetPinDir(PORTD_ID, PIN0_ID, DIR_INPUT);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* Set TX Pin as Output PORTD PIN1*/
    DIO_vSetPinDir(PORTD_ID, PIN1_ID, DIR_OUTPUT);
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>

    /* Enable Transmitter & Receiver*/
    SET_BIT(UCSRB, RXEN);
    1108:	aa e2       	ldi	r26, 0x2A	; 42
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e2       	ldi	r30, 0x2A	; 42
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	8c 93       	st	X, r24
    SET_BIT(UCSRB, TXEN);
    1116:	aa e2       	ldi	r26, 0x2A	; 42
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea e2       	ldi	r30, 0x2A	; 42
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	8c 93       	st	X, r24

    /* at the same clk cycle */
    // UCSRB |= (1 << RXEN) | (1 << TXEN);
    // UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <UART_vSendData>:
void UART_vSendData(u8 A_u8Data)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    /* Wait For Empty Transmit Buffer */
    while (!(UCSRA & (1 << UDRE)))
    1136:	eb e2       	ldi	r30, 0x2B	; 43
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	80 72       	andi	r24, 0x20	; 32
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	b9 f3       	breq	.-18     	; 0x1136 <UART_vSendData+0xc>
    {
        // wait
    }
    UDR = A_u8Data;
    1148:	ec e2       	ldi	r30, 0x2C	; 44
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	80 83       	st	Z, r24
}
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <UART_vSendDataAsync>:
void UART_vSendDataAsync(u8 A_u8Data)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vSetGlobalInterrupt();
    1164:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <GIE_vSetGlobalInterrupt>
    /* Enable UDR Empty interrupt */
    SET_BIT(UCSRB, UDRIE);
    1168:	aa e2       	ldi	r26, 0x2A	; 42
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea e2       	ldi	r30, 0x2A	; 42
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	8c 93       	st	X, r24
    /* Enable TX Transmit interrupt */
    // SET_BIT(UCSRB, TXCIE);
    /* Set The Data to global variables */
    G_u8DataSend = A_u8Data;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	80 93 e2 01 	sts	0x01E2, r24
}
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <UART_vSendString>:
void UART_vSendString(u8 *A_u8DataStr)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <UART_vSendString+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <UART_vSendString+0x8>
    118c:	00 d0       	rcall	.+0      	; 0x118e <UART_vSendString+0xa>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	1a 82       	std	Y+2, r1	; 0x02
    119a:	1b 82       	std	Y+3, r1	; 0x03
    119c:	1c 82       	std	Y+4, r1	; 0x04
    119e:	15 c0       	rjmp	.+42     	; 0x11ca <UART_vSendString+0x46>
    {
        UART_vSendData(A_u8DataStr[i]);
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	3a 81       	ldd	r19, Y+2	; 0x02
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 95 08 	call	0x112a	; 0x112a <UART_vSendData>
    G_u8DataSend = A_u8Data;
}
void UART_vSendString(u8 *A_u8DataStr)
{
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	ab 81       	ldd	r26, Y+3	; 0x03
    11ba:	bc 81       	ldd	r27, Y+4	; 0x04
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	a1 1d       	adc	r26, r1
    11c0:	b1 1d       	adc	r27, r1
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	ab 83       	std	Y+3, r26	; 0x03
    11c8:	bc 83       	std	Y+4, r27	; 0x04
    11ca:	29 81       	ldd	r18, Y+1	; 0x01
    11cc:	3a 81       	ldd	r19, Y+2	; 0x02
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	80 81       	ld	r24, Z
    11da:	88 23       	and	r24, r24
    11dc:	09 f7       	brne	.-62     	; 0x11a0 <UART_vSendString+0x1c>
    {
        UART_vSendData(A_u8DataStr[i]);
    }
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <UART_u8GetData>:

u8 UART_u8GetData(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    /* Wait untill receive flag is finished */
    while ((UCSRA & (1 << RXC)) == 0)
    11f8:	eb e2       	ldi	r30, 0x2B	; 43
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 23       	and	r24, r24
    1200:	dc f7       	brge	.-10     	; 0x11f8 <UART_u8GetData+0x8>
    {
        // wait
    }
    return UDR;
    1202:	ec e2       	ldi	r30, 0x2C	; 44
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <UART_vGetString>:
void UART_vGetString(u8 *A_u8Data)
{
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <UART_vGetString+0xa>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9b 83       	std	Y+3, r25	; 0x03
    1220:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8CharCount = 0;
    1222:	19 82       	std	Y+1, r1	; 0x01
    A_u8Data[L_u8CharCount] = UART_u8GetData();
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	8c 01       	movw	r16, r24
    1230:	02 0f       	add	r16, r18
    1232:	13 1f       	adc	r17, r19
    1234:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_u8GetData>
    1238:	f8 01       	movw	r30, r16
    123a:	80 83       	st	Z, r24
    123c:	0f c0       	rjmp	.+30     	; 0x125c <UART_vGetString+0x4e>
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
    {
        L_u8CharCount++;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	89 83       	std	Y+1, r24	; 0x01
        A_u8Data[L_u8CharCount] = UART_u8GetData();
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	8c 01       	movw	r16, r24
    1250:	02 0f       	add	r16, r18
    1252:	13 1f       	adc	r17, r19
    1254:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_u8GetData>
    1258:	f8 01       	movw	r30, r16
    125a:	80 83       	st	Z, r24
}
void UART_vGetString(u8 *A_u8Data)
{
    u8 L_u8CharCount = 0;
    A_u8Data[L_u8CharCount] = UART_u8GetData();
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	fc 01       	movw	r30, r24
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	80 81       	ld	r24, Z
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	21 f7       	brne	.-56     	; 0x123e <UART_vGetString+0x30>
    {
        L_u8CharCount++;
        A_u8Data[L_u8CharCount] = UART_u8GetData();
    }
    A_u8Data[L_u8CharCount] = '\0';
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	fc 01       	movw	r30, r24
    1282:	e2 0f       	add	r30, r18
    1284:	f3 1f       	adc	r31, r19
    1286:	10 82       	st	Z, r1
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <UART_u8GetDataAsync>:
void UART_u8GetDataAsync(FUNC_PTR_Iu8_OV A_Fptr)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <UART_u8GetDataAsync+0x6>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vSetGlobalInterrupt();
    12a6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <GIE_vSetGlobalInterrupt>
    /* Enable RX interrupt */
    SET_BIT(UCSRB, RXCIE);
    12aa:	aa e2       	ldi	r26, 0x2A	; 42
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ea e2       	ldi	r30, 0x2A	; 42
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	8c 93       	st	X, r24
    /* Register CallBack Function */
    G_PTR_FUNC_RX = A_Fptr;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	90 93 39 02 	sts	0x0239, r25
    12c0:	80 93 38 02 	sts	0x0238, r24
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <__vector_13>:
/* RX Complete Interrupt */
void __vector_13(void)
{
    12ce:	1f 92       	push	r1
    12d0:	0f 92       	push	r0
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	0f 92       	push	r0
    12d6:	11 24       	eor	r1, r1
    12d8:	2f 93       	push	r18
    12da:	3f 93       	push	r19
    12dc:	4f 93       	push	r20
    12de:	5f 93       	push	r21
    12e0:	6f 93       	push	r22
    12e2:	7f 93       	push	r23
    12e4:	8f 93       	push	r24
    12e6:	9f 93       	push	r25
    12e8:	af 93       	push	r26
    12ea:	bf 93       	push	r27
    12ec:	ef 93       	push	r30
    12ee:	ff 93       	push	r31
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    G_PTR_FUNC_RX(UDR);
    12f8:	e0 91 38 02 	lds	r30, 0x0238
    12fc:	f0 91 39 02 	lds	r31, 0x0239
    1300:	ac e2       	ldi	r26, 0x2C	; 44
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	8c 91       	ld	r24, X
    1306:	09 95       	icall
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	ff 91       	pop	r31
    130e:	ef 91       	pop	r30
    1310:	bf 91       	pop	r27
    1312:	af 91       	pop	r26
    1314:	9f 91       	pop	r25
    1316:	8f 91       	pop	r24
    1318:	7f 91       	pop	r23
    131a:	6f 91       	pop	r22
    131c:	5f 91       	pop	r21
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <__vector_14>:
/* UDRE Data Register Empty */
void __vector_14(void)
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	8f 93       	push	r24
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    UDR = G_u8DataSend;
    1346:	ec e2       	ldi	r30, 0x2C	; 44
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 91 e2 01 	lds	r24, 0x01E2
    134e:	80 83       	st	Z, r24
    // CLR_BIT(UCSRB, UDRIE);
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	8f 91       	pop	r24
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_15>:
/* TX Complete Interrupt */
void __vector_15(void)
{
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
}
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <TIMER_vInit>:
/*********************************************************/
/* INIT For all 3 timers, NOTE: Change your configuration*/
/*********************************************************/

void TIMER_vInit(u8 A_u8TIMERID)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <TIMER_vInit+0x6>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01

    switch (A_u8TIMERID)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3b 83       	std	Y+3, r19	; 0x03
    139a:	2a 83       	std	Y+2, r18	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	d1 f1       	breq	.+116    	; 0x141a <TIMER_vInit+0x96>
    13a6:	2a 81       	ldd	r18, Y+2	; 0x02
    13a8:	3b 81       	ldd	r19, Y+3	; 0x03
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	e9 f0       	breq	.+58     	; 0x13ea <TIMER_vInit+0x66>
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	09 f0       	breq	.+2      	; 0x13ba <TIMER_vInit+0x36>
    13b8:	54 c0       	rjmp	.+168    	; 0x1462 <TIMER_vInit+0xde>
    {
    case TIMER0:
        /* Timer Mode */
        TCCR0 = (TCCR0 & WAVE_GENERATION_MODE_MASK) | TIMER0_WAVE_GENERATION_MODE;
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	87 7b       	andi	r24, 0xB7	; 183
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	8c 93       	st	X, r24
        /* Set OC0 pin State */
        TCCR0 = (TCCR0 & OCR_PIN_MASK_T0_T2) | (TIMER0_OCR_PIN_MODE << 4);
    13ca:	a3 e5       	ldi	r26, 0x53	; 83
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e3 e5       	ldi	r30, 0x53	; 83
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7c       	andi	r24, 0xCF	; 207
    13d6:	8c 93       	st	X, r24
        /* set prescale */
        TCCR0 = (TCCR0 & CLOCK_SOURCE_MASK) | TIMER0_PRESCALE_MODE;
    13d8:	a3 e5       	ldi	r26, 0x53	; 83
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e3 e5       	ldi	r30, 0x53	; 83
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 7f       	andi	r24, 0xF8	; 248
    13e4:	82 60       	ori	r24, 0x02	; 2
    13e6:	8c 93       	st	X, r24
    13e8:	3c c0       	rjmp	.+120    	; 0x1462 <TIMER_vInit+0xde>

        break;
    case TIMER2:
        /* Timer Mode */
        TCCR2 = (TCCR2 & WAVE_GENERATION_MODE_MASK) | TIMER2_WAVE_GENERATION_MODE;
    13ea:	a5 e4       	ldi	r26, 0x45	; 69
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e4       	ldi	r30, 0x45	; 69
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 64       	ori	r24, 0x48	; 72
    13f6:	8c 93       	st	X, r24
        /* Set OC0 pin State */
        TCCR2 = (TCCR2 & OCR_PIN_MASK_T0_T2) | (TIMER2_OCR_PIN_MODE << 4);
    13f8:	a5 e4       	ldi	r26, 0x45	; 69
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e4       	ldi	r30, 0x45	; 69
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8f 7c       	andi	r24, 0xCF	; 207
    1404:	80 62       	ori	r24, 0x20	; 32
    1406:	8c 93       	st	X, r24
        /* set prescale */
        TCCR2 = (TCCR2 & CLOCK_SOURCE_MASK) | TIMER2_PRESCALE_MODE;
    1408:	a5 e4       	ldi	r26, 0x45	; 69
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e4       	ldi	r30, 0x45	; 69
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 7f       	andi	r24, 0xF8	; 248
    1414:	82 60       	ori	r24, 0x02	; 2
    1416:	8c 93       	st	X, r24
    1418:	24 c0       	rjmp	.+72     	; 0x1462 <TIMER_vInit+0xde>

        break;
    case TIMER1:
        /* SET COMPARE OUTPUT MODE FOR PIN OC1A OC2B */
        TCCR1A = (TCCR1A & OCR_PIN_MASK_T3_A) | (TIMER1_OCRA_PIN_MODE << 6);
    141a:	af e4       	ldi	r26, 0x4F	; 79
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ef e4       	ldi	r30, 0x4F	; 79
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 73       	andi	r24, 0x3F	; 63
    1426:	8c 93       	st	X, r24
        TCCR1A = (TCCR1A & OCR_PIN_MASK_T3_B) | (TIMER1_OCRB_PIN_MODE << 4);
    1428:	af e4       	ldi	r26, 0x4F	; 79
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ef e4       	ldi	r30, 0x4F	; 79
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 7c       	andi	r24, 0xCF	; 207
    1434:	8c 93       	st	X, r24
        /* SET PRESCALE */
        TCCR1B = (TCCR1B & CLOCK_SOURCE_MASK) | TIMER1_PRESACLE_MODE;
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	88 7f       	andi	r24, 0xF8	; 248
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	8c 93       	st	X, r24
        /* SET WAVE GENERATION MODE */
        TCCR1A = (TCCR1A & TCCR1A_WAVE_MODE_MASK) | TIMER1_WAVE_GENERATION_MODE_TCCR1A;
    1446:	af e4       	ldi	r26, 0x4F	; 79
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ef e4       	ldi	r30, 0x4F	; 79
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8c 7f       	andi	r24, 0xFC	; 252
    1452:	8c 93       	st	X, r24
        TCCR1B = (TCCR1B & TCCR1B_WAVE_MODE_MASK) | TIMER1_WAVE_GENERATION_MODE_TCCR1B;
    1454:	ae e4       	ldi	r26, 0x4E	; 78
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ee e4       	ldi	r30, 0x4E	; 78
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	87 7e       	andi	r24, 0xE7	; 231
    1460:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <TIMER_vSetPreLoad>:
/*********************************************************/
/* Set Preload For all 3 timers*/
/*********************************************************/
void TIMER_vSetPreLoad(u8 A_u8TIMERID, u16 A_u16PreloadValue)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <TIMER_vSetPreLoad+0x6>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <TIMER_vSetPreLoad+0x8>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	7b 83       	std	Y+3, r23	; 0x03
    1480:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8TIMERID)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3d 83       	std	Y+5, r19	; 0x05
    148a:	2c 83       	std	Y+4, r18	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	99 f0       	breq	.+38     	; 0x14bc <TIMER_vSetPreLoad+0x4e>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	49 f0       	breq	.+18     	; 0x14b2 <TIMER_vSetPreLoad+0x44>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	81 f4       	brne	.+32     	; 0x14c8 <TIMER_vSetPreLoad+0x5a>
    {
    case TIMER0:
        TCNT0 = (u8)A_u16PreloadValue;
    14a8:	e2 e5       	ldi	r30, 0x52	; 82
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	80 83       	st	Z, r24
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <TIMER_vSetPreLoad+0x5a>
        break;
    case TIMER2:
        TCNT2 = (u8)A_u16PreloadValue;
    14b2:	e4 e4       	ldi	r30, 0x44	; 68
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 83       	st	Z, r24
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <TIMER_vSetPreLoad+0x5a>
        break;
    case TIMER1:
        TCNTW = A_u16PreloadValue;
    14bc:	ec e4       	ldi	r30, 0x4C	; 76
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
        break;

    default:
        break;
    }
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <TIMER_vSetOcrValue>:
/*********************************************************/
/* Set OCR For all 3 timers , note don't use it with Timer1*/
/*********************************************************/
void TIMER_vSetOcrValue(u8 A_u8TIMERID, u16 A_u16OcrValue)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <TIMER_vSetOcrValue+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <TIMER_vSetOcrValue+0x8>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	7b 83       	std	Y+3, r23	; 0x03
    14ea:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8TIMERID)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	99 f0       	breq	.+38     	; 0x1526 <TIMER_vSetOcrValue+0x4e>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	49 f0       	breq	.+18     	; 0x151c <TIMER_vSetOcrValue+0x44>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	81 f4       	brne	.+32     	; 0x1532 <TIMER_vSetOcrValue+0x5a>
    {
    case TIMER0:
        OCR0 = (u8)A_u16OcrValue;
    1512:	ec e5       	ldi	r30, 0x5C	; 92
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	0b c0       	rjmp	.+22     	; 0x1532 <TIMER_vSetOcrValue+0x5a>
        break;
    case TIMER2:
        OCR2 = (u8)A_u16OcrValue;
    151c:	e3 e4       	ldi	r30, 0x43	; 67
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <TIMER_vSetOcrValue+0x5a>
        break;
    case TIMER1:
        /* THERE IS A AND B*/
        OCR1AW = A_u16OcrValue;
    1526:	ea e4       	ldi	r30, 0x4A	; 74
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
        break;

    default:
        break;
    }
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <TIMER_vSetOCR1AWValue>:
/*********************************************************/
/* Set OCR1A For Timer 1*/
/*********************************************************/
void TIMER_vSetOCR1AWValue(u16 A_u16OcrValue)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <TIMER_vSetOCR1AWValue+0x6>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
    OCR1AW = A_u16OcrValue;
    1550:	ea e4       	ldi	r30, 0x4A	; 74
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <TIMER_vSetOCR1BWValue>:
/*********************************************************/
/* Set OCR1B For Timer 1*/
/*********************************************************/
void TIMER_vSetOCR1BWValue(u16 A_u16OcrValue)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <TIMER_vSetOCR1BWValue+0x6>
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    OCR1BW = A_u16OcrValue;
    1574:	e8 e4       	ldi	r30, 0x48	; 72
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <TIMER_vSetICR1WValue>:
/*********************************************************/
/* Set ICR1W For Timer 1*/
/*********************************************************/
void TIMER_vSetICR1WValue(u16 A_u16OcrValue)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <TIMER_vSetICR1WValue+0x6>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    ICR1W = A_u16OcrValue;
    1598:	e6 e4       	ldi	r30, 0x46	; 70
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <TIMER_vDelayMS>:
/********************************************************/
/* Generate Delays, ALL TIMERS */
/********************************************************/

void TIMER_vDelayMS(u8 A_u8TIMERID, f32 A_f32Delay, FUNC_PTR_IV_OV A_FPtr)
{
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	a9 97       	sbiw	r28, 0x29	; 41
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	89 a3       	std	Y+33, r24	; 0x21
    15cc:	4a a3       	std	Y+34, r20	; 0x22
    15ce:	5b a3       	std	Y+35, r21	; 0x23
    15d0:	6c a3       	std	Y+36, r22	; 0x24
    15d2:	7d a3       	std	Y+37, r23	; 0x25
    15d4:	3f a3       	std	Y+39, r19	; 0x27
    15d6:	2e a3       	std	Y+38, r18	; 0x26
    GIE_vSetGlobalInterrupt();
    15d8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <GIE_vSetGlobalInterrupt>
    f32 L_f32OverFlowTime, L_f32DelayReq;
    f32 L_f32NumberOfOverflows, L_f32PreLoadFrac;
    u32 L_u32Counts, L_u32PreLoad, L_u32Ocr, L_u32TickTime;
    L_f32DelayReq = (A_f32Delay * 1.0) / 1000;
    15dc:	6a a1       	ldd	r22, Y+34	; 0x22
    15de:	7b a1       	ldd	r23, Y+35	; 0x23
    15e0:	8c a1       	ldd	r24, Y+36	; 0x24
    15e2:	9d a1       	ldd	r25, Y+37	; 0x25
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a e7       	ldi	r20, 0x7A	; 122
    15ea:	54 e4       	ldi	r21, 0x44	; 68
    15ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	89 8f       	std	Y+25, r24	; 0x19
    15f6:	9a 8f       	std	Y+26, r25	; 0x1a
    15f8:	ab 8f       	std	Y+27, r26	; 0x1b
    15fa:	bc 8f       	std	Y+28, r27	; 0x1c
    switch (A_u8TIMERID)
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	39 a7       	std	Y+41, r19	; 0x29
    1604:	28 a7       	std	Y+40, r18	; 0x28
    1606:	88 a5       	ldd	r24, Y+40	; 0x28
    1608:	99 a5       	ldd	r25, Y+41	; 0x29
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <TIMER_vDelayMS+0x64>
    1610:	a0 c0       	rjmp	.+320    	; 0x1752 <TIMER_vDelayMS+0x1a4>
    1612:	28 a5       	ldd	r18, Y+40	; 0x28
    1614:	39 a5       	ldd	r19, Y+41	; 0x29
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <TIMER_vDelayMS+0x70>
    161c:	a6 c0       	rjmp	.+332    	; 0x176a <TIMER_vDelayMS+0x1bc>
    161e:	88 a5       	ldd	r24, Y+40	; 0x28
    1620:	99 a5       	ldd	r25, Y+41	; 0x29
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	09 f0       	breq	.+2      	; 0x1628 <TIMER_vDelayMS+0x7a>
    1626:	a1 c0       	rjmp	.+322    	; 0x176a <TIMER_vDelayMS+0x1bc>
        /* Assign callback function */
        GLB_PTRF_TIM0_OVF = A_FPtr;
        /* Enable Timer Overflow Interrupt */
        SET_BIT(TIMSK, TOIE0);
#elif TIMER0_WAVE_GENERATION_MODE == WAVE_GENERATION_MODE_CTC
        L_u32TickTime = TIMER0_PRESCALE_VALUE / FCPU;
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	1a 82       	std	Y+2, r1	; 0x02
    162c:	1b 82       	std	Y+3, r1	; 0x03
    162e:	1c 82       	std	Y+4, r1	; 0x04
        L_u32Counts = L_f32DelayReq / L_u32TickTime;
    1630:	69 81       	ldd	r22, Y+1	; 0x01
    1632:	7a 81       	ldd	r23, Y+2	; 0x02
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	69 8d       	ldd	r22, Y+25	; 0x19
    1642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1648:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	8d 87       	std	Y+13, r24	; 0x0d
    165e:	9e 87       	std	Y+14, r25	; 0x0e
    1660:	af 87       	std	Y+15, r26	; 0x0f
    1662:	b8 8b       	std	Y+16, r27	; 0x10
        if (L_u32Counts <= TIMER0_RESOLUTION)
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	af 85       	ldd	r26, Y+15	; 0x0f
    166a:	b8 89       	ldd	r27, Y+16	; 0x10
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	21 e0       	ldi	r18, 0x01	; 1
    1670:	92 07       	cpc	r25, r18
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	a2 07       	cpc	r26, r18
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	b2 07       	cpc	r27, r18
    167a:	98 f4       	brcc	.+38     	; 0x16a2 <TIMER_vDelayMS+0xf4>
        { /* NUMBER OF COUNTS CAN FIT INSIDE THE OCR */
            TIMER_vSetOcrValue(TIMER0, L_u32Counts);
    167c:	2d 85       	ldd	r18, Y+13	; 0x0d
    167e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	b9 01       	movw	r22, r18
    1684:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TIMER_vSetOcrValue>
            G_u32Timer0Counts = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	80 93 f7 01 	sts	0x01F7, r24
    1694:	90 93 f8 01 	sts	0x01F8, r25
    1698:	a0 93 f9 01 	sts	0x01F9, r26
    169c:	b0 93 fa 01 	sts	0x01FA, r27
    16a0:	4a c0       	rjmp	.+148    	; 0x1736 <TIMER_vDelayMS+0x188>
        }
        else
        {
            L_u32Ocr = 250;
    16a2:	8a ef       	ldi	r24, 0xFA	; 250
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e0       	ldi	r26, 0x00	; 0
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	af 83       	std	Y+7, r26	; 0x07
    16b0:	b8 87       	std	Y+8, r27	; 0x08
            L_u32Counts = ((L_f32DelayReq * FCPU) / TIMER0_PRESCALE_VALUE) / L_u32Ocr;
    16b2:	69 8d       	ldd	r22, Y+25	; 0x19
    16b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	34 e2       	ldi	r19, 0x24	; 36
    16be:	44 ef       	ldi	r20, 0xF4	; 244
    16c0:	5a e4       	ldi	r21, 0x4A	; 74
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	7c 01       	movw	r14, r24
    16e0:	8d 01       	movw	r16, r26
    16e2:	6d 81       	ldd	r22, Y+5	; 0x05
    16e4:	7e 81       	ldd	r23, Y+6	; 0x06
    16e6:	8f 81       	ldd	r24, Y+7	; 0x07
    16e8:	98 85       	ldd	r25, Y+8	; 0x08
    16ea:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	c8 01       	movw	r24, r16
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8d 87       	std	Y+13, r24	; 0x0d
    170c:	9e 87       	std	Y+14, r25	; 0x0e
    170e:	af 87       	std	Y+15, r26	; 0x0f
    1710:	b8 8b       	std	Y+16, r27	; 0x10
            /* NUMBER OF COUNTS CANNOT FIT INSIDE THE OCR */
            /* SO We Set OCR With Init Value and counts the compare mactches*/
            TIMER_vSetOcrValue(TIMER0, L_u32Ocr);
    1712:	2d 81       	ldd	r18, Y+5	; 0x05
    1714:	3e 81       	ldd	r19, Y+6	; 0x06
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	b9 01       	movw	r22, r18
    171a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TIMER_vSetOcrValue>
            G_u32Timer0Counts = L_u32Counts;
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	af 85       	ldd	r26, Y+15	; 0x0f
    1724:	b8 89       	ldd	r27, Y+16	; 0x10
    1726:	80 93 f7 01 	sts	0x01F7, r24
    172a:	90 93 f8 01 	sts	0x01F8, r25
    172e:	a0 93 f9 01 	sts	0x01F9, r26
    1732:	b0 93 fa 01 	sts	0x01FA, r27
        }
        /* Assign callback function */
        GLB_PTRF_TIM0_CTC = A_FPtr;
    1736:	8e a1       	ldd	r24, Y+38	; 0x26
    1738:	9f a1       	ldd	r25, Y+39	; 0x27
    173a:	90 93 41 02 	sts	0x0241, r25
    173e:	80 93 40 02 	sts	0x0240, r24
        /* Enable Timer Overflow Interrupt */
        SET_BIT(TIMSK, OCIE0);
    1742:	a9 e5       	ldi	r26, 0x59	; 89
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e9 e5       	ldi	r30, 0x59	; 89
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	82 60       	ori	r24, 0x02	; 2
    174e:	8c 93       	st	X, r24
    1750:	0c c0       	rjmp	.+24     	; 0x176a <TIMER_vDelayMS+0x1bc>
    /********************* TIMER1 *******************/
    /************************************************/
    case TIMER1:
        /*You will need it*/
        /* Assign callback function */
        GLB_PTRF_TIM1_OVF = A_FPtr;
    1752:	8e a1       	ldd	r24, Y+38	; 0x26
    1754:	9f a1       	ldd	r25, Y+39	; 0x27
    1756:	90 93 45 02 	sts	0x0245, r25
    175a:	80 93 44 02 	sts	0x0244, r24
        /* Enable Timer Overflow Interrupt */
        GLB_PTRF_TIM1_CTC = A_FPtr;
    175e:	8e a1       	ldd	r24, Y+38	; 0x26
    1760:	9f a1       	ldd	r25, Y+39	; 0x27
    1762:	90 93 3d 02 	sts	0x023D, r25
    1766:	80 93 3c 02 	sts	0x023C, r24
        break;

    default:
        break;
    }
}
    176a:	a9 96       	adiw	r28, 0x29	; 41
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	08 95       	ret

00001784 <TIMER_vPWMSignal>:
/********************************************************/
/* Generate PWM SIGNALS, ALL TIMERS */
/********************************************************/

void TIMER_vPWMSignal(u8 A_u8TIMERID, f32 A_f32DutyCycle)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	29 97       	sbiw	r28, 0x09	; 9
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	8b 83       	std	Y+3, r24	; 0x03
    179a:	4c 83       	std	Y+4, r20	; 0x04
    179c:	5d 83       	std	Y+5, r21	; 0x05
    179e:	6e 83       	std	Y+6, r22	; 0x06
    17a0:	7f 83       	std	Y+7, r23	; 0x07
    u16 L_u16OcrValue;
    switch (A_u8TIMERID)
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	39 87       	std	Y+9, r19	; 0x09
    17aa:	28 87       	std	Y+8, r18	; 0x08
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	99 85       	ldd	r25, Y+9	; 0x09
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <TIMER_vPWMSignal+0x3c>
    17b4:	28 85       	ldd	r18, Y+8	; 0x08
    17b6:	39 85       	ldd	r19, Y+9	; 0x09
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	39 f0       	breq	.+14     	; 0x17cc <TIMER_vPWMSignal+0x48>
    17be:	2f c0       	rjmp	.+94     	; 0x181e <TIMER_vPWMSignal+0x9a>
    case TIMER0:
        /* *********************************** */
        /* SET OC0 as Output */
        /* *********************************** */

        DIO_vSetPinDir(PORTB_ID, PIN3_ID, DIR_OUTPUT);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    17ca:	29 c0       	rjmp	.+82     	; 0x181e <TIMER_vPWMSignal+0x9a>
    /************************************************/
    case TIMER2:
        /* *********************************** */
        /* SET OC2 as Output */
        /* *********************************** */
        DIO_vSetPinDir(PORTD_ID, PIN7_ID, DIR_OUTPUT);
    17cc:	83 e0       	ldi	r24, 0x03	; 3
    17ce:	67 e0       	ldi	r22, 0x07	; 7
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        /* *********************************** */
        /* Check Modes */
        /* *********************************** */
#if TIMER2_WAVE_GENERATION_MODE == WAVE_GENERATION_MODE_PWM_FAST
#if TIMER2_OCR_PIN_MODE == CLEAR_COMPARE_MODE_NON_INVERTING
        L_u16OcrValue = (A_f32DutyCycle * 1.0 / 100) * TIMER2_RESOLUTION;
    17d6:	6c 81       	ldd	r22, Y+4	; 0x04
    17d8:	7d 81       	ldd	r23, Y+5	; 0x05
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	48 ec       	ldi	r20, 0xC8	; 200
    17e4:	52 e4       	ldi	r21, 0x42	; 66
    17e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	53 e4       	ldi	r21, 0x43	; 67
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
        TIMER_vSetOcrValue(TIMER2, L_u16OcrValue);
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	3a 81       	ldd	r19, Y+2	; 0x02
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	b9 01       	movw	r22, r18
    181a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TIMER_vSetOcrValue>
        break;

    default:
        break;
    }
}
    181e:	29 96       	adiw	r28, 0x09	; 9
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <TIMER_u16GetICU>:
/********************************************************/
/* Get ICU Value */
/********************************************************/
u16 TIMER_u16GetICU()
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    return ICR1W;
    1838:	e6 e4       	ldi	r30, 0x46	; 70
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <TIMER_vsetCallBackFunctionOvfTIMER1>:
/********************************************************/
/* SET CallBack Function for overflow interrupt timer1 */
/********************************************************/
void TIMER_vsetCallBackFunctionOvfTIMER1(FUNC_PTR_IV_OV A_FPtr)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <TIMER_vsetCallBackFunctionOvfTIMER1+0x6>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    /* SET CALL BACK FUNCTION */
    GLB_PTRF_TIM1_OVF = A_FPtr;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	90 93 45 02 	sts	0x0245, r25
    185c:	80 93 44 02 	sts	0x0244, r24
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <TIMER_vsetCallBackFunctionIcuTIMER1>:
/********************************************************/
/* SET CallBack Function for ICU interrupt timer1 */
/********************************************************/
void TIMER_vsetCallBackFunctionIcuTIMER1(FUNC_PTR_IV_OV A_FPtr)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	00 d0       	rcall	.+0      	; 0x1870 <TIMER_vsetCallBackFunctionIcuTIMER1+0x6>
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	9a 83       	std	Y+2, r25	; 0x02
    1876:	89 83       	std	Y+1, r24	; 0x01
    GLB_PTRF_TIM1_ICU = A_FPtr;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	90 93 47 02 	sts	0x0247, r25
    1880:	80 93 46 02 	sts	0x0246, r24
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <TIMER_vCongfigureICU>:
/********************************************************************/
/* Configure ICU To be used , NOTE it is seperate from function init */
/*********************************************************************/
void TIMER_vCongfigureICU()
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    /* SELECT NORMAL MODE FROM CONFIGURATIONs */
    CLR_BIT(TCCR1A, WGM10);
    1896:	af e4       	ldi	r26, 0x4F	; 79
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ef e4       	ldi	r30, 0x4F	; 79
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, WGM11);
    18a4:	af e4       	ldi	r26, 0x4F	; 79
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ef e4       	ldi	r30, 0x4F	; 79
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8d 7f       	andi	r24, 0xFD	; 253
    18b0:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM12);
    18b2:	ae e4       	ldi	r26, 0x4E	; 78
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	ee e4       	ldi	r30, 0x4E	; 78
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	87 7f       	andi	r24, 0xF7	; 247
    18be:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM13);
    18c0:	ae e4       	ldi	r26, 0x4E	; 78
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ee e4       	ldi	r30, 0x4E	; 78
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	8f 7e       	andi	r24, 0xEF	; 239
    18cc:	8c 93       	st	X, r24
    /* SET TRTIGGER TO RISING EDGE */
    SET_BIT(TCCR1B, ICES1);
    18ce:	ae e4       	ldi	r26, 0x4E	; 78
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ee e4       	ldi	r30, 0x4E	; 78
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 64       	ori	r24, 0x40	; 64
    18da:	8c 93       	st	X, r24
    /* ENABLE INTERRUPT for ICU */
    SET_BIT(TIMSK, TICIE1);
    18dc:	a9 e5       	ldi	r26, 0x59	; 89
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e9 e5       	ldi	r30, 0x59	; 89
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	80 62       	ori	r24, 0x20	; 32
    18e8:	8c 93       	st	X, r24
    /* Enable Overflow interrupt */
    SET_BIT(TIMSK, TOIE1);
    18ea:	a9 e5       	ldi	r26, 0x59	; 89
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e9 e5       	ldi	r30, 0x59	; 89
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	84 60       	ori	r24, 0x04	; 4
    18f6:	8c 93       	st	X, r24
    /* SET ICP AS INPUT PD6 */
    DIO_vSetPinDir(PORTD_ID, PIN6_ID, DIR_INPUT);
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	66 e0       	ldi	r22, 0x06	; 6
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET PRESCALE FROM CONFIGURATIONS to 8*/
    CLR_BIT(TCCR1B, CS10);
    1902:	ae e4       	ldi	r26, 0x4E	; 78
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ee e4       	ldi	r30, 0x4E	; 78
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	8e 7f       	andi	r24, 0xFE	; 254
    190e:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS11);
    1910:	ae e4       	ldi	r26, 0x4E	; 78
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e4       	ldi	r30, 0x4E	; 78
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	82 60       	ori	r24, 0x02	; 2
    191c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, CS12);
    191e:	ae e4       	ldi	r26, 0x4E	; 78
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ee e4       	ldi	r30, 0x4E	; 78
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	8b 7f       	andi	r24, 0xFB	; 251
    192a:	8c 93       	st	X, r24
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <TIMER_vDisableIntICU>:
/********************************************************************/
/* Disable ICU Interrupt */
/*********************************************************************/
void TIMER_vDisableIntICU()
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    /* Disable INTERRUPT for ICU */
    CLR_BIT(TIMSK, TICIE1);
    193a:	a9 e5       	ldi	r26, 0x59	; 89
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e9 e5       	ldi	r30, 0x59	; 89
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 7d       	andi	r24, 0xDF	; 223
    1946:	8c 93       	st	X, r24
}
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <TIMER_vSetTriggeringICU>:
/********************************************************************/
/* Set Triggering , Rising Or Falling for ICES1 for ICU*/
/*********************************************************************/
void TIMER_vSetTriggeringICU(u8 A_u8Triggering)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <TIMER_vSetTriggeringICU+0x6>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8Triggering)
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3b 83       	std	Y+3, r19	; 0x03
    1964:	2a 83       	std	Y+2, r18	; 0x02
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	31 f0       	breq	.+12     	; 0x197a <TIMER_vSetTriggeringICU+0x2c>
    196e:	2a 81       	ldd	r18, Y+2	; 0x02
    1970:	3b 81       	ldd	r19, Y+3	; 0x03
    1972:	21 30       	cpi	r18, 0x01	; 1
    1974:	31 05       	cpc	r19, r1
    1976:	49 f0       	breq	.+18     	; 0x198a <TIMER_vSetTriggeringICU+0x3c>
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <TIMER_vSetTriggeringICU+0x4a>
    {
    case RISING:
        /* SET TRIGGERING TO RISING EDGE */
        SET_BIT(TCCR1B, ICES1);
    197a:	ae e4       	ldi	r26, 0x4E	; 78
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ee e4       	ldi	r30, 0x4E	; 78
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 64       	ori	r24, 0x40	; 64
    1986:	8c 93       	st	X, r24
    1988:	07 c0       	rjmp	.+14     	; 0x1998 <TIMER_vSetTriggeringICU+0x4a>
        break;
    case FALLING:
        /* SET TRIGGERING TO FALLING EDGE */
        CLR_BIT(TCCR1B, ICES1);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8f 7b       	andi	r24, 0xBF	; 191
    1996:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <__vector_10>:
/*********************************************************************/
/******************** ISR / TIMER0**************************/
/*********************************************************************/
/* TIMER0 COMP */
void __vector_10(void)
{
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    19ce:	80 91 e7 01 	lds	r24, 0x01E7
    19d2:	90 91 e8 01 	lds	r25, 0x01E8
    19d6:	a0 91 e9 01 	lds	r26, 0x01E9
    19da:	b0 91 ea 01 	lds	r27, 0x01EA
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	a1 1d       	adc	r26, r1
    19e2:	b1 1d       	adc	r27, r1
    19e4:	80 93 e7 01 	sts	0x01E7, r24
    19e8:	90 93 e8 01 	sts	0x01E8, r25
    19ec:	a0 93 e9 01 	sts	0x01E9, r26
    19f0:	b0 93 ea 01 	sts	0x01EA, r27
    if (L_u32Counter == G_u32Timer0Counts)
    19f4:	20 91 e7 01 	lds	r18, 0x01E7
    19f8:	30 91 e8 01 	lds	r19, 0x01E8
    19fc:	40 91 e9 01 	lds	r20, 0x01E9
    1a00:	50 91 ea 01 	lds	r21, 0x01EA
    1a04:	80 91 f7 01 	lds	r24, 0x01F7
    1a08:	90 91 f8 01 	lds	r25, 0x01F8
    1a0c:	a0 91 f9 01 	lds	r26, 0x01F9
    1a10:	b0 91 fa 01 	lds	r27, 0x01FA
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	4a 07       	cpc	r20, r26
    1a1a:	5b 07       	cpc	r21, r27
    1a1c:	69 f4       	brne	.+26     	; 0x1a38 <__vector_10+0x94>
    {
        L_u32Counter = 0;
    1a1e:	10 92 e7 01 	sts	0x01E7, r1
    1a22:	10 92 e8 01 	sts	0x01E8, r1
    1a26:	10 92 e9 01 	sts	0x01E9, r1
    1a2a:	10 92 ea 01 	sts	0x01EA, r1
        GLB_PTRF_TIM0_CTC();
    1a2e:	e0 91 40 02 	lds	r30, 0x0240
    1a32:	f0 91 41 02 	lds	r31, 0x0241
    1a36:	09 95       	icall
    }
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_11>:
/* TIMER0 OVF */
void __vector_11(void)
{
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    1a88:	80 91 eb 01 	lds	r24, 0x01EB
    1a8c:	90 91 ec 01 	lds	r25, 0x01EC
    1a90:	a0 91 ed 01 	lds	r26, 0x01ED
    1a94:	b0 91 ee 01 	lds	r27, 0x01EE
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	b1 1d       	adc	r27, r1
    1a9e:	80 93 eb 01 	sts	0x01EB, r24
    1aa2:	90 93 ec 01 	sts	0x01EC, r25
    1aa6:	a0 93 ed 01 	sts	0x01ED, r26
    1aaa:	b0 93 ee 01 	sts	0x01EE, r27
    if (L_u32Counter == G_u32Timer0Counts)
    1aae:	20 91 eb 01 	lds	r18, 0x01EB
    1ab2:	30 91 ec 01 	lds	r19, 0x01EC
    1ab6:	40 91 ed 01 	lds	r20, 0x01ED
    1aba:	50 91 ee 01 	lds	r21, 0x01EE
    1abe:	80 91 f7 01 	lds	r24, 0x01F7
    1ac2:	90 91 f8 01 	lds	r25, 0x01F8
    1ac6:	a0 91 f9 01 	lds	r26, 0x01F9
    1aca:	b0 91 fa 01 	lds	r27, 0x01FA
    1ace:	28 17       	cp	r18, r24
    1ad0:	39 07       	cpc	r19, r25
    1ad2:	4a 07       	cpc	r20, r26
    1ad4:	5b 07       	cpc	r21, r27
    1ad6:	d1 f4       	brne	.+52     	; 0x1b0c <__vector_11+0xae>
    {
        L_u32Counter = 0;
    1ad8:	10 92 eb 01 	sts	0x01EB, r1
    1adc:	10 92 ec 01 	sts	0x01EC, r1
    1ae0:	10 92 ed 01 	sts	0x01ED, r1
    1ae4:	10 92 ee 01 	sts	0x01EE, r1
        TIMER_vSetPreLoad(TIMER0, G_u32Timer0PreLoad);
    1ae8:	80 91 03 02 	lds	r24, 0x0203
    1aec:	90 91 04 02 	lds	r25, 0x0204
    1af0:	a0 91 05 02 	lds	r26, 0x0205
    1af4:	b0 91 06 02 	lds	r27, 0x0206
    1af8:	9c 01       	movw	r18, r24
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	b9 01       	movw	r22, r18
    1afe:	0e 94 37 0a 	call	0x146e	; 0x146e <TIMER_vSetPreLoad>
        GLB_PTRF_TIM0_OVF();
    1b02:	e0 91 3a 02 	lds	r30, 0x023A
    1b06:	f0 91 3b 02 	lds	r31, 0x023B
    1b0a:	09 95       	icall
    }
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_4>:
/*********************************************************************/
/******************** ISR / TIMER2 **************************/
/*********************************************************************/
/* TIMER COMP */
void __vector_4(void)
{
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    1b5c:	80 91 ef 01 	lds	r24, 0x01EF
    1b60:	90 91 f0 01 	lds	r25, 0x01F0
    1b64:	a0 91 f1 01 	lds	r26, 0x01F1
    1b68:	b0 91 f2 01 	lds	r27, 0x01F2
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	b1 1d       	adc	r27, r1
    1b72:	80 93 ef 01 	sts	0x01EF, r24
    1b76:	90 93 f0 01 	sts	0x01F0, r25
    1b7a:	a0 93 f1 01 	sts	0x01F1, r26
    1b7e:	b0 93 f2 01 	sts	0x01F2, r27
    if (L_u32Counter == G_u32Timer2Counts)
    1b82:	20 91 ef 01 	lds	r18, 0x01EF
    1b86:	30 91 f0 01 	lds	r19, 0x01F0
    1b8a:	40 91 f1 01 	lds	r20, 0x01F1
    1b8e:	50 91 f2 01 	lds	r21, 0x01F2
    1b92:	80 91 ff 01 	lds	r24, 0x01FF
    1b96:	90 91 00 02 	lds	r25, 0x0200
    1b9a:	a0 91 01 02 	lds	r26, 0x0201
    1b9e:	b0 91 02 02 	lds	r27, 0x0202
    1ba2:	28 17       	cp	r18, r24
    1ba4:	39 07       	cpc	r19, r25
    1ba6:	4a 07       	cpc	r20, r26
    1ba8:	5b 07       	cpc	r21, r27
    1baa:	69 f4       	brne	.+26     	; 0x1bc6 <__vector_4+0x94>
    {
        L_u32Counter = 0;
    1bac:	10 92 ef 01 	sts	0x01EF, r1
    1bb0:	10 92 f0 01 	sts	0x01F0, r1
    1bb4:	10 92 f1 01 	sts	0x01F1, r1
    1bb8:	10 92 f2 01 	sts	0x01F2, r1
        GLB_PTRF_TIM2_CTC();
    1bbc:	e0 91 3e 02 	lds	r30, 0x023E
    1bc0:	f0 91 3f 02 	lds	r31, 0x023F
    1bc4:	09 95       	icall
    }
}
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	7f 91       	pop	r23
    1bd8:	6f 91       	pop	r22
    1bda:	5f 91       	pop	r21
    1bdc:	4f 91       	pop	r20
    1bde:	3f 91       	pop	r19
    1be0:	2f 91       	pop	r18
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_5>:
/* TIMER2 OVF */
void __vector_5(void)
{
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	2f 93       	push	r18
    1bf8:	3f 93       	push	r19
    1bfa:	4f 93       	push	r20
    1bfc:	5f 93       	push	r21
    1bfe:	6f 93       	push	r22
    1c00:	7f 93       	push	r23
    1c02:	8f 93       	push	r24
    1c04:	9f 93       	push	r25
    1c06:	af 93       	push	r26
    1c08:	bf 93       	push	r27
    1c0a:	ef 93       	push	r30
    1c0c:	ff 93       	push	r31
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    1c16:	80 91 f3 01 	lds	r24, 0x01F3
    1c1a:	90 91 f4 01 	lds	r25, 0x01F4
    1c1e:	a0 91 f5 01 	lds	r26, 0x01F5
    1c22:	b0 91 f6 01 	lds	r27, 0x01F6
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	a1 1d       	adc	r26, r1
    1c2a:	b1 1d       	adc	r27, r1
    1c2c:	80 93 f3 01 	sts	0x01F3, r24
    1c30:	90 93 f4 01 	sts	0x01F4, r25
    1c34:	a0 93 f5 01 	sts	0x01F5, r26
    1c38:	b0 93 f6 01 	sts	0x01F6, r27
    if (L_u32Counter == G_u32Timer2Counts)
    1c3c:	20 91 f3 01 	lds	r18, 0x01F3
    1c40:	30 91 f4 01 	lds	r19, 0x01F4
    1c44:	40 91 f5 01 	lds	r20, 0x01F5
    1c48:	50 91 f6 01 	lds	r21, 0x01F6
    1c4c:	80 91 ff 01 	lds	r24, 0x01FF
    1c50:	90 91 00 02 	lds	r25, 0x0200
    1c54:	a0 91 01 02 	lds	r26, 0x0201
    1c58:	b0 91 02 02 	lds	r27, 0x0202
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	4a 07       	cpc	r20, r26
    1c62:	5b 07       	cpc	r21, r27
    1c64:	d1 f4       	brne	.+52     	; 0x1c9a <__vector_5+0xae>
    {
        L_u32Counter = 0;
    1c66:	10 92 f3 01 	sts	0x01F3, r1
    1c6a:	10 92 f4 01 	sts	0x01F4, r1
    1c6e:	10 92 f5 01 	sts	0x01F5, r1
    1c72:	10 92 f6 01 	sts	0x01F6, r1
        TIMER_vSetPreLoad(TIMER2, G_u32Timer2PreLoad);
    1c76:	80 91 0b 02 	lds	r24, 0x020B
    1c7a:	90 91 0c 02 	lds	r25, 0x020C
    1c7e:	a0 91 0d 02 	lds	r26, 0x020D
    1c82:	b0 91 0e 02 	lds	r27, 0x020E
    1c86:	9c 01       	movw	r18, r24
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	b9 01       	movw	r22, r18
    1c8c:	0e 94 37 0a 	call	0x146e	; 0x146e <TIMER_vSetPreLoad>
        GLB_PTRF_TIM2_OVF();
    1c90:	e0 91 42 02 	lds	r30, 0x0242
    1c94:	f0 91 43 02 	lds	r31, 0x0243
    1c98:	09 95       	icall
    }
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	0f 90       	pop	r0
    1cbc:	1f 90       	pop	r1
    1cbe:	18 95       	reti

00001cc0 <__vector_6>:
/*********************************************************************/
/******************** ISR / TIMER1 **************************/
/*********************************************************************/
/* ICU */
void __vector_6(void)
{
    1cc0:	1f 92       	push	r1
    1cc2:	0f 92       	push	r0
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	0f 92       	push	r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    GLB_PTRF_TIM1_ICU();
    1cea:	e0 91 46 02 	lds	r30, 0x0246
    1cee:	f0 91 47 02 	lds	r31, 0x0247
    1cf2:	09 95       	icall
}
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	bf 91       	pop	r27
    1cfe:	af 91       	pop	r26
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	7f 91       	pop	r23
    1d06:	6f 91       	pop	r22
    1d08:	5f 91       	pop	r21
    1d0a:	4f 91       	pop	r20
    1d0c:	3f 91       	pop	r19
    1d0e:	2f 91       	pop	r18
    1d10:	0f 90       	pop	r0
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	0f 90       	pop	r0
    1d16:	1f 90       	pop	r1
    1d18:	18 95       	reti

00001d1a <__vector_9>:
/* OVF */
void __vector_9(void)
{
    1d1a:	1f 92       	push	r1
    1d1c:	0f 92       	push	r0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	0f 92       	push	r0
    1d22:	11 24       	eor	r1, r1
    1d24:	2f 93       	push	r18
    1d26:	3f 93       	push	r19
    1d28:	4f 93       	push	r20
    1d2a:	5f 93       	push	r21
    1d2c:	6f 93       	push	r22
    1d2e:	7f 93       	push	r23
    1d30:	8f 93       	push	r24
    1d32:	9f 93       	push	r25
    1d34:	af 93       	push	r26
    1d36:	bf 93       	push	r27
    1d38:	ef 93       	push	r30
    1d3a:	ff 93       	push	r31
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    GLB_PTRF_TIM1_OVF();
    1d44:	e0 91 44 02 	lds	r30, 0x0244
    1d48:	f0 91 45 02 	lds	r31, 0x0245
    1d4c:	09 95       	icall
}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	7f 91       	pop	r23
    1d60:	6f 91       	pop	r22
    1d62:	5f 91       	pop	r21
    1d64:	4f 91       	pop	r20
    1d66:	3f 91       	pop	r19
    1d68:	2f 91       	pop	r18
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	0f 90       	pop	r0
    1d70:	1f 90       	pop	r1
    1d72:	18 95       	reti

00001d74 <SPI_vMasterInit>:
#include "SPI_cfg.h"
#include "SPI_pri.h"

FUNC_PTR_Iu8_OV GLB_PTR_FUNC;
void SPI_vMasterInit(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    /* SELECT CLK FREQ */
    SPCR = (SPCR & CLK_FREQ_MASK_SPCR) | MASTER_CLK_FREQ_SPCR;
    1d7c:	ad e2       	ldi	r26, 0x2D	; 45
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ed e2       	ldi	r30, 0x2D	; 45
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8c 7f       	andi	r24, 0xFC	; 252
    1d88:	8c 93       	st	X, r24
    SPSR = (SPSR & CLK_FREQ_MASK_SPSR) | MASTER_CLK_FREQ_SPSR;
    1d8a:	ae e2       	ldi	r26, 0x2E	; 46
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ee e2       	ldi	r30, 0x2E	; 46
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	8c 93       	st	X, r24
    /* SELECT CLK POLARITY */
    SPCR = (SPCR & CLOCK_POLARITY_MASK) | MASTER_CLK_POL << 3;
    1d98:	ad e2       	ldi	r26, 0x2D	; 45
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ed e2       	ldi	r30, 0x2D	; 45
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	87 7f       	andi	r24, 0xF7	; 247
    1da4:	8c 93       	st	X, r24
    /* SELECT CLK PHASE */
    SPCR = (SPCR & CLOCK_PHASE_MASK) | MASTER_CLK_PHASE << 2;
    1da6:	ad e2       	ldi	r26, 0x2D	; 45
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ed e2       	ldi	r30, 0x2D	; 45
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8b 7f       	andi	r24, 0xFB	; 251
    1db2:	8c 93       	st	X, r24
    /* SELECT DATA ORDER */
    SPCR = (SPCR & DATA_ORDER_MASK) | MASTER_DATA_ORDER_MODE << 5;
    1db4:	ad e2       	ldi	r26, 0x2D	; 45
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ed e2       	ldi	r30, 0x2D	; 45
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	80 62       	ori	r24, 0x20	; 32
    1dc0:	8c 93       	st	X, r24
    /* CONFIGURE AS MASTER*/
    SET_BIT(SPCR, MSTR);
    1dc2:	ad e2       	ldi	r26, 0x2D	; 45
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ed e2       	ldi	r30, 0x2D	; 45
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 61       	ori	r24, 0x10	; 16
    1dce:	8c 93       	st	X, r24
    /* SET MOSI OUTPUT PB5 */
    DIO_vSetPinDir(PORTB_ID, PIN5_ID, DIR_OUTPUT);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	65 e0       	ldi	r22, 0x05	; 5
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET MISO INPUT PB6 */
    DIO_vSetPinDir(PORTB_ID, PIN6_ID, DIR_INPUT);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	66 e0       	ldi	r22, 0x06	; 6
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET CLK OUTPUT PB7 */
    DIO_vSetPinDir(PORTB_ID, PIN7_ID, DIR_OUTPUT);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	67 e0       	ldi	r22, 0x07	; 7
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET SS OUTPUT PB4 */
    DIO_vSetPinDir(PORTB_ID, PIN4_ID, DIR_OUTPUT);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	64 e0       	ldi	r22, 0x04	; 4
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* ENABLE SPE */
    SET_BIT(SPCR, SPE);
    1df8:	ad e2       	ldi	r26, 0x2D	; 45
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	ed e2       	ldi	r30, 0x2D	; 45
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 64       	ori	r24, 0x40	; 64
    1e04:	8c 93       	st	X, r24
}
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <SPI_vSlaveInit>:
void SPI_vSlaveInit(void)
{
    1e0c:	df 93       	push	r29
    1e0e:	cf 93       	push	r28
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    /* SELECT CLK FREQ */
    SPCR = (SPCR & CLK_FREQ_MASK_SPCR) | SLAVE_CLK_FREQ_SPCR;
    1e14:	ad e2       	ldi	r26, 0x2D	; 45
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ed e2       	ldi	r30, 0x2D	; 45
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8c 7f       	andi	r24, 0xFC	; 252
    1e20:	8c 93       	st	X, r24
    SPSR = (SPSR & CLK_FREQ_MASK_SPSR) | SLAVE_CLK_FREQ_SPSR;
    1e22:	ae e2       	ldi	r26, 0x2E	; 46
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	ee e2       	ldi	r30, 0x2E	; 46
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	81 60       	ori	r24, 0x01	; 1
    1e2e:	8c 93       	st	X, r24
    /* SELECT CLK POLARITY */
    SPCR = (SPCR & CLOCK_POLARITY_MASK) | SLAVE_CLK_POL << 3;
    1e30:	ad e2       	ldi	r26, 0x2D	; 45
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ed e2       	ldi	r30, 0x2D	; 45
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	87 7f       	andi	r24, 0xF7	; 247
    1e3c:	8c 93       	st	X, r24
    /* SELECT CLK PHASE */
    SPCR = (SPCR & CLOCK_PHASE_MASK) | SLAVE_CLK_PHASE << 2;
    1e3e:	ad e2       	ldi	r26, 0x2D	; 45
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ed e2       	ldi	r30, 0x2D	; 45
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8b 7f       	andi	r24, 0xFB	; 251
    1e4a:	8c 93       	st	X, r24
    /* SELECT DATA ORDER */
    SPCR = (SPCR & DATA_ORDER_MASK) | SLAVE_DATA_ORDER_MODE << 5;
    1e4c:	ad e2       	ldi	r26, 0x2D	; 45
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ed e2       	ldi	r30, 0x2D	; 45
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 62       	ori	r24, 0x20	; 32
    1e58:	8c 93       	st	X, r24
    /* CONFIGURE AS SLAVE*/
    CLR_BIT(SPCR, MSTR);
    1e5a:	ad e2       	ldi	r26, 0x2D	; 45
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ed e2       	ldi	r30, 0x2D	; 45
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7e       	andi	r24, 0xEF	; 239
    1e66:	8c 93       	st	X, r24
    /* SET MOSI INPUT PB5 */
    DIO_vSetPinDir(PORTB_ID, PIN5_ID, DIR_INPUT);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	65 e0       	ldi	r22, 0x05	; 5
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET MISO OUTPUT PB6 */
    DIO_vSetPinDir(PORTB_ID, PIN6_ID, DIR_OUTPUT);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	66 e0       	ldi	r22, 0x06	; 6
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET CLK INPUT PB7 */
    DIO_vSetPinDir(PORTB_ID, PIN7_ID, DIR_INPUT);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* SET SS INPUT PB4 */
    DIO_vSetPinDir(PORTB_ID, PIN4_ID, DIR_INPUT);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	64 e0       	ldi	r22, 0x04	; 4
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    /* ENABLE SPE */
    SET_BIT(SPCR, SPE);
    1e90:	ad e2       	ldi	r26, 0x2D	; 45
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ed e2       	ldi	r30, 0x2D	; 45
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 64       	ori	r24, 0x40	; 64
    1e9c:	8c 93       	st	X, r24
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <SPI_u8Traceiver>:
u8 SPI_u8Traceiver(u8 A_u8Data)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
    SPDR = A_u8Data;
    1eb0:	ef e2       	ldi	r30, 0x2F	; 47
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	80 83       	st	Z, r24
    while ((SPSR & 1 << SPIF) == 0)
    1eb8:	ee e2       	ldi	r30, 0x2E	; 46
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 23       	and	r24, r24
    1ec0:	dc f7       	brge	.-10     	; 0x1eb8 <SPI_u8Traceiver+0x14>
    {
        /* Waiting */
    }
    return SPDR;
    1ec2:	ef e2       	ldi	r30, 0x2F	; 47
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
}
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <SPI_vTransmitData>:

void SPI_vTransmitData(u8 A_u8Data)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	0f 92       	push	r0
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	89 83       	std	Y+1, r24	; 0x01
    SPDR = A_u8Data;
    1edc:	ef e2       	ldi	r30, 0x2F	; 47
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	80 83       	st	Z, r24
    while ((SPSR & (1 << SPIF)) == 0)
    1ee4:	ee e2       	ldi	r30, 0x2E	; 46
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	dc f7       	brge	.-10     	; 0x1ee4 <SPI_vTransmitData+0x14>
    {
        /* Waiting */
    }
}
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <SPI_vTransmitString>:
void SPI_vTransmitString(u8 *A_u8Data)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <SPI_vTransmitString+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <SPI_vTransmitString+0x8>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <SPI_vTransmitString+0xa>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8Data[i] != 0; i++)
    1f08:	19 82       	std	Y+1, r1	; 0x01
    1f0a:	1a 82       	std	Y+2, r1	; 0x02
    1f0c:	1b 82       	std	Y+3, r1	; 0x03
    1f0e:	1c 82       	std	Y+4, r1	; 0x04
    1f10:	15 c0       	rjmp	.+42     	; 0x1f3c <SPI_vTransmitString+0x46>
    {
        SPI_vTransmitData(A_u8Data[i]);
    1f12:	29 81       	ldd	r18, Y+1	; 0x01
    1f14:	3a 81       	ldd	r19, Y+2	; 0x02
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e2 0f       	add	r30, r18
    1f1e:	f3 1f       	adc	r31, r19
    1f20:	80 81       	ld	r24, Z
    1f22:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <SPI_vTransmitData>
    }
}
void SPI_vTransmitString(u8 *A_u8Data)
{
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8Data[i] != 0; i++)
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	a1 1d       	adc	r26, r1
    1f32:	b1 1d       	adc	r27, r1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	ab 83       	std	Y+3, r26	; 0x03
    1f3a:	bc 83       	std	Y+4, r27	; 0x04
    1f3c:	29 81       	ldd	r18, Y+1	; 0x01
    1f3e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 0f       	add	r30, r18
    1f48:	f3 1f       	adc	r31, r19
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f7       	brne	.-62     	; 0x1f12 <SPI_vTransmitString+0x1c>
    {
        SPI_vTransmitData(A_u8Data[i]);
    }
}
    1f50:	26 96       	adiw	r28, 0x06	; 6
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <SPI_u8ReceiveData>:
u8 SPI_u8ReceiveData(void)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    while ((SPSR & (1 << SPIF)) == 0)
    1f6a:	ee e2       	ldi	r30, 0x2E	; 46
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 23       	and	r24, r24
    1f72:	dc f7       	brge	.-10     	; 0x1f6a <SPI_u8ReceiveData+0x8>
    {
        /* Waiting */
    }
    return SPDR;
    1f74:	ef e2       	ldi	r30, 0x2F	; 47
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <SPI_vReciceveDataAsync>:

void SPI_vReciceveDataAsync(FUNC_PTR_Iu8_OV A_Fptr)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <SPI_vReciceveDataAsync+0x6>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	9a 83       	std	Y+2, r25	; 0x02
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    /* Enable Global Interrupt */
    GIE_vSetGlobalInterrupt();
    1f8e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <GIE_vSetGlobalInterrupt>
    /* Enable SPI Interrupt */
    SET_BIT(SPCR, SPIE);
    1f92:	ad e2       	ldi	r26, 0x2D	; 45
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ed e2       	ldi	r30, 0x2D	; 45
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 68       	ori	r24, 0x80	; 128
    1f9e:	8c 93       	st	X, r24
    /* Register CallBack Function */
    GLB_PTR_FUNC = A_Fptr;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	90 93 49 02 	sts	0x0249, r25
    1fa8:	80 93 48 02 	sts	0x0248, r24
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <__vector_12>:
void SPI_vTransmitDataAsync(u8 A_u8Data);

/* Serial Transfer Complete Interrupt */
void __vector_12(void)
{
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    GLB_PTR_FUNC(SPDR);
    1fe0:	e0 91 48 02 	lds	r30, 0x0248
    1fe4:	f0 91 49 02 	lds	r31, 0x0249
    1fe8:	af e2       	ldi	r26, 0x2F	; 47
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	8c 91       	ld	r24, X
    1fee:	09 95       	icall
};
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	ff 91       	pop	r31
    1ff6:	ef 91       	pop	r30
    1ff8:	bf 91       	pop	r27
    1ffa:	af 91       	pop	r26
    1ffc:	9f 91       	pop	r25
    1ffe:	8f 91       	pop	r24
    2000:	7f 91       	pop	r23
    2002:	6f 91       	pop	r22
    2004:	5f 91       	pop	r21
    2006:	4f 91       	pop	r20
    2008:	3f 91       	pop	r19
    200a:	2f 91       	pop	r18
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <I2C_vMasterInit>:

/*
        NOTE :  Pass 0 in the slave address if master will not be addressed
 */
void I2C_vMasterInit(u8 A_u8SlaveAddress)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	89 83       	std	Y+1, r24	; 0x01
    /* Set The Clock Rate to 400000*/
    /* Set TWBR to 2 */
    TWBR = 2;
    2022:	e0 e2       	ldi	r30, 0x20	; 32
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	80 83       	st	Z, r24
    /* Clear the 2 bits of TWPS */
    CLR_BIT(TWSR, TWPS0);
    202a:	a1 e2       	ldi	r26, 0x21	; 33
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e1 e2       	ldi	r30, 0x21	; 33
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	8c 93       	st	X, r24
    CLR_BIT(TWSR, TWPS1);
    2038:	a1 e2       	ldi	r26, 0x21	; 33
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e1 e2       	ldi	r30, 0x21	; 33
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8d 7f       	andi	r24, 0xFD	; 253
    2044:	8c 93       	st	X, r24

    /* Initialize The node address */
    /* Check if this master other master will talk to it */
    if (A_u8SlaveAddress != 0)
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	88 23       	and	r24, r24
    204a:	29 f0       	breq	.+10     	; 0x2056 <I2C_vMasterInit+0x40>
    {
        TWAR = A_u8SlaveAddress << 1;
    204c:	e2 e2       	ldi	r30, 0x22	; 34
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	88 0f       	add	r24, r24
    2054:	80 83       	st	Z, r24
    }

    /* Enable I2C*/
    SET_BIT(TWCR, TWEN);
    2056:	a6 e5       	ldi	r26, 0x56	; 86
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e6 e5       	ldi	r30, 0x56	; 86
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	84 60       	ori	r24, 0x04	; 4
    2062:	8c 93       	st	X, r24
}
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <I2C_vSlaveInit>:
void I2C_vSlaveInit(u8 A_u8SlaveAddress)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	0f 92       	push	r0
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	89 83       	std	Y+1, r24	; 0x01
    /* Initialize The node address */
    TWAR = A_u8SlaveAddress << 1;
    2078:	e2 e2       	ldi	r30, 0x22	; 34
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	88 0f       	add	r24, r24
    2080:	80 83       	st	Z, r24
    /* Enable I2C*/
    SET_BIT(TWCR, TWEN);
    2082:	a6 e5       	ldi	r26, 0x56	; 86
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e6 e5       	ldi	r30, 0x56	; 86
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	84 60       	ori	r24, 0x04	; 4
    208e:	8c 93       	st	X, r24
}
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <I2C_SendStartCondition>:
I2C_ErrStatus I2C_SendStartCondition()
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    I2C_ErrStatus L_ErrStatus = NoError;
    20a2:	19 82       	std	Y+1, r1	; 0x01
    /* Send Start Bit */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	84 ea       	ldi	r24, 0xA4	; 164
    20aa:	80 83       	st	Z, r24

    ***********************************************************************
     */

    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    20ac:	e6 e5       	ldi	r30, 0x56	; 86
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	88 23       	and	r24, r24
    20b4:	dc f7       	brge	.-10     	; 0x20ac <I2C_SendStartCondition+0x14>
    {
        /* Wait for TWINT FLag is Set */
    }

    /* Check The Status */
    if ((TWSR & 0xF8) != MT_START_CONDITION_TRANSMITTED)
    20b6:	e1 e2       	ldi	r30, 0x21	; 33
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	88 7f       	andi	r24, 0xF8	; 248
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	88 30       	cpi	r24, 0x08	; 8
    20c6:	91 05       	cpc	r25, r1
    20c8:	11 f0       	breq	.+4      	; 0x20ce <I2C_SendStartCondition+0x36>
    {
        L_ErrStatus = StartConditionErr;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        /* Do Nothing */
    }

    return L_ErrStatus;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <I2C_SendRepeatedStart>:
I2C_ErrStatus I2C_SendRepeatedStart()
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	0f 92       	push	r0
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    I2C_ErrStatus L_ErrStatus = NoError;
    20e2:	19 82       	std	Y+1, r1	; 0x01
    /* Send Start Bit */
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
    20e4:	e6 e5       	ldi	r30, 0x56	; 86
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	84 ea       	ldi	r24, 0xA4	; 164
    20ea:	80 83       	st	Z, r24

    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    20ec:	e6 e5       	ldi	r30, 0x56	; 86
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	88 23       	and	r24, r24
    20f4:	dc f7       	brge	.-10     	; 0x20ec <I2C_SendRepeatedStart+0x14>
    {
        /* Wait for TWINT FLag is Set */
    }

    /* Check The Status */
    if ((TWSR & 0xF8) != MT_REPEATED_START_CONDITION_TRANSMITTED)
    20f6:	e1 e2       	ldi	r30, 0x21	; 33
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	88 7f       	andi	r24, 0xF8	; 248
    2102:	90 70       	andi	r25, 0x00	; 0
    2104:	80 31       	cpi	r24, 0x10	; 16
    2106:	91 05       	cpc	r25, r1
    2108:	11 f0       	breq	.+4      	; 0x210e <I2C_SendRepeatedStart+0x36>
    {
        L_ErrStatus = RepeatedStartErr;
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        /* Do Nothing */
    }

    return L_ErrStatus;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2110:	0f 90       	pop	r0
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <I2C_MasterWriteDataByte>:

I2C_ErrStatus I2C_MasterWriteDataByte(u8 A_u8DataByte)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	00 d0       	rcall	.+0      	; 0x211e <I2C_MasterWriteDataByte+0x6>
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	8a 83       	std	Y+2, r24	; 0x02
    I2C_ErrStatus L_ErrStatus = NoError;
    2124:	19 82       	std	Y+1, r1	; 0x01
    /* Load the Data
     * May be SLA_W
     * Or the Data
     */
    TWDR = A_u8DataByte;
    2126:	e3 e2       	ldi	r30, 0x23	; 35
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	80 83       	st	Z, r24
    /* Clear The Flag by writing 1 and Enable */
    TWCR = (1 << TWINT) | (1 << TWEN);
    212e:	e6 e5       	ldi	r30, 0x56	; 86
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	84 e8       	ldi	r24, 0x84	; 132
    2134:	80 83       	st	Z, r24

    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    2136:	e6 e5       	ldi	r30, 0x56	; 86
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	88 23       	and	r24, r24
    213e:	dc f7       	brge	.-10     	; 0x2136 <I2C_MasterWriteDataByte+0x1e>
    {
        /* Wait for TWINT FLag is Set */
    }

    /* Check The Status */
    if ((TWSR & 0xF8) != MT_DATA_TRANSMITTED_RECEIVED_ACK)
    2140:	e1 e2       	ldi	r30, 0x21	; 33
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	88 7f       	andi	r24, 0xF8	; 248
    214c:	90 70       	andi	r25, 0x00	; 0
    214e:	88 32       	cpi	r24, 0x28	; 40
    2150:	91 05       	cpc	r25, r1
    2152:	11 f0       	breq	.+4      	; 0x2158 <I2C_MasterWriteDataByte+0x40>
    {
        L_ErrStatus = MasterWriteByteErr;
    2154:	85 e0       	ldi	r24, 0x05	; 5
    2156:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* Do Nothing */
    }
    return L_ErrStatus;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <I2C_MasterReadDataByteNACK>:
and will continue if the microcontroller responds every time with ack,
if the microcontroller stops sending ack the eeprom stop access the next byte
*********************************************
 */
I2C_ErrStatus I2C_MasterReadDataByteNACK(u8 *A_u8DataByte)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	00 d0       	rcall	.+0      	; 0x216a <I2C_MasterReadDataByteNACK+0x6>
    216a:	0f 92       	push	r0
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	9b 83       	std	Y+3, r25	; 0x03
    2172:	8a 83       	std	Y+2, r24	; 0x02
    I2C_ErrStatus L_ErrStatus = NoError;
    2174:	19 82       	std	Y+1, r1	; 0x01
    /* Don't Enable the Ack */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2176:	e6 e5       	ldi	r30, 0x56	; 86
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	84 e8       	ldi	r24, 0x84	; 132
    217c:	80 83       	st	Z, r24
    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    217e:	e6 e5       	ldi	r30, 0x56	; 86
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	88 23       	and	r24, r24
    2186:	dc f7       	brge	.-10     	; 0x217e <I2C_MasterReadDataByteNACK+0x1a>
    {
        // Wait for TWINT FLag is Set
    }
    /* Check The Status */
    if ((TWSR & 0xF8) != MR_DATA_BYTE_RECEIVED_NACK)
    2188:	e1 e2       	ldi	r30, 0x21	; 33
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	88 2f       	mov	r24, r24
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	88 7f       	andi	r24, 0xF8	; 248
    2194:	90 70       	andi	r25, 0x00	; 0
    2196:	88 35       	cpi	r24, 0x58	; 88
    2198:	91 05       	cpc	r25, r1
    219a:	19 f0       	breq	.+6      	; 0x21a2 <I2C_MasterReadDataByteNACK+0x3e>
    {
        L_ErrStatus = MasterReadByteErr;
    219c:	86 e0       	ldi	r24, 0x06	; 6
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <I2C_MasterReadDataByteNACK+0x4a>
    }
    else
    {
        /* Save The received data in the pointer received as parameter */
        *A_u8DataByte = TWDR;
    21a2:	e3 e2       	ldi	r30, 0x23	; 35
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	ea 81       	ldd	r30, Y+2	; 0x02
    21aa:	fb 81       	ldd	r31, Y+3	; 0x03
    21ac:	80 83       	st	Z, r24
    }

    return L_ErrStatus;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <I2C_MasterReadDataByteACK>:
I2C_ErrStatus I2C_MasterReadDataByteACK(u8 *A_u8DataByte)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <I2C_MasterReadDataByteACK+0x6>
    21c2:	0f 92       	push	r0
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	9b 83       	std	Y+3, r25	; 0x03
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    I2C_ErrStatus L_ErrStatus = NoError;
    21cc:	19 82       	std	Y+1, r1	; 0x01

    /* Enable Master Generating Ack bit after receiving the data*/
    TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    21ce:	e6 e5       	ldi	r30, 0x56	; 86
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	84 ec       	ldi	r24, 0xC4	; 196
    21d4:	80 83       	st	Z, r24
    // SET_BIT(TWCR, TWEA);
    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    21d6:	e6 e5       	ldi	r30, 0x56	; 86
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	88 23       	and	r24, r24
    21de:	dc f7       	brge	.-10     	; 0x21d6 <I2C_MasterReadDataByteACK+0x1a>
    {
        // Wait for TWINT FLag is Set
    }
    /* Check The Status */
    if ((TWSR & 0xF8) != MR_DATA_BYTE_RECEIVED_ACK)
    21e0:	e1 e2       	ldi	r30, 0x21	; 33
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	88 7f       	andi	r24, 0xF8	; 248
    21ec:	90 70       	andi	r25, 0x00	; 0
    21ee:	80 35       	cpi	r24, 0x50	; 80
    21f0:	91 05       	cpc	r25, r1
    21f2:	19 f0       	breq	.+6      	; 0x21fa <I2C_MasterReadDataByteACK+0x3e>
    {
        L_ErrStatus = MasterReadByteErr;
    21f4:	86 e0       	ldi	r24, 0x06	; 6
    21f6:	89 83       	std	Y+1, r24	; 0x01
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <I2C_MasterReadDataByteACK+0x4a>
    }
    else
    {
        /* Save The received data in the pointer received as parameter */
        *A_u8DataByte = TWDR;
    21fa:	e3 e2       	ldi	r30, 0x23	; 35
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	ea 81       	ldd	r30, Y+2	; 0x02
    2202:	fb 81       	ldd	r31, Y+3	; 0x03
    2204:	80 83       	st	Z, r24
    }
    /*************************************/
    /* Clear The ACk*/
    /*************************************/
    /* clear the flag */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2206:	e6 e5       	ldi	r30, 0x56	; 86
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	84 e8       	ldi	r24, 0x84	; 132
    220c:	80 83       	st	Z, r24
    /* Wait for flag */
     while (READ_BIT(TWCR, TWINT) == 0)
    220e:	e6 e5       	ldi	r30, 0x56	; 86
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	88 23       	and	r24, r24
    2216:	dc f7       	brge	.-10     	; 0x220e <I2C_MasterReadDataByteACK+0x52>
     {
         // Wait for TWINT FLag is Set
     }

    return L_ErrStatus;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
}
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <I2C_SendSlaveAddressWithWrite>:
I2C_ErrStatus I2C_SendSlaveAddressWithWrite(u8 A_u8SlaveAddress)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <I2C_SendSlaveAddressWithWrite+0x6>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	8a 83       	std	Y+2, r24	; 0x02
    I2C_ErrStatus L_ErrStatus = NoError;
    2232:	19 82       	std	Y+1, r1	; 0x01
    /* Set The Slave Address in the 7 MSB in the data Register */
    TWDR = A_u8SlaveAddress << 1;
    2234:	e3 e2       	ldi	r30, 0x23	; 35
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	88 0f       	add	r24, r24
    223c:	80 83       	st	Z, r24
    /* Clear Bit 0 for Write */
    CLR_BIT(TWDR, 0);
    223e:	a3 e2       	ldi	r26, 0x23	; 35
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e3 e2       	ldi	r30, 0x23	; 35
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8e 7f       	andi	r24, 0xFE	; 254
    224a:	8c 93       	st	X, r24

    /* Clear The Flag By Writing 1*/
    TWCR = (1 << TWINT) | (1 << TWEN);
    224c:	e6 e5       	ldi	r30, 0x56	; 86
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	84 e8       	ldi	r24, 0x84	; 132
    2252:	80 83       	st	Z, r24
    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    2254:	e6 e5       	ldi	r30, 0x56	; 86
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	88 23       	and	r24, r24
    225c:	dc f7       	brge	.-10     	; 0x2254 <I2C_SendSlaveAddressWithWrite+0x2e>
    {
        /* Wait for TWINT FLag is Set */
    }

    /* Check The Status */
    if ((TWSR & 0xF8) != MT_SLA_W_TRANSMITTED_RECEIVED_ACK)
    225e:	e1 e2       	ldi	r30, 0x21	; 33
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 7f       	andi	r24, 0xF8	; 248
    226a:	90 70       	andi	r25, 0x00	; 0
    226c:	88 31       	cpi	r24, 0x18	; 24
    226e:	91 05       	cpc	r25, r1
    2270:	11 f0       	breq	.+4      	; 0x2276 <I2C_SendSlaveAddressWithWrite+0x50>
    {
        L_ErrStatus = SlaveAddressWithWriteErr;
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* Do Nothing */
    }
    return L_ErrStatus;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <I2C_SendSlaveAddressWithRead>:
I2C_ErrStatus I2C_SendSlaveAddressWithRead(u8 A_u8SlaveAddress)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <I2C_SendSlaveAddressWithRead+0x6>
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	8a 83       	std	Y+2, r24	; 0x02
    I2C_ErrStatus L_ErrStatus = NoError;
    228e:	19 82       	std	Y+1, r1	; 0x01
    /* Clear The Start Condition Bit */
    // CLR_BIT(TWCR, TWSTA);

    /* Set The Slave Address in hte 7 MSB in the data Register */
    TWDR = A_u8SlaveAddress << 1;
    2290:	e3 e2       	ldi	r30, 0x23	; 35
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	88 0f       	add	r24, r24
    2298:	80 83       	st	Z, r24

    /* Set Bit 0 for Read */
    SET_BIT(TWDR, 0);
    229a:	a3 e2       	ldi	r26, 0x23	; 35
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e2       	ldi	r30, 0x23	; 35
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	8c 93       	st	X, r24

    /* Clear The Flag By Writing 1*/
    TWCR = (1 << TWINT) | (1 << TWEN);
    22a8:	e6 e5       	ldi	r30, 0x56	; 86
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	84 e8       	ldi	r24, 0x84	; 132
    22ae:	80 83       	st	Z, r24

    /* Wait for flag */
    while (READ_BIT(TWCR, TWINT) == 0)
    22b0:	e6 e5       	ldi	r30, 0x56	; 86
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	88 23       	and	r24, r24
    22b8:	dc f7       	brge	.-10     	; 0x22b0 <I2C_SendSlaveAddressWithRead+0x2e>
    {
        /* Wait for TWINT FLag is Set */
    }

    /* Check The Status */
    if ((TWSR & 0xF8) != MR_SLA_R_TRANSMITTED_ACK)
    22ba:	e1 e2       	ldi	r30, 0x21	; 33
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	88 7f       	andi	r24, 0xF8	; 248
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	80 34       	cpi	r24, 0x40	; 64
    22ca:	91 05       	cpc	r25, r1
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <I2C_SendSlaveAddressWithRead+0x50>
    {
        L_ErrStatus = SlaveAddressWithReadErr;
    22ce:	84 e0       	ldi	r24, 0x04	; 4
    22d0:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        /* Do Nothing */
    }

    return L_ErrStatus;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <I2C_SendStopCondition>:
void I2C_SendStopCondition()
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    /* Send Stop Bit */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    22e6:	e6 e5       	ldi	r30, 0x56	; 86
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	84 e9       	ldi	r24, 0x94	; 148
    22ec:	80 83       	st	Z, r24
}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <GIE_vSetGlobalInterrupt>:
#include "../../LIB/bit_map.h"

#include "GIE_reg.h"
#include "GIE_int.h"

void GIE_vSetGlobalInterrupt(){
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    22fc:	af e5       	ldi	r26, 0x5F	; 95
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	ef e5       	ldi	r30, 0x5F	; 95
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	80 68       	ori	r24, 0x80	; 128
    2308:	8c 93       	st	X, r24
}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <GIE_vDisableGlobalInterrupt>:
void GIE_vDisableGlobalInterrupt(){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    2318:	af e5       	ldi	r26, 0x5F	; 95
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	ef e5       	ldi	r30, 0x5F	; 95
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8f 77       	andi	r24, 0x7F	; 127
    2324:	8c 93       	st	X, r24
}
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <EXI_vINT0_Init>:

static void (*G_vISRptr0)(void);
static void (*G_vISRptr1)(void);
static void (*G_vISRptr2)(void);
void EXI_vINT0_Init(void)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT0 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT0_PORT, INT0_PIN, DIR_INPUT);
    2334:	83 e0       	ldi	r24, 0x03	; 3
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinVal(INT0_PORT, INT0_PIN, HIGH);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	62 e0       	ldi	r22, 0x02	; 2
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    /*Enable INT0*/
    SET_BIT(GICR, INT0);
    2348:	ab e5       	ldi	r26, 0x5B	; 91
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	eb e5       	ldi	r30, 0x5B	; 91
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	80 64       	ori	r24, 0x40	; 64
    2354:	8c 93       	st	X, r24
    /*configure INT0 Mode as The Mode Configured in CFG File*/
    MCUCR = (MCUCR & 0xFC) | (INT0_MODE << ISC00);
    2356:	a5 e5       	ldi	r26, 0x55	; 85
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e5       	ldi	r30, 0x55	; 85
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8c 7f       	andi	r24, 0xFC	; 252
    2362:	82 60       	ori	r24, 0x02	; 2
    2364:	8c 93       	st	X, r24
}
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <EXI_vINT1_Init>:
void EXI_vINT1_Init(void)
{
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT1 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT1_PORT, INT1_PIN, DIR_INPUT);
    2374:	83 e0       	ldi	r24, 0x03	; 3
    2376:	63 e0       	ldi	r22, 0x03	; 3
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinVal(INT1_PORT, INT1_PIN, HIGH);
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	63 e0       	ldi	r22, 0x03	; 3
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    /*Enable INT1*/
    SET_BIT(GICR, INT1);
    2388:	ab e5       	ldi	r26, 0x5B	; 91
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e5       	ldi	r30, 0x5B	; 91
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	80 68       	ori	r24, 0x80	; 128
    2394:	8c 93       	st	X, r24
    /*configure INT1 Mode as The Mode Configured in CFG File*/
    MCUCR = (MCUCR & 0xF3) | (INT1_MODE << ISC10);
    2396:	a5 e5       	ldi	r26, 0x55	; 85
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e5 e5       	ldi	r30, 0x55	; 85
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	83 7f       	andi	r24, 0xF3	; 243
    23a2:	88 60       	ori	r24, 0x08	; 8
    23a4:	8c 93       	st	X, r24
}
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <EXI_vINT2_Init>:
void EXI_vINT2_Init(void)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT2 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT2_PORT, INT2_PIN, DIR_INPUT);
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	62 e0       	ldi	r22, 0x02	; 2
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinVal(INT2_PORT, INT2_PIN, HIGH);
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	62 e0       	ldi	r22, 0x02	; 2
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    /*Enable INT2*/
    SET_BIT(GICR, INT2);
    23c8:	ab e5       	ldi	r26, 0x5B	; 91
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	eb e5       	ldi	r30, 0x5B	; 91
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 62       	ori	r24, 0x20	; 32
    23d4:	8c 93       	st	X, r24
    /*configure INT2 Mode as The Mode Configured in CFG File*/
    MCUCSR = (MCUCSR & 0xBF) | (INT2_MODE << ISC2);
    23d6:	a4 e5       	ldi	r26, 0x54	; 84
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e4 e5       	ldi	r30, 0x54	; 84
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8f 7b       	andi	r24, 0xBF	; 191
    23e2:	8c 93       	st	X, r24
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <EXI_vRegFunc>:
void EXI_vRegFunc(void (*ISR_PTR)(void), u8 A_u8INT)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <EXI_vRegFunc+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <EXI_vRegFunc+0x8>
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	6b 83       	std	Y+3, r22	; 0x03
    switch (A_u8INT)
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3d 83       	std	Y+5, r19	; 0x05
    2406:	2c 83       	std	Y+4, r18	; 0x04
    2408:	8c 81       	ldd	r24, Y+4	; 0x04
    240a:	9d 81       	ldd	r25, Y+5	; 0x05
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	81 f0       	breq	.+32     	; 0x2432 <EXI_vRegFunc+0x48>
    2412:	2c 81       	ldd	r18, Y+4	; 0x04
    2414:	3d 81       	ldd	r19, Y+5	; 0x05
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	91 f0       	breq	.+36     	; 0x2440 <EXI_vRegFunc+0x56>
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	9d 81       	ldd	r25, Y+5	; 0x05
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	a1 f4       	brne	.+40     	; 0x244c <EXI_vRegFunc+0x62>
    {
    case INT0_FUNC:
        G_vISRptr0 = ISR_PTR;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	90 93 10 02 	sts	0x0210, r25
    242c:	80 93 0f 02 	sts	0x020F, r24
    2430:	0d c0       	rjmp	.+26     	; 0x244c <EXI_vRegFunc+0x62>
        break;
    case INT1_FUNC:
        G_vISRptr1 = ISR_PTR;
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	90 93 12 02 	sts	0x0212, r25
    243a:	80 93 11 02 	sts	0x0211, r24
    243e:	06 c0       	rjmp	.+12     	; 0x244c <EXI_vRegFunc+0x62>
        break;
    case INT2_FUNC:
        G_vISRptr2 = ISR_PTR;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	90 93 14 02 	sts	0x0214, r25
    2448:	80 93 13 02 	sts	0x0213, r24
        break;
    default:
        break;
    }
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <__vector_1>:
void __vector_1(void)
{
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	0f 92       	push	r0
    2464:	11 24       	eor	r1, r1
    2466:	2f 93       	push	r18
    2468:	3f 93       	push	r19
    246a:	4f 93       	push	r20
    246c:	5f 93       	push	r21
    246e:	6f 93       	push	r22
    2470:	7f 93       	push	r23
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	af 93       	push	r26
    2478:	bf 93       	push	r27
    247a:	ef 93       	push	r30
    247c:	ff 93       	push	r31
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr0();
    2486:	e0 91 0f 02 	lds	r30, 0x020F
    248a:	f0 91 10 02 	lds	r31, 0x0210
    248e:	09 95       	icall
}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	ff 91       	pop	r31
    2496:	ef 91       	pop	r30
    2498:	bf 91       	pop	r27
    249a:	af 91       	pop	r26
    249c:	9f 91       	pop	r25
    249e:	8f 91       	pop	r24
    24a0:	7f 91       	pop	r23
    24a2:	6f 91       	pop	r22
    24a4:	5f 91       	pop	r21
    24a6:	4f 91       	pop	r20
    24a8:	3f 91       	pop	r19
    24aa:	2f 91       	pop	r18
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	0f 90       	pop	r0
    24b2:	1f 90       	pop	r1
    24b4:	18 95       	reti

000024b6 <__vector_2>:
void __vector_2(void)
{
    24b6:	1f 92       	push	r1
    24b8:	0f 92       	push	r0
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	0f 92       	push	r0
    24be:	11 24       	eor	r1, r1
    24c0:	2f 93       	push	r18
    24c2:	3f 93       	push	r19
    24c4:	4f 93       	push	r20
    24c6:	5f 93       	push	r21
    24c8:	6f 93       	push	r22
    24ca:	7f 93       	push	r23
    24cc:	8f 93       	push	r24
    24ce:	9f 93       	push	r25
    24d0:	af 93       	push	r26
    24d2:	bf 93       	push	r27
    24d4:	ef 93       	push	r30
    24d6:	ff 93       	push	r31
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr1();
    24e0:	e0 91 11 02 	lds	r30, 0x0211
    24e4:	f0 91 12 02 	lds	r31, 0x0212
    24e8:	09 95       	icall
}
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	7f 91       	pop	r23
    24fc:	6f 91       	pop	r22
    24fe:	5f 91       	pop	r21
    2500:	4f 91       	pop	r20
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0
    250c:	1f 90       	pop	r1
    250e:	18 95       	reti

00002510 <__vector_3>:
void __vector_3(void)
{
    2510:	1f 92       	push	r1
    2512:	0f 92       	push	r0
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	0f 92       	push	r0
    2518:	11 24       	eor	r1, r1
    251a:	2f 93       	push	r18
    251c:	3f 93       	push	r19
    251e:	4f 93       	push	r20
    2520:	5f 93       	push	r21
    2522:	6f 93       	push	r22
    2524:	7f 93       	push	r23
    2526:	8f 93       	push	r24
    2528:	9f 93       	push	r25
    252a:	af 93       	push	r26
    252c:	bf 93       	push	r27
    252e:	ef 93       	push	r30
    2530:	ff 93       	push	r31
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr2();
    253a:	e0 91 13 02 	lds	r30, 0x0213
    253e:	f0 91 14 02 	lds	r31, 0x0214
    2542:	09 95       	icall
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	ff 91       	pop	r31
    254a:	ef 91       	pop	r30
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	0f 90       	pop	r0
    2566:	1f 90       	pop	r1
    2568:	18 95       	reti

0000256a <DIO_vSetPinDir>:

#include "DIO_reg.h"
#include "DIO_int.h"

void DIO_vSetPinDir(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Dir)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <DIO_vSetPinDir+0x6>
    2570:	00 d0       	rcall	.+0      	; 0x2572 <DIO_vSetPinDir+0x8>
    2572:	0f 92       	push	r0
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	6a 83       	std	Y+2, r22	; 0x02
    257c:	4b 83       	std	Y+3, r20	; 0x03

	switch (A_u8PortId)
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3d 83       	std	Y+5, r19	; 0x05
    2586:	2c 83       	std	Y+4, r18	; 0x04
    2588:	6c 81       	ldd	r22, Y+4	; 0x04
    258a:	7d 81       	ldd	r23, Y+5	; 0x05
    258c:	61 30       	cpi	r22, 0x01	; 1
    258e:	71 05       	cpc	r23, r1
    2590:	d1 f1       	breq	.+116    	; 0x2606 <DIO_vSetPinDir+0x9c>
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	9d 81       	ldd	r25, Y+5	; 0x05
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	91 05       	cpc	r25, r1
    259a:	34 f4       	brge	.+12     	; 0x25a8 <DIO_vSetPinDir+0x3e>
    259c:	2c 81       	ldd	r18, Y+4	; 0x04
    259e:	3d 81       	ldd	r19, Y+5	; 0x05
    25a0:	21 15       	cp	r18, r1
    25a2:	31 05       	cpc	r19, r1
    25a4:	71 f0       	breq	.+28     	; 0x25c2 <DIO_vSetPinDir+0x58>
    25a6:	94 c0       	rjmp	.+296    	; 0x26d0 <DIO_vSetPinDir+0x166>
    25a8:	6c 81       	ldd	r22, Y+4	; 0x04
    25aa:	7d 81       	ldd	r23, Y+5	; 0x05
    25ac:	62 30       	cpi	r22, 0x02	; 2
    25ae:	71 05       	cpc	r23, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <DIO_vSetPinDir+0x4a>
    25b2:	4b c0       	rjmp	.+150    	; 0x264a <DIO_vSetPinDir+0xe0>
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	9d 81       	ldd	r25, Y+5	; 0x05
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <DIO_vSetPinDir+0x56>
    25be:	67 c0       	rjmp	.+206    	; 0x268e <DIO_vSetPinDir+0x124>
    25c0:	87 c0       	rjmp	.+270    	; 0x26d0 <DIO_vSetPinDir+0x166>
	{
	case PORTA_ID:
		WRT_BIT(DDRA, A_u8PinId, A_u8Dir);
    25c2:	aa e3       	ldi	r26, 0x3A	; 58
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ea e3       	ldi	r30, 0x3A	; 58
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <DIO_vSetPinDir+0x74>
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	2a 95       	dec	r18
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <DIO_vSetPinDir+0x70>
    25e2:	80 95       	com	r24
    25e4:	48 23       	and	r20, r24
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	b9 01       	movw	r22, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_vSetPinDir+0x90>
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	8a 95       	dec	r24
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_vSetPinDir+0x8c>
    25fe:	cb 01       	movw	r24, r22
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	65 c0       	rjmp	.+202    	; 0x26d0 <DIO_vSetPinDir+0x166>
		break;
	case PORTB_ID:
		WRT_BIT(DDRB, A_u8PinId, A_u8Dir);
    2606:	a7 e3       	ldi	r26, 0x37	; 55
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e7 e3       	ldi	r30, 0x37	; 55
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_vSetPinDir+0xb8>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	2a 95       	dec	r18
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_vSetPinDir+0xb4>
    2626:	80 95       	com	r24
    2628:	48 23       	and	r20, r24
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	b9 01       	movw	r22, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <DIO_vSetPinDir+0xd4>
    263a:	66 0f       	add	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	8a 95       	dec	r24
    2640:	e2 f7       	brpl	.-8      	; 0x263a <DIO_vSetPinDir+0xd0>
    2642:	cb 01       	movw	r24, r22
    2644:	84 2b       	or	r24, r20
    2646:	8c 93       	st	X, r24
    2648:	43 c0       	rjmp	.+134    	; 0x26d0 <DIO_vSetPinDir+0x166>
		break;
	case PORTC_ID:
		WRT_BIT(DDRC, A_u8PinId, A_u8Dir);
    264a:	a4 e3       	ldi	r26, 0x34	; 52
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e4 e3       	ldi	r30, 0x34	; 52
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	48 2f       	mov	r20, r24
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <DIO_vSetPinDir+0xfc>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	2a 95       	dec	r18
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <DIO_vSetPinDir+0xf8>
    266a:	80 95       	com	r24
    266c:	48 23       	and	r20, r24
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	b9 01       	movw	r22, r18
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <DIO_vSetPinDir+0x118>
    267e:	66 0f       	add	r22, r22
    2680:	77 1f       	adc	r23, r23
    2682:	8a 95       	dec	r24
    2684:	e2 f7       	brpl	.-8      	; 0x267e <DIO_vSetPinDir+0x114>
    2686:	cb 01       	movw	r24, r22
    2688:	84 2b       	or	r24, r20
    268a:	8c 93       	st	X, r24
    268c:	21 c0       	rjmp	.+66     	; 0x26d0 <DIO_vSetPinDir+0x166>
		break;
	case PORTD_ID:
		WRT_BIT(DDRD, A_u8PinId, A_u8Dir);
    268e:	a1 e3       	ldi	r26, 0x31	; 49
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e1 e3       	ldi	r30, 0x31	; 49
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	48 2f       	mov	r20, r24
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <DIO_vSetPinDir+0x140>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	2a 95       	dec	r18
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <DIO_vSetPinDir+0x13c>
    26ae:	80 95       	com	r24
    26b0:	48 23       	and	r20, r24
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	b9 01       	movw	r22, r18
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <DIO_vSetPinDir+0x15c>
    26c2:	66 0f       	add	r22, r22
    26c4:	77 1f       	adc	r23, r23
    26c6:	8a 95       	dec	r24
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <DIO_vSetPinDir+0x158>
    26ca:	cb 01       	movw	r24, r22
    26cc:	84 2b       	or	r24, r20
    26ce:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <DIO_vSetPinVal>:

void DIO_vSetPinVal(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Val)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <DIO_vSetPinVal+0x6>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <DIO_vSetPinVal+0x8>
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	6a 83       	std	Y+2, r22	; 0x02
    26f2:	4b 83       	std	Y+3, r20	; 0x03

	switch (A_u8PortId)
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	3d 83       	std	Y+5, r19	; 0x05
    26fc:	2c 83       	std	Y+4, r18	; 0x04
    26fe:	6c 81       	ldd	r22, Y+4	; 0x04
    2700:	7d 81       	ldd	r23, Y+5	; 0x05
    2702:	61 30       	cpi	r22, 0x01	; 1
    2704:	71 05       	cpc	r23, r1
    2706:	d1 f1       	breq	.+116    	; 0x277c <DIO_vSetPinVal+0x9c>
    2708:	8c 81       	ldd	r24, Y+4	; 0x04
    270a:	9d 81       	ldd	r25, Y+5	; 0x05
    270c:	82 30       	cpi	r24, 0x02	; 2
    270e:	91 05       	cpc	r25, r1
    2710:	34 f4       	brge	.+12     	; 0x271e <DIO_vSetPinVal+0x3e>
    2712:	2c 81       	ldd	r18, Y+4	; 0x04
    2714:	3d 81       	ldd	r19, Y+5	; 0x05
    2716:	21 15       	cp	r18, r1
    2718:	31 05       	cpc	r19, r1
    271a:	71 f0       	breq	.+28     	; 0x2738 <DIO_vSetPinVal+0x58>
    271c:	94 c0       	rjmp	.+296    	; 0x2846 <DIO_vSetPinVal+0x166>
    271e:	6c 81       	ldd	r22, Y+4	; 0x04
    2720:	7d 81       	ldd	r23, Y+5	; 0x05
    2722:	62 30       	cpi	r22, 0x02	; 2
    2724:	71 05       	cpc	r23, r1
    2726:	09 f4       	brne	.+2      	; 0x272a <DIO_vSetPinVal+0x4a>
    2728:	4b c0       	rjmp	.+150    	; 0x27c0 <DIO_vSetPinVal+0xe0>
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	83 30       	cpi	r24, 0x03	; 3
    2730:	91 05       	cpc	r25, r1
    2732:	09 f4       	brne	.+2      	; 0x2736 <DIO_vSetPinVal+0x56>
    2734:	67 c0       	rjmp	.+206    	; 0x2804 <DIO_vSetPinVal+0x124>
    2736:	87 c0       	rjmp	.+270    	; 0x2846 <DIO_vSetPinVal+0x166>
	{
	case PORTA_ID:
		WRT_BIT(PORTA, A_u8PinId, A_u8Val);
    2738:	ab e3       	ldi	r26, 0x3B	; 59
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	eb e3       	ldi	r30, 0x3B	; 59
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	48 2f       	mov	r20, r24
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <DIO_vSetPinVal+0x74>
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	2a 95       	dec	r18
    2756:	e2 f7       	brpl	.-8      	; 0x2750 <DIO_vSetPinVal+0x70>
    2758:	80 95       	com	r24
    275a:	48 23       	and	r20, r24
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	88 2f       	mov	r24, r24
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b9 01       	movw	r22, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <DIO_vSetPinVal+0x90>
    276c:	66 0f       	add	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	8a 95       	dec	r24
    2772:	e2 f7       	brpl	.-8      	; 0x276c <DIO_vSetPinVal+0x8c>
    2774:	cb 01       	movw	r24, r22
    2776:	84 2b       	or	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	65 c0       	rjmp	.+202    	; 0x2846 <DIO_vSetPinVal+0x166>
		break;
	case PORTB_ID:
		WRT_BIT(PORTB, A_u8PinId, A_u8Val);
    277c:	a8 e3       	ldi	r26, 0x38	; 56
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e8 e3       	ldi	r30, 0x38	; 56
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	48 2f       	mov	r20, r24
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <DIO_vSetPinVal+0xb8>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	2a 95       	dec	r18
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <DIO_vSetPinVal+0xb4>
    279c:	80 95       	com	r24
    279e:	48 23       	and	r20, r24
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	b9 01       	movw	r22, r18
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <DIO_vSetPinVal+0xd4>
    27b0:	66 0f       	add	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	8a 95       	dec	r24
    27b6:	e2 f7       	brpl	.-8      	; 0x27b0 <DIO_vSetPinVal+0xd0>
    27b8:	cb 01       	movw	r24, r22
    27ba:	84 2b       	or	r24, r20
    27bc:	8c 93       	st	X, r24
    27be:	43 c0       	rjmp	.+134    	; 0x2846 <DIO_vSetPinVal+0x166>
		break;
	case PORTC_ID:
		WRT_BIT(PORTC, A_u8PinId, A_u8Val);
    27c0:	a5 e3       	ldi	r26, 0x35	; 53
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e5 e3       	ldi	r30, 0x35	; 53
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	48 2f       	mov	r20, r24
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <DIO_vSetPinVal+0xfc>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	2a 95       	dec	r18
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <DIO_vSetPinVal+0xf8>
    27e0:	80 95       	com	r24
    27e2:	48 23       	and	r20, r24
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <DIO_vSetPinVal+0x118>
    27f4:	66 0f       	add	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	8a 95       	dec	r24
    27fa:	e2 f7       	brpl	.-8      	; 0x27f4 <DIO_vSetPinVal+0x114>
    27fc:	cb 01       	movw	r24, r22
    27fe:	84 2b       	or	r24, r20
    2800:	8c 93       	st	X, r24
    2802:	21 c0       	rjmp	.+66     	; 0x2846 <DIO_vSetPinVal+0x166>
		break;
	case PORTD_ID:
		WRT_BIT(PORTD, A_u8PinId, A_u8Val);
    2804:	a2 e3       	ldi	r26, 0x32	; 50
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e2 e3       	ldi	r30, 0x32	; 50
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	48 2f       	mov	r20, r24
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	28 2f       	mov	r18, r24
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <DIO_vSetPinVal+0x140>
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	2a 95       	dec	r18
    2822:	e2 f7       	brpl	.-8      	; 0x281c <DIO_vSetPinVal+0x13c>
    2824:	80 95       	com	r24
    2826:	48 23       	and	r20, r24
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	b9 01       	movw	r22, r18
    2836:	02 c0       	rjmp	.+4      	; 0x283c <DIO_vSetPinVal+0x15c>
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	8a 95       	dec	r24
    283e:	e2 f7       	brpl	.-8      	; 0x2838 <DIO_vSetPinVal+0x158>
    2840:	cb 01       	movw	r24, r22
    2842:	84 2b       	or	r24, r20
    2844:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <DIO_vTogPinVal>:
void DIO_vTogPinVal(u8 A_u8PortId, u8 A_u8PinId)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <DIO_vTogPinVal+0x6>
    285c:	00 d0       	rcall	.+0      	; 0x285e <DIO_vTogPinVal+0x8>
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	6a 83       	std	Y+2, r22	; 0x02

	switch (A_u8PortId)
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	3c 83       	std	Y+4, r19	; 0x04
    286e:	2b 83       	std	Y+3, r18	; 0x03
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	91 05       	cpc	r25, r1
    2878:	49 f1       	breq	.+82     	; 0x28cc <DIO_vTogPinVal+0x76>
    287a:	2b 81       	ldd	r18, Y+3	; 0x03
    287c:	3c 81       	ldd	r19, Y+4	; 0x04
    287e:	22 30       	cpi	r18, 0x02	; 2
    2880:	31 05       	cpc	r19, r1
    2882:	2c f4       	brge	.+10     	; 0x288e <DIO_vTogPinVal+0x38>
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	61 f0       	breq	.+24     	; 0x28a4 <DIO_vTogPinVal+0x4e>
    288c:	5a c0       	rjmp	.+180    	; 0x2942 <DIO_vTogPinVal+0xec>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	71 f1       	breq	.+92     	; 0x28f4 <DIO_vTogPinVal+0x9e>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	83 30       	cpi	r24, 0x03	; 3
    289e:	91 05       	cpc	r25, r1
    28a0:	e9 f1       	breq	.+122    	; 0x291c <DIO_vTogPinVal+0xc6>
    28a2:	4f c0       	rjmp	.+158    	; 0x2942 <DIO_vTogPinVal+0xec>
	{
	case PORTA_ID:
		TOG_BIT(PORTA, A_u8PinId);
    28a4:	ab e3       	ldi	r26, 0x3B	; 59
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	eb e3       	ldi	r30, 0x3B	; 59
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	48 2f       	mov	r20, r24
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	02 2e       	mov	r0, r18
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <DIO_vTogPinVal+0x6c>
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	0a 94       	dec	r0
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <DIO_vTogPinVal+0x68>
    28c6:	84 27       	eor	r24, r20
    28c8:	8c 93       	st	X, r24
    28ca:	3b c0       	rjmp	.+118    	; 0x2942 <DIO_vTogPinVal+0xec>
		break;
	case PORTB_ID:
		TOG_BIT(PORTB, A_u8PinId);
    28cc:	a8 e3       	ldi	r26, 0x38	; 56
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e8 e3       	ldi	r30, 0x38	; 56
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	48 2f       	mov	r20, r24
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	02 2e       	mov	r0, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <DIO_vTogPinVal+0x94>
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	0a 94       	dec	r0
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <DIO_vTogPinVal+0x90>
    28ee:	84 27       	eor	r24, r20
    28f0:	8c 93       	st	X, r24
    28f2:	27 c0       	rjmp	.+78     	; 0x2942 <DIO_vTogPinVal+0xec>
		break;
	case PORTC_ID:
		TOG_BIT(PORTC, A_u8PinId);
    28f4:	a5 e3       	ldi	r26, 0x35	; 53
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e5 e3       	ldi	r30, 0x35	; 53
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	48 2f       	mov	r20, r24
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	02 2e       	mov	r0, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <DIO_vTogPinVal+0xbc>
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	0a 94       	dec	r0
    2914:	e2 f7       	brpl	.-8      	; 0x290e <DIO_vTogPinVal+0xb8>
    2916:	84 27       	eor	r24, r20
    2918:	8c 93       	st	X, r24
    291a:	13 c0       	rjmp	.+38     	; 0x2942 <DIO_vTogPinVal+0xec>
		break;
	case PORTD_ID:
		TOG_BIT(PORTD, A_u8PinId);
    291c:	a2 e3       	ldi	r26, 0x32	; 50
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e2 e3       	ldi	r30, 0x32	; 50
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	48 2f       	mov	r20, r24
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	02 2e       	mov	r0, r18
    2934:	02 c0       	rjmp	.+4      	; 0x293a <DIO_vTogPinVal+0xe4>
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	0a 94       	dec	r0
    293c:	e2 f7       	brpl	.-8      	; 0x2936 <DIO_vTogPinVal+0xe0>
    293e:	84 27       	eor	r24, r20
    2940:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret

00002950 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 A_u8PortId, u8 A_u8PinId)
{
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	00 d0       	rcall	.+0      	; 0x2956 <DIO_u8GetPinVal+0x6>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <DIO_u8GetPinVal+0x8>
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_PinVal;
	switch (A_u8PortId)
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	3d 83       	std	Y+5, r19	; 0x05
    296a:	2c 83       	std	Y+4, r18	; 0x04
    296c:	4c 81       	ldd	r20, Y+4	; 0x04
    296e:	5d 81       	ldd	r21, Y+5	; 0x05
    2970:	41 30       	cpi	r20, 0x01	; 1
    2972:	51 05       	cpc	r21, r1
    2974:	41 f1       	breq	.+80     	; 0x29c6 <DIO_u8GetPinVal+0x76>
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	9d 81       	ldd	r25, Y+5	; 0x05
    297a:	82 30       	cpi	r24, 0x02	; 2
    297c:	91 05       	cpc	r25, r1
    297e:	34 f4       	brge	.+12     	; 0x298c <DIO_u8GetPinVal+0x3c>
    2980:	2c 81       	ldd	r18, Y+4	; 0x04
    2982:	3d 81       	ldd	r19, Y+5	; 0x05
    2984:	21 15       	cp	r18, r1
    2986:	31 05       	cpc	r19, r1
    2988:	61 f0       	breq	.+24     	; 0x29a2 <DIO_u8GetPinVal+0x52>
    298a:	52 c0       	rjmp	.+164    	; 0x2a30 <DIO_u8GetPinVal+0xe0>
    298c:	4c 81       	ldd	r20, Y+4	; 0x04
    298e:	5d 81       	ldd	r21, Y+5	; 0x05
    2990:	42 30       	cpi	r20, 0x02	; 2
    2992:	51 05       	cpc	r21, r1
    2994:	51 f1       	breq	.+84     	; 0x29ea <DIO_u8GetPinVal+0x9a>
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	83 30       	cpi	r24, 0x03	; 3
    299c:	91 05       	cpc	r25, r1
    299e:	b9 f1       	breq	.+110    	; 0x2a0e <DIO_u8GetPinVal+0xbe>
    29a0:	47 c0       	rjmp	.+142    	; 0x2a30 <DIO_u8GetPinVal+0xe0>
	{
	case PORTA_ID:
		L_PinVal = READ_BIT(PINA, A_u8PinId);
    29a2:	ea e3       	ldi	r30, 0x3A	; 58
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a9 01       	movw	r20, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <DIO_u8GetPinVal+0x6a>
    29b6:	55 95       	asr	r21
    29b8:	47 95       	ror	r20
    29ba:	8a 95       	dec	r24
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <DIO_u8GetPinVal+0x66>
    29be:	ca 01       	movw	r24, r20
    29c0:	81 70       	andi	r24, 0x01	; 1
    29c2:	89 83       	std	Y+1, r24	; 0x01
    29c4:	35 c0       	rjmp	.+106    	; 0x2a30 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTB_ID:
		L_PinVal = READ_BIT(PINB, A_u8PinId);
    29c6:	e6 e3       	ldi	r30, 0x36	; 54
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	88 2f       	mov	r24, r24
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	a9 01       	movw	r20, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <DIO_u8GetPinVal+0x8e>
    29da:	55 95       	asr	r21
    29dc:	47 95       	ror	r20
    29de:	8a 95       	dec	r24
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <DIO_u8GetPinVal+0x8a>
    29e2:	ca 01       	movw	r24, r20
    29e4:	81 70       	andi	r24, 0x01	; 1
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	23 c0       	rjmp	.+70     	; 0x2a30 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTC_ID:
		L_PinVal = READ_BIT(PINC, A_u8PinId);
    29ea:	e3 e3       	ldi	r30, 0x33	; 51
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a9 01       	movw	r20, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_u8GetPinVal+0xb2>
    29fe:	55 95       	asr	r21
    2a00:	47 95       	ror	r20
    2a02:	8a 95       	dec	r24
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <DIO_u8GetPinVal+0xae>
    2a06:	ca 01       	movw	r24, r20
    2a08:	81 70       	andi	r24, 0x01	; 1
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	11 c0       	rjmp	.+34     	; 0x2a30 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTD_ID:
		L_PinVal = READ_BIT(PIND, A_u8PinId);
    2a0e:	e0 e3       	ldi	r30, 0x30	; 48
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a9 01       	movw	r20, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <DIO_u8GetPinVal+0xd6>
    2a22:	55 95       	asr	r21
    2a24:	47 95       	ror	r20
    2a26:	8a 95       	dec	r24
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <DIO_u8GetPinVal+0xd2>
    2a2a:	ca 01       	movw	r24, r20
    2a2c:	81 70       	andi	r24, 0x01	; 1
    2a2e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return L_PinVal;
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <DIO_vSetPortDir>:

void DIO_vSetPortDir(u8 A_u8PortId, u8 A_u8Dir)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <DIO_vSetPortDir+0x6>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <DIO_vSetPortDir+0x8>
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3c 83       	std	Y+4, r19	; 0x04
    2a5a:	2b 83       	std	Y+3, r18	; 0x03
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	91 05       	cpc	r25, r1
    2a64:	d1 f0       	breq	.+52     	; 0x2a9a <DIO_vSetPortDir+0x58>
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	22 30       	cpi	r18, 0x02	; 2
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	2c f4       	brge	.+10     	; 0x2a7a <DIO_vSetPortDir+0x38>
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	61 f0       	breq	.+24     	; 0x2a90 <DIO_vSetPortDir+0x4e>
    2a78:	1e c0       	rjmp	.+60     	; 0x2ab6 <DIO_vSetPortDir+0x74>
    2a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7e:	22 30       	cpi	r18, 0x02	; 2
    2a80:	31 05       	cpc	r19, r1
    2a82:	81 f0       	breq	.+32     	; 0x2aa4 <DIO_vSetPortDir+0x62>
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	9c 81       	ldd	r25, Y+4	; 0x04
    2a88:	83 30       	cpi	r24, 0x03	; 3
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	81 f0       	breq	.+32     	; 0x2aae <DIO_vSetPortDir+0x6c>
    2a8e:	13 c0       	rjmp	.+38     	; 0x2ab6 <DIO_vSetPortDir+0x74>
	{
	case PORTA_ID:
		DDRA = A_u8Dir;
    2a90:	ea e3       	ldi	r30, 0x3A	; 58
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	80 83       	st	Z, r24
    2a98:	0e c0       	rjmp	.+28     	; 0x2ab6 <DIO_vSetPortDir+0x74>
		break;
	case PORTB_ID:
		DDRB = A_u8Dir;
    2a9a:	e7 e3       	ldi	r30, 0x37	; 55
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	80 83       	st	Z, r24
    2aa2:	09 c0       	rjmp	.+18     	; 0x2ab6 <DIO_vSetPortDir+0x74>
		break;
	case PORTC_ID:
		DDRC = A_u8Dir;
    2aa4:	e4 e3       	ldi	r30, 0x34	; 52
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	80 83       	st	Z, r24
    2aac:	04 c0       	rjmp	.+8      	; 0x2ab6 <DIO_vSetPortDir+0x74>
		break;
	case PORTD_ID:
		DDRD = A_u8Dir;
    2aae:	e1 e3       	ldi	r30, 0x31	; 49
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <DIO_vSetPortVal>:
void DIO_vSetPortVal(u8 A_u8PortId, u8 A_u8Val)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <DIO_vSetPortVal+0x6>
    2aca:	00 d0       	rcall	.+0      	; 0x2acc <DIO_vSetPortVal+0x8>
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	3c 83       	std	Y+4, r19	; 0x04
    2adc:	2b 83       	std	Y+3, r18	; 0x03
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	d1 f0       	breq	.+52     	; 0x2b1c <DIO_vSetPortVal+0x58>
    2ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    2aea:	3c 81       	ldd	r19, Y+4	; 0x04
    2aec:	22 30       	cpi	r18, 0x02	; 2
    2aee:	31 05       	cpc	r19, r1
    2af0:	2c f4       	brge	.+10     	; 0x2afc <DIO_vSetPortVal+0x38>
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	61 f0       	breq	.+24     	; 0x2b12 <DIO_vSetPortVal+0x4e>
    2afa:	1e c0       	rjmp	.+60     	; 0x2b38 <DIO_vSetPortVal+0x74>
    2afc:	2b 81       	ldd	r18, Y+3	; 0x03
    2afe:	3c 81       	ldd	r19, Y+4	; 0x04
    2b00:	22 30       	cpi	r18, 0x02	; 2
    2b02:	31 05       	cpc	r19, r1
    2b04:	81 f0       	breq	.+32     	; 0x2b26 <DIO_vSetPortVal+0x62>
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	83 30       	cpi	r24, 0x03	; 3
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	81 f0       	breq	.+32     	; 0x2b30 <DIO_vSetPortVal+0x6c>
    2b10:	13 c0       	rjmp	.+38     	; 0x2b38 <DIO_vSetPortVal+0x74>
	{
	case PORTA_ID:
		PORTA = A_u8Val;
    2b12:	eb e3       	ldi	r30, 0x3B	; 59
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	80 83       	st	Z, r24
    2b1a:	0e c0       	rjmp	.+28     	; 0x2b38 <DIO_vSetPortVal+0x74>
		break;
	case PORTB_ID:
		PORTB = A_u8Val;
    2b1c:	e8 e3       	ldi	r30, 0x38	; 56
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	80 83       	st	Z, r24
    2b24:	09 c0       	rjmp	.+18     	; 0x2b38 <DIO_vSetPortVal+0x74>
		break;
	case PORTC_ID:
		PORTC = A_u8Val;
    2b26:	e5 e3       	ldi	r30, 0x35	; 53
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	80 83       	st	Z, r24
    2b2e:	04 c0       	rjmp	.+8      	; 0x2b38 <DIO_vSetPortVal+0x74>
		break;
	case PORTD_ID:
		PORTD = A_u8Val;
    2b30:	e2 e3       	ldi	r30, 0x32	; 50
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <DIO_vTogPortVal>:
void DIO_vTogPortVal(u8 A_u8PortId)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <DIO_vTogPortVal+0x6>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortId)
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	3b 83       	std	Y+3, r19	; 0x03
    2b5c:	2a 83       	std	Y+2, r18	; 0x02
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	9b 81       	ldd	r25, Y+3	; 0x03
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	91 05       	cpc	r25, r1
    2b66:	e9 f0       	breq	.+58     	; 0x2ba2 <DIO_vTogPortVal+0x5c>
    2b68:	2a 81       	ldd	r18, Y+2	; 0x02
    2b6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <DIO_vTogPortVal+0x36>
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	9b 81       	ldd	r25, Y+3	; 0x03
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	61 f0       	breq	.+24     	; 0x2b92 <DIO_vTogPortVal+0x4c>
    2b7a:	2a c0       	rjmp	.+84     	; 0x2bd0 <DIO_vTogPortVal+0x8a>
    2b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b80:	22 30       	cpi	r18, 0x02	; 2
    2b82:	31 05       	cpc	r19, r1
    2b84:	b1 f0       	breq	.+44     	; 0x2bb2 <DIO_vTogPortVal+0x6c>
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8a:	83 30       	cpi	r24, 0x03	; 3
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	c9 f0       	breq	.+50     	; 0x2bc2 <DIO_vTogPortVal+0x7c>
    2b90:	1f c0       	rjmp	.+62     	; 0x2bd0 <DIO_vTogPortVal+0x8a>
	{
	case PORTA_ID:
		PORTA ^= 0xff;
    2b92:	ab e3       	ldi	r26, 0x3B	; 59
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	eb e3       	ldi	r30, 0x3B	; 59
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	80 95       	com	r24
    2b9e:	8c 93       	st	X, r24
    2ba0:	17 c0       	rjmp	.+46     	; 0x2bd0 <DIO_vTogPortVal+0x8a>
		break;
	case PORTB_ID:
		PORTB ^= 0xff;
    2ba2:	a8 e3       	ldi	r26, 0x38	; 56
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e8 e3       	ldi	r30, 0x38	; 56
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	80 95       	com	r24
    2bae:	8c 93       	st	X, r24
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <DIO_vTogPortVal+0x8a>
		break;
	case PORTC_ID:
		PORTC ^= 0xff;
    2bb2:	a5 e3       	ldi	r26, 0x35	; 53
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e5 e3       	ldi	r30, 0x35	; 53
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	80 95       	com	r24
    2bbe:	8c 93       	st	X, r24
    2bc0:	07 c0       	rjmp	.+14     	; 0x2bd0 <DIO_vTogPortVal+0x8a>
		break;
	case PORTD_ID:
		PORTD ^= 0xff;
    2bc2:	a2 e3       	ldi	r26, 0x32	; 50
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	e2 e3       	ldi	r30, 0x32	; 50
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 95       	com	r24
    2bce:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <DIO_u8GetPortVal>:
u8 DIO_u8GetPortVal(u8 A_u8PortId)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <DIO_u8GetPortVal+0x6>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <DIO_u8GetPortVal+0x8>
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal;
	switch (A_u8PortId)
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	3c 83       	std	Y+4, r19	; 0x04
    2bf2:	2b 83       	std	Y+3, r18	; 0x03
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	d1 f0       	breq	.+52     	; 0x2c32 <DIO_u8GetPortVal+0x56>
    2bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2c00:	3c 81       	ldd	r19, Y+4	; 0x04
    2c02:	22 30       	cpi	r18, 0x02	; 2
    2c04:	31 05       	cpc	r19, r1
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <DIO_u8GetPortVal+0x36>
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <DIO_u8GetPortVal+0x4c>
    2c10:	1e c0       	rjmp	.+60     	; 0x2c4e <DIO_u8GetPortVal+0x72>
    2c12:	2b 81       	ldd	r18, Y+3	; 0x03
    2c14:	3c 81       	ldd	r19, Y+4	; 0x04
    2c16:	22 30       	cpi	r18, 0x02	; 2
    2c18:	31 05       	cpc	r19, r1
    2c1a:	81 f0       	breq	.+32     	; 0x2c3c <DIO_u8GetPortVal+0x60>
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	83 30       	cpi	r24, 0x03	; 3
    2c22:	91 05       	cpc	r25, r1
    2c24:	81 f0       	breq	.+32     	; 0x2c46 <DIO_u8GetPortVal+0x6a>
    2c26:	13 c0       	rjmp	.+38     	; 0x2c4e <DIO_u8GetPortVal+0x72>
	{
	case PORTA_ID:
		L_u8PortVal = PINA;
    2c28:	ea e3       	ldi	r30, 0x3A	; 58
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <DIO_u8GetPortVal+0x72>
		break;
	case PORTB_ID:
		L_u8PortVal = PINB;
    2c32:	e6 e3       	ldi	r30, 0x36	; 54
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	09 c0       	rjmp	.+18     	; 0x2c4e <DIO_u8GetPortVal+0x72>
		break;
	case PORTC_ID:
		L_u8PortVal = PINC;
    2c3c:	e3 e3       	ldi	r30, 0x33	; 51
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <DIO_u8GetPortVal+0x72>
		break;
	case PORTD_ID:
		L_u8PortVal = PIND;
    2c46:	e0 e3       	ldi	r30, 0x30	; 48
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return L_u8PortVal;
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <ADC_vInit>:
#include "ADC_pri.h"
#include "ADC_cfg.h"
#include "ADC_int.h"
FUNC_PTR_Iu16_OV G_vISRptr;
void ADC_vInit(void)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    /*Set Reference REFS1 REFS0 AVCC with external capcitor 0 1 */
    SET_BIT(ADMUX, REFS0);
    2c66:	a7 e2       	ldi	r26, 0x27	; 39
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e7 e2       	ldi	r30, 0x27	; 39
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 64       	ori	r24, 0x40	; 64
    2c72:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, REFS1);
    2c74:	a7 e2       	ldi	r26, 0x27	; 39
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e7 e2       	ldi	r30, 0x27	; 39
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	8f 77       	andi	r24, 0x7F	; 127
    2c80:	8c 93       	st	X, r24
    /*Enable ADC*/
    SET_BIT(ADCSRA, ADEN);
    2c82:	a6 e2       	ldi	r26, 0x26	; 38
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e6 e2       	ldi	r30, 0x26	; 38
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 68       	ori	r24, 0x80	; 128
    2c8e:	8c 93       	st	X, r24
    /*Set ADLAR to right adjustment set it to 0*/
    CLR_BIT(ADMUX, ADLAR);
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	8f 7d       	andi	r24, 0xDF	; 223
    2c9c:	8c 93       	st	X, r24
    /* Set prescaler to 128 */
    ADCSRA = (ADCSRA & MASK_PRESCALER_VALUE) | PRESCALER_MODE;
    2c9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e6 e2       	ldi	r30, 0x26	; 38
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	87 60       	ori	r24, 0x07	; 7
    2caa:	8c 93       	st	X, r24
    /*if we use auto trigger set it*/
}
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <ADC_u16ReadDigitalDataSync>:
u16 ADC_u16ReadDigitalDataSync(u8 A_u8AdcChannel)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	0f 92       	push	r0
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    /*SELECT THE CHANNEL*/
    ADMUX = (ADMUX & 0xE0) | A_u8AdcChannel;
    2cbe:	a7 e2       	ldi	r26, 0x27	; 39
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e7 e2       	ldi	r30, 0x27	; 39
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	98 2f       	mov	r25, r24
    2cca:	90 7e       	andi	r25, 0xE0	; 224
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	89 2b       	or	r24, r25
    2cd0:	8c 93       	st	X, r24
    /*START CONVERSION*/
    SET_BIT(ADCSRA, ADSC);
    2cd2:	a6 e2       	ldi	r26, 0x26	; 38
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	e6 e2       	ldi	r30, 0x26	; 38
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 64       	ori	r24, 0x40	; 64
    2cde:	8c 93       	st	X, r24
    /*Wait for conversion to end*/
    while (READ_BIT(ADCSRA, ADIF) == 0)
    2ce0:	e6 e2       	ldi	r30, 0x26	; 38
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	82 95       	swap	r24
    2ce8:	8f 70       	andi	r24, 0x0F	; 15
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	81 70       	andi	r24, 0x01	; 1
    2cf0:	90 70       	andi	r25, 0x00	; 0
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	a9 f3       	breq	.-22     	; 0x2ce0 <ADC_u16ReadDigitalDataSync+0x2e>
    {
        /*Wait*/
    }
    SET_BIT(ADCSRA, ADIF);
    2cf6:	a6 e2       	ldi	r26, 0x26	; 38
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e6 e2       	ldi	r30, 0x26	; 38
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 61       	ori	r24, 0x10	; 16
    2d02:	8c 93       	st	X, r24

    return ADCW;
    2d04:	e4 e2       	ldi	r30, 0x24	; 36
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <ADC_vReadDigitalDataAsync>:
void ADC_vReadDigitalDataAsync(FUNC_PTR_Iu16_OV A_PTR_FUNC, u8 A_u8AdcChannel)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <ADC_vReadDigitalDataAsync+0x6>
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	6b 83       	std	Y+3, r22	; 0x03
    /*SELECT THE CHANNEL*/
    ADMUX = (ADMUX & 0xE0) | A_u8AdcChannel;
    2d26:	a7 e2       	ldi	r26, 0x27	; 39
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e7 e2       	ldi	r30, 0x27	; 39
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	98 2f       	mov	r25, r24
    2d32:	90 7e       	andi	r25, 0xE0	; 224
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	89 2b       	or	r24, r25
    2d38:	8c 93       	st	X, r24
    /*Enable Interrupt*/
    SET_BIT(ADCSRA, ADIE);
    2d3a:	a6 e2       	ldi	r26, 0x26	; 38
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e6 e2       	ldi	r30, 0x26	; 38
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	88 60       	ori	r24, 0x08	; 8
    2d46:	8c 93       	st	X, r24
    /*Assign Function*/
    G_vISRptr = A_PTR_FUNC;
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	90 93 4b 02 	sts	0x024B, r25
    2d50:	80 93 4a 02 	sts	0x024A, r24
    /*START CONVERSION*/
    SET_BIT(ADCSRA, ADSC);
    2d54:	a6 e2       	ldi	r26, 0x26	; 38
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e6 e2       	ldi	r30, 0x26	; 38
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 64       	ori	r24, 0x40	; 64
    2d60:	8c 93       	st	X, r24
}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <__vector_16>:

void __vector_16(void)
{
    2d6e:	1f 92       	push	r1
    2d70:	0f 92       	push	r0
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	0f 92       	push	r0
    2d76:	11 24       	eor	r1, r1
    2d78:	2f 93       	push	r18
    2d7a:	3f 93       	push	r19
    2d7c:	4f 93       	push	r20
    2d7e:	5f 93       	push	r21
    2d80:	6f 93       	push	r22
    2d82:	7f 93       	push	r23
    2d84:	8f 93       	push	r24
    2d86:	9f 93       	push	r25
    2d88:	af 93       	push	r26
    2d8a:	bf 93       	push	r27
    2d8c:	ef 93       	push	r30
    2d8e:	ff 93       	push	r31
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62

    G_vISRptr(ADCW);
    2d98:	20 91 4a 02 	lds	r18, 0x024A
    2d9c:	30 91 4b 02 	lds	r19, 0x024B
    2da0:	e4 e2       	ldi	r30, 0x24	; 36
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	f9 01       	movw	r30, r18
    2daa:	09 95       	icall
    /*Disable The ADC Interrupt*/
    CLR_BIT(ADCSRA, ADIE);
    2dac:	a6 e2       	ldi	r26, 0x26	; 38
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e6 e2       	ldi	r30, 0x26	; 38
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	87 7f       	andi	r24, 0xF7	; 247
    2db8:	8c 93       	st	X, r24
}
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	ff 91       	pop	r31
    2dc0:	ef 91       	pop	r30
    2dc2:	bf 91       	pop	r27
    2dc4:	af 91       	pop	r26
    2dc6:	9f 91       	pop	r25
    2dc8:	8f 91       	pop	r24
    2dca:	7f 91       	pop	r23
    2dcc:	6f 91       	pop	r22
    2dce:	5f 91       	pop	r21
    2dd0:	4f 91       	pop	r20
    2dd2:	3f 91       	pop	r19
    2dd4:	2f 91       	pop	r18
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <TRANSISTOR_vInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "TRANSISTORS_pri.h"
#include "TRANSISTORS_cfg.h"
#include "TRANSISTORS_int.h"
void TRANSISTOR_vInit(u8 A_u8TransID)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <TRANSISTOR_vInit+0x6>
    2de6:	0f 92       	push	r0
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	3b 83       	std	Y+3, r19	; 0x03
    2df6:	2a 83       	std	Y+2, r18	; 0x02
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	91 05       	cpc	r25, r1
    2e00:	d9 f0       	breq	.+54     	; 0x2e38 <TRANSISTOR_vInit+0x58>
    2e02:	2a 81       	ldd	r18, Y+2	; 0x02
    2e04:	3b 81       	ldd	r19, Y+3	; 0x03
    2e06:	22 30       	cpi	r18, 0x02	; 2
    2e08:	31 05       	cpc	r19, r1
    2e0a:	2c f4       	brge	.+10     	; 0x2e16 <TRANSISTOR_vInit+0x36>
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	61 f0       	breq	.+24     	; 0x2e2c <TRANSISTOR_vInit+0x4c>
    2e14:	22 c0       	rjmp	.+68     	; 0x2e5a <TRANSISTOR_vInit+0x7a>
    2e16:	2a 81       	ldd	r18, Y+2	; 0x02
    2e18:	3b 81       	ldd	r19, Y+3	; 0x03
    2e1a:	22 30       	cpi	r18, 0x02	; 2
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	91 f0       	breq	.+36     	; 0x2e44 <TRANSISTOR_vInit+0x64>
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	83 30       	cpi	r24, 0x03	; 3
    2e26:	91 05       	cpc	r25, r1
    2e28:	99 f0       	breq	.+38     	; 0x2e50 <TRANSISTOR_vInit+0x70>
    2e2a:	17 c0       	rjmp	.+46     	; 0x2e5a <TRANSISTOR_vInit+0x7a>
    {
    case TRANS0:
        DIO_vSetPinDir(TRANS0_PORT, TRANS0_PIN, DIR_OUTPUT);
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	67 e0       	ldi	r22, 0x07	; 7
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    2e36:	11 c0       	rjmp	.+34     	; 0x2e5a <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinDir(TRANS1_PORT, TRANS1_PIN, DIR_OUTPUT);
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	66 e0       	ldi	r22, 0x06	; 6
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    2e42:	0b c0       	rjmp	.+22     	; 0x2e5a <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinDir(TRANS2_PORT, TRANS2_PIN, DIR_OUTPUT);
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	67 e0       	ldi	r22, 0x07	; 7
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    2e4e:	05 c0       	rjmp	.+10     	; 0x2e5a <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinDir(TRANS3_PORT, TRANS3_PIN, DIR_OUTPUT);
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	66 e0       	ldi	r22, 0x06	; 6
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        break;

    default:
        break;
    }
}
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <TRANSISTOR_vTurnOn>:
void TRANSISTOR_vTurnOn(u8 A_u8TransID)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <TRANSISTOR_vTurnOn+0x6>
    2e6c:	0f 92       	push	r0
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	3b 83       	std	Y+3, r19	; 0x03
    2e7c:	2a 83       	std	Y+2, r18	; 0x02
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	81 30       	cpi	r24, 0x01	; 1
    2e84:	91 05       	cpc	r25, r1
    2e86:	d9 f0       	breq	.+54     	; 0x2ebe <TRANSISTOR_vTurnOn+0x58>
    2e88:	2a 81       	ldd	r18, Y+2	; 0x02
    2e8a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e8c:	22 30       	cpi	r18, 0x02	; 2
    2e8e:	31 05       	cpc	r19, r1
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <TRANSISTOR_vTurnOn+0x36>
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	61 f0       	breq	.+24     	; 0x2eb2 <TRANSISTOR_vTurnOn+0x4c>
    2e9a:	22 c0       	rjmp	.+68     	; 0x2ee0 <TRANSISTOR_vTurnOn+0x7a>
    2e9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e9e:	3b 81       	ldd	r19, Y+3	; 0x03
    2ea0:	22 30       	cpi	r18, 0x02	; 2
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	91 f0       	breq	.+36     	; 0x2eca <TRANSISTOR_vTurnOn+0x64>
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eaa:	83 30       	cpi	r24, 0x03	; 3
    2eac:	91 05       	cpc	r25, r1
    2eae:	99 f0       	breq	.+38     	; 0x2ed6 <TRANSISTOR_vTurnOn+0x70>
    2eb0:	17 c0       	rjmp	.+46     	; 0x2ee0 <TRANSISTOR_vTurnOn+0x7a>
    {
    case TRANS0:
        DIO_vSetPinVal(TRANS0_PORT, TRANS0_PIN, HIGH);
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	67 e0       	ldi	r22, 0x07	; 7
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2ebc:	11 c0       	rjmp	.+34     	; 0x2ee0 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinVal(TRANS1_PORT, TRANS1_PIN, HIGH);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	66 e0       	ldi	r22, 0x06	; 6
    2ec2:	41 e0       	ldi	r20, 0x01	; 1
    2ec4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2ec8:	0b c0       	rjmp	.+22     	; 0x2ee0 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinVal(TRANS2_PORT, TRANS2_PIN, HIGH);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	67 e0       	ldi	r22, 0x07	; 7
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2ed4:	05 c0       	rjmp	.+10     	; 0x2ee0 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinVal(TRANS3_PORT, TRANS3_PIN, HIGH);
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	66 e0       	ldi	r22, 0x06	; 6
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;

    default:
        break;
    }
}
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <TRANSISTOR_vTurnOff>:
void TRANSISTOR_vTurnOff(u8 A_u8TransID)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <TRANSISTOR_vTurnOff+0x6>
    2ef2:	0f 92       	push	r0
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	3b 83       	std	Y+3, r19	; 0x03
    2f02:	2a 83       	std	Y+2, r18	; 0x02
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	d9 f0       	breq	.+54     	; 0x2f44 <TRANSISTOR_vTurnOff+0x58>
    2f0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f10:	3b 81       	ldd	r19, Y+3	; 0x03
    2f12:	22 30       	cpi	r18, 0x02	; 2
    2f14:	31 05       	cpc	r19, r1
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <TRANSISTOR_vTurnOff+0x36>
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	61 f0       	breq	.+24     	; 0x2f38 <TRANSISTOR_vTurnOff+0x4c>
    2f20:	22 c0       	rjmp	.+68     	; 0x2f66 <TRANSISTOR_vTurnOff+0x7a>
    2f22:	2a 81       	ldd	r18, Y+2	; 0x02
    2f24:	3b 81       	ldd	r19, Y+3	; 0x03
    2f26:	22 30       	cpi	r18, 0x02	; 2
    2f28:	31 05       	cpc	r19, r1
    2f2a:	91 f0       	breq	.+36     	; 0x2f50 <TRANSISTOR_vTurnOff+0x64>
    2f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f30:	83 30       	cpi	r24, 0x03	; 3
    2f32:	91 05       	cpc	r25, r1
    2f34:	99 f0       	breq	.+38     	; 0x2f5c <TRANSISTOR_vTurnOff+0x70>
    2f36:	17 c0       	rjmp	.+46     	; 0x2f66 <TRANSISTOR_vTurnOff+0x7a>
    {
    case TRANS0:
        DIO_vSetPinVal(TRANS0_PORT, TRANS0_PIN, LOW);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	67 e0       	ldi	r22, 0x07	; 7
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2f42:	11 c0       	rjmp	.+34     	; 0x2f66 <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinVal(TRANS1_PORT, TRANS1_PIN, LOW);
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	66 e0       	ldi	r22, 0x06	; 6
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2f4e:	0b c0       	rjmp	.+22     	; 0x2f66 <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinVal(TRANS2_PORT, TRANS2_PIN, LOW);
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	67 e0       	ldi	r22, 0x07	; 7
    2f54:	40 e0       	ldi	r20, 0x00	; 0
    2f56:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinVal(TRANS3_PORT, TRANS3_PIN, LOW);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	66 e0       	ldi	r22, 0x06	; 6
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;

    default:
        break;
    }
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <TEMPS_vInit>:
#include "TEMPS_cfg.h"
#include "TEMPS_int.h"


void TEMPS_vInit()
{
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    ADC_vInit();
    2f7a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <ADC_vInit>
}
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <TEMPS_f32GetTemp>:

f32 TEMPS_f32GetTemp()
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	2a 97       	sbiw	r28, 0x0a	; 10
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    u16 L_u16ReadingDigital;
    f32 L_u16ReadingAnalogue;
    f32 L_f32Temp;
    L_u16ReadingDigital = ADC_u16ReadDigitalDataSync(TEMP_SENSOR_PIN);
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <ADC_u16ReadDigitalDataSync>
    2f9e:	9a 87       	std	Y+10, r25	; 0x0a
    2fa0:	89 87       	std	Y+9, r24	; 0x09
    L_u16ReadingAnalogue = (L_u16ReadingDigital * REFERENCE_VOLTAGE) / TWO_POWER_ADC_RESOLUTION;
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	cc 01       	movw	r24, r24
    2fa8:	a0 e0       	ldi	r26, 0x00	; 0
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	bc 01       	movw	r22, r24
    2fae:	cd 01       	movw	r24, r26
    2fb0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e4       	ldi	r19, 0x40	; 64
    2fc0:	4c e9       	ldi	r20, 0x9C	; 156
    2fc2:	55 e4       	ldi	r21, 0x45	; 69
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	54 e4       	ldi	r21, 0x44	; 68
    2fd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	af 83       	std	Y+7, r26	; 0x07
    2fe6:	b8 87       	std	Y+8, r27	; 0x08
    L_f32Temp = L_u16ReadingAnalogue / 10;
    2fe8:	6d 81       	ldd	r22, Y+5	; 0x05
    2fea:	7e 81       	ldd	r23, Y+6	; 0x06
    2fec:	8f 81       	ldd	r24, Y+7	; 0x07
    2fee:	98 85       	ldd	r25, Y+8	; 0x08
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e2       	ldi	r20, 0x20	; 32
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	ab 83       	std	Y+3, r26	; 0x03
    3006:	bc 83       	std	Y+4, r27	; 0x04
    return L_f32Temp;
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	ab 81       	ldd	r26, Y+3	; 0x03
    300e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	2a 96       	adiw	r28, 0x0a	; 10
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <SWT_vInit>:
#include "SWITCHES_pri.h"
#include "SWITCHES_cfg.h"
#include "SWITCHES_int.h"

void SWT_vInit(u8 A_u8SwtID)
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <SWT_vInit+0x6>
    302c:	00 d0       	rcall	.+0      	; 0x302e <SWT_vInit+0x8>
    302e:	0f 92       	push	r0
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8SwtID)
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	3d 83       	std	Y+5, r19	; 0x05
    303e:	2c 83       	std	Y+4, r18	; 0x04
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	83 30       	cpi	r24, 0x03	; 3
    3046:	91 05       	cpc	r25, r1
    3048:	d9 f1       	breq	.+118    	; 0x30c0 <SWT_vInit+0x9a>
    304a:	2c 81       	ldd	r18, Y+4	; 0x04
    304c:	3d 81       	ldd	r19, Y+5	; 0x05
    304e:	24 30       	cpi	r18, 0x04	; 4
    3050:	31 05       	cpc	r19, r1
    3052:	7c f4       	brge	.+30     	; 0x3072 <SWT_vInit+0x4c>
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	9d 81       	ldd	r25, Y+5	; 0x05
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	91 05       	cpc	r25, r1
    305c:	29 f1       	breq	.+74     	; 0x30a8 <SWT_vInit+0x82>
    305e:	2c 81       	ldd	r18, Y+4	; 0x04
    3060:	3d 81       	ldd	r19, Y+5	; 0x05
    3062:	22 30       	cpi	r18, 0x02	; 2
    3064:	31 05       	cpc	r19, r1
    3066:	34 f5       	brge	.+76     	; 0x30b4 <SWT_vInit+0x8e>
    3068:	8c 81       	ldd	r24, Y+4	; 0x04
    306a:	9d 81       	ldd	r25, Y+5	; 0x05
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	b1 f0       	breq	.+44     	; 0x309c <SWT_vInit+0x76>
    3070:	44 c0       	rjmp	.+136    	; 0x30fa <SWT_vInit+0xd4>
    3072:	2c 81       	ldd	r18, Y+4	; 0x04
    3074:	3d 81       	ldd	r19, Y+5	; 0x05
    3076:	25 30       	cpi	r18, 0x05	; 5
    3078:	31 05       	cpc	r19, r1
    307a:	71 f1       	breq	.+92     	; 0x30d8 <SWT_vInit+0xb2>
    307c:	8c 81       	ldd	r24, Y+4	; 0x04
    307e:	9d 81       	ldd	r25, Y+5	; 0x05
    3080:	85 30       	cpi	r24, 0x05	; 5
    3082:	91 05       	cpc	r25, r1
    3084:	1c f1       	brlt	.+70     	; 0x30cc <SWT_vInit+0xa6>
    3086:	2c 81       	ldd	r18, Y+4	; 0x04
    3088:	3d 81       	ldd	r19, Y+5	; 0x05
    308a:	26 30       	cpi	r18, 0x06	; 6
    308c:	31 05       	cpc	r19, r1
    308e:	51 f1       	breq	.+84     	; 0x30e4 <SWT_vInit+0xbe>
    3090:	8c 81       	ldd	r24, Y+4	; 0x04
    3092:	9d 81       	ldd	r25, Y+5	; 0x05
    3094:	87 30       	cpi	r24, 0x07	; 7
    3096:	91 05       	cpc	r25, r1
    3098:	59 f1       	breq	.+86     	; 0x30f0 <SWT_vInit+0xca>
    309a:	2f c0       	rjmp	.+94     	; 0x30fa <SWT_vInit+0xd4>
    {
    case SWT0:
        DIO_vSetPinDir(SWT0_PORT, SWT0_PIN, DIR_INPUT);
    309c:	83 e0       	ldi	r24, 0x03	; 3
    309e:	60 e0       	ldi	r22, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30a6:	29 c0       	rjmp	.+82     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT1:
        DIO_vSetPinDir(SWT1_PORT, SWT1_PIN, DIR_INPUT);
    30a8:	83 e0       	ldi	r24, 0x03	; 3
    30aa:	61 e0       	ldi	r22, 0x01	; 1
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30b2:	23 c0       	rjmp	.+70     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT2:
        DIO_vSetPinDir(SWT2_PORT, SWT2_PIN, DIR_INPUT);
    30b4:	83 e0       	ldi	r24, 0x03	; 3
    30b6:	62 e0       	ldi	r22, 0x02	; 2
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30be:	1d c0       	rjmp	.+58     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT3:
        DIO_vSetPinDir(SWT3_PORT, SWT3_PIN, DIR_INPUT);
    30c0:	83 e0       	ldi	r24, 0x03	; 3
    30c2:	63 e0       	ldi	r22, 0x03	; 3
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30ca:	17 c0       	rjmp	.+46     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT4:
        DIO_vSetPinDir(SWT4_PORT, SWT4_PIN, DIR_INPUT);
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	64 e0       	ldi	r22, 0x04	; 4
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30d6:	11 c0       	rjmp	.+34     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT5:
        DIO_vSetPinDir(SWT5_PORT, SWT5_PIN, DIR_INPUT);
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	65 e0       	ldi	r22, 0x05	; 5
    30dc:	40 e0       	ldi	r20, 0x00	; 0
    30de:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30e2:	0b c0       	rjmp	.+22     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT6:
        DIO_vSetPinDir(SWT6_PORT, SWT6_PIN, DIR_INPUT);
    30e4:	83 e0       	ldi	r24, 0x03	; 3
    30e6:	66 e0       	ldi	r22, 0x06	; 6
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    30ee:	05 c0       	rjmp	.+10     	; 0x30fa <SWT_vInit+0xd4>
        break;
    case SWT7:
        DIO_vSetPinDir(SWT7_PORT, SWT7_PIN, DIR_INPUT);
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	67 e0       	ldi	r22, 0x07	; 7
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        break;
    default:
        break;
    }
#if SWT_PULLING == INTERNAL_PULLUP
    switch (A_u8SwtID)
    30fa:	89 81       	ldd	r24, Y+1	; 0x01
    30fc:	28 2f       	mov	r18, r24
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	3b 83       	std	Y+3, r19	; 0x03
    3102:	2a 83       	std	Y+2, r18	; 0x02
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	9b 81       	ldd	r25, Y+3	; 0x03
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	91 05       	cpc	r25, r1
    310c:	d9 f1       	breq	.+118    	; 0x3184 <SWT_vInit+0x15e>
    310e:	2a 81       	ldd	r18, Y+2	; 0x02
    3110:	3b 81       	ldd	r19, Y+3	; 0x03
    3112:	24 30       	cpi	r18, 0x04	; 4
    3114:	31 05       	cpc	r19, r1
    3116:	7c f4       	brge	.+30     	; 0x3136 <SWT_vInit+0x110>
    3118:	8a 81       	ldd	r24, Y+2	; 0x02
    311a:	9b 81       	ldd	r25, Y+3	; 0x03
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	91 05       	cpc	r25, r1
    3120:	29 f1       	breq	.+74     	; 0x316c <SWT_vInit+0x146>
    3122:	2a 81       	ldd	r18, Y+2	; 0x02
    3124:	3b 81       	ldd	r19, Y+3	; 0x03
    3126:	22 30       	cpi	r18, 0x02	; 2
    3128:	31 05       	cpc	r19, r1
    312a:	34 f5       	brge	.+76     	; 0x3178 <SWT_vInit+0x152>
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	9b 81       	ldd	r25, Y+3	; 0x03
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	b1 f0       	breq	.+44     	; 0x3160 <SWT_vInit+0x13a>
    3134:	44 c0       	rjmp	.+136    	; 0x31be <SWT_vInit+0x198>
    3136:	2a 81       	ldd	r18, Y+2	; 0x02
    3138:	3b 81       	ldd	r19, Y+3	; 0x03
    313a:	25 30       	cpi	r18, 0x05	; 5
    313c:	31 05       	cpc	r19, r1
    313e:	71 f1       	breq	.+92     	; 0x319c <SWT_vInit+0x176>
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	85 30       	cpi	r24, 0x05	; 5
    3146:	91 05       	cpc	r25, r1
    3148:	1c f1       	brlt	.+70     	; 0x3190 <SWT_vInit+0x16a>
    314a:	2a 81       	ldd	r18, Y+2	; 0x02
    314c:	3b 81       	ldd	r19, Y+3	; 0x03
    314e:	26 30       	cpi	r18, 0x06	; 6
    3150:	31 05       	cpc	r19, r1
    3152:	51 f1       	breq	.+84     	; 0x31a8 <SWT_vInit+0x182>
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	87 30       	cpi	r24, 0x07	; 7
    315a:	91 05       	cpc	r25, r1
    315c:	59 f1       	breq	.+86     	; 0x31b4 <SWT_vInit+0x18e>
    315e:	2f c0       	rjmp	.+94     	; 0x31be <SWT_vInit+0x198>
    {
    case SWT0:
        DIO_vSetPinVal(SWT0_PORT, SWT0_PIN, HIGH);
    3160:	83 e0       	ldi	r24, 0x03	; 3
    3162:	60 e0       	ldi	r22, 0x00	; 0
    3164:	41 e0       	ldi	r20, 0x01	; 1
    3166:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    316a:	29 c0       	rjmp	.+82     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT1:
        DIO_vSetPinVal(SWT1_PORT, SWT1_PIN, HIGH);
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	61 e0       	ldi	r22, 0x01	; 1
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    3176:	23 c0       	rjmp	.+70     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT2:
        DIO_vSetPinVal(SWT2_PORT, SWT2_PIN, HIGH);
    3178:	83 e0       	ldi	r24, 0x03	; 3
    317a:	62 e0       	ldi	r22, 0x02	; 2
    317c:	41 e0       	ldi	r20, 0x01	; 1
    317e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    3182:	1d c0       	rjmp	.+58     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT3:
        DIO_vSetPinVal(SWT3_PORT, SWT3_PIN, HIGH);
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	63 e0       	ldi	r22, 0x03	; 3
    3188:	41 e0       	ldi	r20, 0x01	; 1
    318a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    318e:	17 c0       	rjmp	.+46     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT4:
        DIO_vSetPinVal(SWT4_PORT, SWT4_PIN, HIGH);
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	64 e0       	ldi	r22, 0x04	; 4
    3194:	41 e0       	ldi	r20, 0x01	; 1
    3196:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    319a:	11 c0       	rjmp	.+34     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT5:
        DIO_vSetPinVal(SWT5_PORT, SWT5_PIN, HIGH);
    319c:	83 e0       	ldi	r24, 0x03	; 3
    319e:	65 e0       	ldi	r22, 0x05	; 5
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT6:
        DIO_vSetPinVal(SWT6_PORT, SWT6_PIN, HIGH);
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	66 e0       	ldi	r22, 0x06	; 6
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    31b2:	05 c0       	rjmp	.+10     	; 0x31be <SWT_vInit+0x198>
        break;
    case SWT7:
        DIO_vSetPinVal(SWT7_PORT, SWT7_PIN, HIGH);
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	67 e0       	ldi	r22, 0x07	; 7
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <SWT_vInitAllSwt>:
void SWT_vInitAllSwt()
{
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    SWT_vInit(SWT0);
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT1);
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT2);
    31e2:	82 e0       	ldi	r24, 0x02	; 2
    31e4:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT3);
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT4);
    31ee:	84 e0       	ldi	r24, 0x04	; 4
    31f0:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT5);
    31f4:	85 e0       	ldi	r24, 0x05	; 5
    31f6:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT6);
    31fa:	86 e0       	ldi	r24, 0x06	; 6
    31fc:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
    SWT_vInit(SWT7);
    3200:	87 e0       	ldi	r24, 0x07	; 7
    3202:	0e 94 13 18 	call	0x3026	; 0x3026 <SWT_vInit>
}
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <SWT_u8ReadSwt>:
u8 SWT_u8ReadSwt(u8 A_u8SwtID)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <SWT_u8ReadSwt+0x6>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <SWT_u8ReadSwt+0x8>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8SwtState;
    switch (A_u8SwtID)
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	3c 83       	std	Y+4, r19	; 0x04
    3222:	2b 83       	std	Y+3, r18	; 0x03
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	83 30       	cpi	r24, 0x03	; 3
    322a:	91 05       	cpc	r25, r1
    322c:	d9 f1       	breq	.+118    	; 0x32a4 <SWT_u8ReadSwt+0x98>
    322e:	2b 81       	ldd	r18, Y+3	; 0x03
    3230:	3c 81       	ldd	r19, Y+4	; 0x04
    3232:	24 30       	cpi	r18, 0x04	; 4
    3234:	31 05       	cpc	r19, r1
    3236:	7c f4       	brge	.+30     	; 0x3256 <SWT_u8ReadSwt+0x4a>
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	81 30       	cpi	r24, 0x01	; 1
    323e:	91 05       	cpc	r25, r1
    3240:	29 f1       	breq	.+74     	; 0x328c <SWT_u8ReadSwt+0x80>
    3242:	2b 81       	ldd	r18, Y+3	; 0x03
    3244:	3c 81       	ldd	r19, Y+4	; 0x04
    3246:	22 30       	cpi	r18, 0x02	; 2
    3248:	31 05       	cpc	r19, r1
    324a:	34 f5       	brge	.+76     	; 0x3298 <SWT_u8ReadSwt+0x8c>
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	9c 81       	ldd	r25, Y+4	; 0x04
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	b1 f0       	breq	.+44     	; 0x3280 <SWT_u8ReadSwt+0x74>
    3254:	44 c0       	rjmp	.+136    	; 0x32de <SWT_u8ReadSwt+0xd2>
    3256:	2b 81       	ldd	r18, Y+3	; 0x03
    3258:	3c 81       	ldd	r19, Y+4	; 0x04
    325a:	25 30       	cpi	r18, 0x05	; 5
    325c:	31 05       	cpc	r19, r1
    325e:	71 f1       	breq	.+92     	; 0x32bc <SWT_u8ReadSwt+0xb0>
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	85 30       	cpi	r24, 0x05	; 5
    3266:	91 05       	cpc	r25, r1
    3268:	1c f1       	brlt	.+70     	; 0x32b0 <SWT_u8ReadSwt+0xa4>
    326a:	2b 81       	ldd	r18, Y+3	; 0x03
    326c:	3c 81       	ldd	r19, Y+4	; 0x04
    326e:	26 30       	cpi	r18, 0x06	; 6
    3270:	31 05       	cpc	r19, r1
    3272:	51 f1       	breq	.+84     	; 0x32c8 <SWT_u8ReadSwt+0xbc>
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	9c 81       	ldd	r25, Y+4	; 0x04
    3278:	87 30       	cpi	r24, 0x07	; 7
    327a:	91 05       	cpc	r25, r1
    327c:	59 f1       	breq	.+86     	; 0x32d4 <SWT_u8ReadSwt+0xc8>
    327e:	2f c0       	rjmp	.+94     	; 0x32de <SWT_u8ReadSwt+0xd2>
    {
    case SWT0:
        L_u8SwtState = DIO_u8GetPinVal(SWT0_PORT, SWT0_PIN);
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	29 c0       	rjmp	.+82     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT1:
        L_u8SwtState = DIO_u8GetPinVal(SWT1_PORT, SWT1_PIN);
    328c:	83 e0       	ldi	r24, 0x03	; 3
    328e:	61 e0       	ldi	r22, 0x01	; 1
    3290:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	23 c0       	rjmp	.+70     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT2:
        L_u8SwtState = DIO_u8GetPinVal(SWT2_PORT, SWT2_PIN);
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	62 e0       	ldi	r22, 0x02	; 2
    329c:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	1d c0       	rjmp	.+58     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT3:
        L_u8SwtState = DIO_u8GetPinVal(SWT3_PORT, SWT3_PIN);
    32a4:	83 e0       	ldi	r24, 0x03	; 3
    32a6:	63 e0       	ldi	r22, 0x03	; 3
    32a8:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	17 c0       	rjmp	.+46     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT4:
        L_u8SwtState = DIO_u8GetPinVal(SWT4_PORT, SWT4_PIN);
    32b0:	83 e0       	ldi	r24, 0x03	; 3
    32b2:	64 e0       	ldi	r22, 0x04	; 4
    32b4:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	11 c0       	rjmp	.+34     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT5:
        L_u8SwtState = DIO_u8GetPinVal(SWT5_PORT, SWT5_PIN);
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	65 e0       	ldi	r22, 0x05	; 5
    32c0:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	0b c0       	rjmp	.+22     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT6:
        L_u8SwtState = DIO_u8GetPinVal(SWT6_PORT, SWT6_PIN);
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	66 e0       	ldi	r22, 0x06	; 6
    32cc:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <SWT_u8ReadSwt+0xd2>
        break;
    case SWT7:
        L_u8SwtState = DIO_u8GetPinVal(SWT7_PORT, SWT7_PIN);
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	67 e0       	ldi	r22, 0x07	; 7
    32d8:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    32dc:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    if (L_u8SwtState == 0)
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	88 23       	and	r24, r24
    32e2:	19 f4       	brne	.+6      	; 0x32ea <SWT_u8ReadSwt+0xde>
    {
        L_u8SwtState = SWT_ON;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	01 c0       	rjmp	.+2      	; 0x32ec <SWT_u8ReadSwt+0xe0>
    }
    else
    {
        L_u8SwtState = SWT_OFF;
    32ea:	19 82       	std	Y+1, r1	; 0x01
    }
    return L_u8SwtState;
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <SWT_u8ReadAllSwt>:
u8 SWT_u8ReadAllSwt()
{
    32fc:	1f 93       	push	r17
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    u8 L_u8SwtVal;
    L_u8SwtVal = SWT_u8ReadSwt(SWT0) << 0 | SWT_u8ReadSwt(SWT1) << 1 | SWT_u8ReadSwt(SWT3) << 3 | SWT_u8ReadSwt(SWT4) << 4 | SWT_u8ReadSwt(SWT5) << 5 | SWT_u8ReadSwt(SWT6) << 6 | SWT_u8ReadSwt(SWT7) << 7;
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    330e:	18 2f       	mov	r17, r24
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	88 0f       	add	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	18 2b       	or	r17, r24
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	18 2b       	or	r17, r24
    3338:	84 e0       	ldi	r24, 0x04	; 4
    333a:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    333e:	88 2f       	mov	r24, r24
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	82 95       	swap	r24
    3344:	92 95       	swap	r25
    3346:	90 7f       	andi	r25, 0xF0	; 240
    3348:	98 27       	eor	r25, r24
    334a:	80 7f       	andi	r24, 0xF0	; 240
    334c:	98 27       	eor	r25, r24
    334e:	18 2b       	or	r17, r24
    3350:	85 e0       	ldi	r24, 0x05	; 5
    3352:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    3356:	88 2f       	mov	r24, r24
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	82 95       	swap	r24
    3360:	92 95       	swap	r25
    3362:	90 7f       	andi	r25, 0xF0	; 240
    3364:	98 27       	eor	r25, r24
    3366:	80 7f       	andi	r24, 0xF0	; 240
    3368:	98 27       	eor	r25, r24
    336a:	18 2b       	or	r17, r24
    336c:	86 e0       	ldi	r24, 0x06	; 6
    336e:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	00 24       	eor	r0, r0
    3378:	96 95       	lsr	r25
    337a:	87 95       	ror	r24
    337c:	07 94       	ror	r0
    337e:	96 95       	lsr	r25
    3380:	87 95       	ror	r24
    3382:	07 94       	ror	r0
    3384:	98 2f       	mov	r25, r24
    3386:	80 2d       	mov	r24, r0
    3388:	18 2b       	or	r17, r24
    338a:	87 e0       	ldi	r24, 0x07	; 7
    338c:	0e 94 06 19 	call	0x320c	; 0x320c <SWT_u8ReadSwt>
    3390:	88 2f       	mov	r24, r24
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	96 95       	lsr	r25
    3396:	98 2f       	mov	r25, r24
    3398:	88 27       	eor	r24, r24
    339a:	97 95       	ror	r25
    339c:	87 95       	ror	r24
    339e:	81 2b       	or	r24, r17
    33a0:	89 83       	std	Y+1, r24	; 0x01
    return L_u8SwtVal;
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	1f 91       	pop	r17
    33ac:	08 95       	ret

000033ae <STM_vInit>:
#include <avr/delay.h>

static u8 G_u8DelayTimeInMs = 2, G_u8StepMode;

void STM_vInit()
{
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    DIO_vSetPinDir(COIL_ORANGE_PORT, COIL_ORANGE_PIN, DIR_OUTPUT);
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	41 e0       	ldi	r20, 0x01	; 1
    33bc:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_YELLOW_PORT, COIL_YELLOW_PIN, DIR_OUTPUT);
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	62 e0       	ldi	r22, 0x02	; 2
    33c4:	41 e0       	ldi	r20, 0x01	; 1
    33c6:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_PINK_PORT, COIL_PINK_PIN, DIR_OUTPUT);
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	61 e0       	ldi	r22, 0x01	; 1
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_BLUE_PORT, COIL_BLUE_PIN, DIR_OUTPUT);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	63 e0       	ldi	r22, 0x03	; 3
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
}
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	08 95       	ret

000033e4 <STM_vSetStepMode>:
void STM_vSetStepMode(u8 A_u8Step)
{
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	0f 92       	push	r0
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	89 83       	std	Y+1, r24	; 0x01
    G_u8StepMode = A_u8Step;
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	80 93 15 02 	sts	0x0215, r24
};
    33f6:	0f 90       	pop	r0
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <STM_vSetMotorSpeedRPM>:

void STM_vSetMotorSpeedRPM(u8 A_u8MotorSpeedRpm)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	0f 92       	push	r0
    3404:	cd b7       	in	r28, 0x3d	; 61
    3406:	de b7       	in	r29, 0x3e	; 62
    3408:	89 83       	std	Y+1, r24	; 0x01
    if (G_u8StepMode == FULL_STEP)
    340a:	80 91 15 02 	lds	r24, 0x0215
    340e:	88 23       	and	r24, r24
    3410:	d1 f5       	brne	.+116    	; 0x3486 <STM_vSetMotorSpeedRPM+0x88>
    {
        G_u8DelayTimeInMs = round((60 * 1.0 / (A_u8MotorSpeedRpm * (360 / STEP_ANGLE_FULL_STEP))) * 1000);
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	aa 27       	eor	r26, r26
    341a:	97 fd       	sbrc	r25, 7
    341c:	a0 95       	com	r26
    341e:	ba 2f       	mov	r27, r26
    3420:	bc 01       	movw	r22, r24
    3422:	cd 01       	movw	r24, r26
    3424:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	bc 01       	movw	r22, r24
    342e:	cd 01       	movw	r24, r26
    3430:	23 e0       	ldi	r18, 0x03	; 3
    3432:	39 ef       	ldi	r19, 0xF9	; 249
    3434:	4f ef       	ldi	r20, 0xFF	; 255
    3436:	54 e4       	ldi	r21, 0x44	; 68
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	9c 01       	movw	r18, r24
    3442:	ad 01       	movw	r20, r26
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	80 e7       	ldi	r24, 0x70	; 112
    344a:	92 e4       	ldi	r25, 0x42	; 66
    344c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	4a e7       	ldi	r20, 0x7A	; 122
    345e:	54 e4       	ldi	r21, 0x44	; 68
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <round>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	80 93 92 01 	sts	0x0192, r24
    3484:	39 c0       	rjmp	.+114    	; 0x34f8 <STM_vSetMotorSpeedRPM+0xfa>
    }
    else
    {
        G_u8DelayTimeInMs = round((60 * 1.0 / (A_u8MotorSpeedRpm * (360 / STEP_ANGLE_HALF_STEP))) * 1000);
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	aa 27       	eor	r26, r26
    348e:	97 fd       	sbrc	r25, 7
    3490:	a0 95       	com	r26
    3492:	ba 2f       	mov	r27, r26
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	23 e0       	ldi	r18, 0x03	; 3
    34a6:	39 ef       	ldi	r19, 0xF9	; 249
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	55 e4       	ldi	r21, 0x45	; 69
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9c 01       	movw	r18, r24
    34b6:	ad 01       	movw	r20, r26
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	80 e7       	ldi	r24, 0x70	; 112
    34be:	92 e4       	ldi	r25, 0x42	; 66
    34c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	4a e7       	ldi	r20, 0x7A	; 122
    34d2:	54 e4       	ldi	r21, 0x44	; 68
    34d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <round>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	80 93 92 01 	sts	0x0192, r24
    }
}
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <STM_vMoveCycle>:
void STM_vMoveCycle(u8 A_u8Direction)
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	c9 54       	subi	r28, 0x49	; 73
    350a:	d0 40       	sbci	r29, 0x00	; 0
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	fe 01       	movw	r30, r28
    3518:	ed 5b       	subi	r30, 0xBD	; 189
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	80 83       	st	Z, r24
    switch (G_u8StepMode)
    351e:	80 91 15 02 	lds	r24, 0x0215
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	2a 96       	adiw	r28, 0x0a	; 10
    3528:	3f af       	std	Y+63, r19	; 0x3f
    352a:	2e af       	std	Y+62, r18	; 0x3e
    352c:	2a 97       	sbiw	r28, 0x0a	; 10
    352e:	2a 96       	adiw	r28, 0x0a	; 10
    3530:	8e ad       	ldd	r24, Y+62	; 0x3e
    3532:	9f ad       	ldd	r25, Y+63	; 0x3f
    3534:	2a 97       	sbiw	r28, 0x0a	; 10
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	49 f0       	breq	.+18     	; 0x354c <STM_vMoveCycle+0x4c>
    353a:	2a 96       	adiw	r28, 0x0a	; 10
    353c:	ee ad       	ldd	r30, Y+62	; 0x3e
    353e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3540:	2a 97       	sbiw	r28, 0x0a	; 10
    3542:	e1 30       	cpi	r30, 0x01	; 1
    3544:	f1 05       	cpc	r31, r1
    3546:	09 f4       	brne	.+2      	; 0x354a <STM_vMoveCycle+0x4a>
    3548:	d0 c1       	rjmp	.+928    	; 0x38ea <STM_vMoveCycle+0x3ea>
    354a:	8b c3       	rjmp	.+1814   	; 0x3c62 <STM_vMoveCycle+0x762>
    {
    case FULL_STEP:
        switch (A_u8Direction)
    354c:	fe 01       	movw	r30, r28
    354e:	ed 5b       	subi	r30, 0xBD	; 189
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	80 81       	ld	r24, Z
    3554:	28 2f       	mov	r18, r24
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	28 96       	adiw	r28, 0x08	; 8
    355a:	3f af       	std	Y+63, r19	; 0x3f
    355c:	2e af       	std	Y+62, r18	; 0x3e
    355e:	28 97       	sbiw	r28, 0x08	; 8
    3560:	28 96       	adiw	r28, 0x08	; 8
    3562:	8e ad       	ldd	r24, Y+62	; 0x3e
    3564:	9f ad       	ldd	r25, Y+63	; 0x3f
    3566:	28 97       	sbiw	r28, 0x08	; 8
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	09 f4       	brne	.+2      	; 0x356e <STM_vMoveCycle+0x6e>
    356c:	f4 c0       	rjmp	.+488    	; 0x3756 <STM_vMoveCycle+0x256>
    356e:	28 96       	adiw	r28, 0x08	; 8
    3570:	ee ad       	ldd	r30, Y+62	; 0x3e
    3572:	ff ad       	ldd	r31, Y+63	; 0x3f
    3574:	28 97       	sbiw	r28, 0x08	; 8
    3576:	e1 30       	cpi	r30, 0x01	; 1
    3578:	f1 05       	cpc	r31, r1
    357a:	09 f0       	breq	.+2      	; 0x357e <STM_vMoveCycle+0x7e>
    357c:	72 c3       	rjmp	.+1764   	; 0x3c62 <STM_vMoveCycle+0x762>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 4; i++)
    357e:	fe 01       	movw	r30, r28
    3580:	ff 96       	adiw	r30, 0x3f	; 63
    3582:	10 82       	st	Z, r1
    3584:	11 82       	std	Z+1, r1	; 0x01
    3586:	12 82       	std	Z+2, r1	; 0x02
    3588:	13 82       	std	Z+3, r1	; 0x03
    358a:	d8 c0       	rjmp	.+432    	; 0x373c <STM_vMoveCycle+0x23c>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    358c:	fe 01       	movw	r30, r28
    358e:	ff 96       	adiw	r30, 0x3f	; 63
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	a2 81       	ldd	r26, Z+2	; 0x02
    3596:	b3 81       	ldd	r27, Z+3	; 0x03
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	fc 01       	movw	r30, r24
    35a2:	ed 54       	subi	r30, 0x4D	; 77
    35a4:	fe 4f       	sbci	r31, 0xFE	; 254
    35a6:	90 81       	ld	r25, Z
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	60 e0       	ldi	r22, 0x00	; 0
    35ac:	49 2f       	mov	r20, r25
    35ae:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    35b2:	fe 01       	movw	r30, r28
    35b4:	ff 96       	adiw	r30, 0x3f	; 63
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	a2 81       	ldd	r26, Z+2	; 0x02
    35bc:	b3 81       	ldd	r27, Z+3	; 0x03
    35be:	88 0f       	add	r24, r24
    35c0:	99 1f       	adc	r25, r25
    35c2:	88 0f       	add	r24, r24
    35c4:	99 1f       	adc	r25, r25
    35c6:	fc 01       	movw	r30, r24
    35c8:	ec 54       	subi	r30, 0x4C	; 76
    35ca:	fe 4f       	sbci	r31, 0xFE	; 254
    35cc:	90 81       	ld	r25, Z
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	62 e0       	ldi	r22, 0x02	; 2
    35d2:	49 2f       	mov	r20, r25
    35d4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    35d8:	fe 01       	movw	r30, r28
    35da:	ff 96       	adiw	r30, 0x3f	; 63
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	a2 81       	ldd	r26, Z+2	; 0x02
    35e2:	b3 81       	ldd	r27, Z+3	; 0x03
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	88 0f       	add	r24, r24
    35ec:	99 1f       	adc	r25, r25
    35ee:	fc 01       	movw	r30, r24
    35f0:	ed 54       	subi	r30, 0x4D	; 77
    35f2:	fe 4f       	sbci	r31, 0xFE	; 254
    35f4:	90 81       	ld	r25, Z
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	61 e0       	ldi	r22, 0x01	; 1
    35fa:	49 2f       	mov	r20, r25
    35fc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    3600:	fe 01       	movw	r30, r28
    3602:	ff 96       	adiw	r30, 0x3f	; 63
    3604:	80 81       	ld	r24, Z
    3606:	91 81       	ldd	r25, Z+1	; 0x01
    3608:	a2 81       	ldd	r26, Z+2	; 0x02
    360a:	b3 81       	ldd	r27, Z+3	; 0x03
    360c:	88 0f       	add	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	88 0f       	add	r24, r24
    3612:	99 1f       	adc	r25, r25
    3614:	fc 01       	movw	r30, r24
    3616:	ea 54       	subi	r30, 0x4A	; 74
    3618:	fe 4f       	sbci	r31, 0xFE	; 254
    361a:	90 81       	ld	r25, Z
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	63 e0       	ldi	r22, 0x03	; 3
    3620:	49 2f       	mov	r20, r25
    3622:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    3626:	80 91 92 01 	lds	r24, 0x0192
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a0 e0       	ldi	r26, 0x00	; 0
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	8d ab       	std	Y+53, r24	; 0x35
    3640:	9e ab       	std	Y+54, r25	; 0x36
    3642:	af ab       	std	Y+55, r26	; 0x37
    3644:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3646:	6d a9       	ldd	r22, Y+53	; 0x35
    3648:	7e a9       	ldd	r23, Y+54	; 0x36
    364a:	8f a9       	ldd	r24, Y+55	; 0x37
    364c:	98 ad       	ldd	r25, Y+56	; 0x38
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	4a ef       	ldi	r20, 0xFA	; 250
    3654:	54 e4       	ldi	r21, 0x44	; 68
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	89 ab       	std	Y+49, r24	; 0x31
    3660:	9a ab       	std	Y+50, r25	; 0x32
    3662:	ab ab       	std	Y+51, r26	; 0x33
    3664:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3666:	69 a9       	ldd	r22, Y+49	; 0x31
    3668:	7a a9       	ldd	r23, Y+50	; 0x32
    366a:	8b a9       	ldd	r24, Y+51	; 0x33
    366c:	9c a9       	ldd	r25, Y+52	; 0x34
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e8       	ldi	r20, 0x80	; 128
    3674:	5f e3       	ldi	r21, 0x3F	; 63
    3676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367a:	88 23       	and	r24, r24
    367c:	2c f4       	brge	.+10     	; 0x3688 <STM_vMoveCycle+0x188>
		__ticks = 1;
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	98 ab       	std	Y+48, r25	; 0x30
    3684:	8f a7       	std	Y+47, r24	; 0x2f
    3686:	3f c0       	rjmp	.+126    	; 0x3706 <STM_vMoveCycle+0x206>
	else if (__tmp > 65535)
    3688:	69 a9       	ldd	r22, Y+49	; 0x31
    368a:	7a a9       	ldd	r23, Y+50	; 0x32
    368c:	8b a9       	ldd	r24, Y+51	; 0x33
    368e:	9c a9       	ldd	r25, Y+52	; 0x34
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	3f ef       	ldi	r19, 0xFF	; 255
    3694:	4f e7       	ldi	r20, 0x7F	; 127
    3696:	57 e4       	ldi	r21, 0x47	; 71
    3698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369c:	18 16       	cp	r1, r24
    369e:	4c f5       	brge	.+82     	; 0x36f2 <STM_vMoveCycle+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a0:	6d a9       	ldd	r22, Y+53	; 0x35
    36a2:	7e a9       	ldd	r23, Y+54	; 0x36
    36a4:	8f a9       	ldd	r24, Y+55	; 0x37
    36a6:	98 ad       	ldd	r25, Y+56	; 0x38
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e2       	ldi	r20, 0x20	; 32
    36ae:	51 e4       	ldi	r21, 0x41	; 65
    36b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	98 ab       	std	Y+48, r25	; 0x30
    36c6:	8f a7       	std	Y+47, r24	; 0x2f
    36c8:	0f c0       	rjmp	.+30     	; 0x36e8 <STM_vMoveCycle+0x1e8>
    36ca:	88 ec       	ldi	r24, 0xC8	; 200
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	9e a7       	std	Y+46, r25	; 0x2e
    36d0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    36d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <STM_vMoveCycle+0x1d6>
    36da:	9e a7       	std	Y+46, r25	; 0x2e
    36dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36de:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e0:	98 a9       	ldd	r25, Y+48	; 0x30
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	98 ab       	std	Y+48, r25	; 0x30
    36e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ea:	98 a9       	ldd	r25, Y+48	; 0x30
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	69 f7       	brne	.-38     	; 0x36ca <STM_vMoveCycle+0x1ca>
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <STM_vMoveCycle+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f2:	69 a9       	ldd	r22, Y+49	; 0x31
    36f4:	7a a9       	ldd	r23, Y+50	; 0x32
    36f6:	8b a9       	ldd	r24, Y+51	; 0x33
    36f8:	9c a9       	ldd	r25, Y+52	; 0x34
    36fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	98 ab       	std	Y+48, r25	; 0x30
    3704:	8f a7       	std	Y+47, r24	; 0x2f
    3706:	8f a5       	ldd	r24, Y+47	; 0x2f
    3708:	98 a9       	ldd	r25, Y+48	; 0x30
    370a:	9c a7       	std	Y+44, r25	; 0x2c
    370c:	8b a7       	std	Y+43, r24	; 0x2b
    370e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3710:	9c a5       	ldd	r25, Y+44	; 0x2c
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <STM_vMoveCycle+0x212>
    3716:	9c a7       	std	Y+44, r25	; 0x2c
    3718:	8b a7       	std	Y+43, r24	; 0x2b
    {
    case FULL_STEP:
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 4; i++)
    371a:	9e 01       	movw	r18, r28
    371c:	21 5c       	subi	r18, 0xC1	; 193
    371e:	3f 4f       	sbci	r19, 0xFF	; 255
    3720:	fe 01       	movw	r30, r28
    3722:	ff 96       	adiw	r30, 0x3f	; 63
    3724:	80 81       	ld	r24, Z
    3726:	91 81       	ldd	r25, Z+1	; 0x01
    3728:	a2 81       	ldd	r26, Z+2	; 0x02
    372a:	b3 81       	ldd	r27, Z+3	; 0x03
    372c:	01 96       	adiw	r24, 0x01	; 1
    372e:	a1 1d       	adc	r26, r1
    3730:	b1 1d       	adc	r27, r1
    3732:	f9 01       	movw	r30, r18
    3734:	80 83       	st	Z, r24
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	a2 83       	std	Z+2, r26	; 0x02
    373a:	b3 83       	std	Z+3, r27	; 0x03
    373c:	fe 01       	movw	r30, r28
    373e:	ff 96       	adiw	r30, 0x3f	; 63
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	a2 81       	ldd	r26, Z+2	; 0x02
    3746:	b3 81       	ldd	r27, Z+3	; 0x03
    3748:	84 30       	cpi	r24, 0x04	; 4
    374a:	91 05       	cpc	r25, r1
    374c:	a1 05       	cpc	r26, r1
    374e:	b1 05       	cpc	r27, r1
    3750:	08 f4       	brcc	.+2      	; 0x3754 <STM_vMoveCycle+0x254>
    3752:	1c cf       	rjmp	.-456    	; 0x358c <STM_vMoveCycle+0x8c>
    3754:	86 c2       	rjmp	.+1292   	; 0x3c62 <STM_vMoveCycle+0x762>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 3; i >= 0; i--)
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	8e af       	std	Y+62, r24	; 0x3e
    375a:	c2 c0       	rjmp	.+388    	; 0x38e0 <STM_vMoveCycle+0x3e0>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    375c:	8e ad       	ldd	r24, Y+62	; 0x3e
    375e:	99 27       	eor	r25, r25
    3760:	87 fd       	sbrc	r24, 7
    3762:	90 95       	com	r25
    3764:	88 0f       	add	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	88 0f       	add	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	fc 01       	movw	r30, r24
    376e:	ed 54       	subi	r30, 0x4D	; 77
    3770:	fe 4f       	sbci	r31, 0xFE	; 254
    3772:	90 81       	ld	r25, Z
    3774:	80 e0       	ldi	r24, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	49 2f       	mov	r20, r25
    377a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    377e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3780:	99 27       	eor	r25, r25
    3782:	87 fd       	sbrc	r24, 7
    3784:	90 95       	com	r25
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	fc 01       	movw	r30, r24
    3790:	ec 54       	subi	r30, 0x4C	; 76
    3792:	fe 4f       	sbci	r31, 0xFE	; 254
    3794:	90 81       	ld	r25, Z
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	62 e0       	ldi	r22, 0x02	; 2
    379a:	49 2f       	mov	r20, r25
    379c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    37a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    37a2:	99 27       	eor	r25, r25
    37a4:	87 fd       	sbrc	r24, 7
    37a6:	90 95       	com	r25
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	01 96       	adiw	r24, 0x01	; 1
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	fc 01       	movw	r30, r24
    37b4:	ed 54       	subi	r30, 0x4D	; 77
    37b6:	fe 4f       	sbci	r31, 0xFE	; 254
    37b8:	90 81       	ld	r25, Z
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	61 e0       	ldi	r22, 0x01	; 1
    37be:	49 2f       	mov	r20, r25
    37c0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    37c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    37c6:	99 27       	eor	r25, r25
    37c8:	87 fd       	sbrc	r24, 7
    37ca:	90 95       	com	r25
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	fc 01       	movw	r30, r24
    37d6:	ea 54       	subi	r30, 0x4A	; 74
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	90 81       	ld	r25, Z
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	63 e0       	ldi	r22, 0x03	; 3
    37e0:	49 2f       	mov	r20, r25
    37e2:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    37e6:	80 91 92 01 	lds	r24, 0x0192
    37ea:	88 2f       	mov	r24, r24
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	a0 e0       	ldi	r26, 0x00	; 0
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	bc 01       	movw	r22, r24
    37f4:	cd 01       	movw	r24, r26
    37f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	8f a3       	std	Y+39, r24	; 0x27
    3800:	98 a7       	std	Y+40, r25	; 0x28
    3802:	a9 a7       	std	Y+41, r26	; 0x29
    3804:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3806:	6f a1       	ldd	r22, Y+39	; 0x27
    3808:	78 a5       	ldd	r23, Y+40	; 0x28
    380a:	89 a5       	ldd	r24, Y+41	; 0x29
    380c:	9a a5       	ldd	r25, Y+42	; 0x2a
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	4a ef       	ldi	r20, 0xFA	; 250
    3814:	54 e4       	ldi	r21, 0x44	; 68
    3816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	8b a3       	std	Y+35, r24	; 0x23
    3820:	9c a3       	std	Y+36, r25	; 0x24
    3822:	ad a3       	std	Y+37, r26	; 0x25
    3824:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3826:	6b a1       	ldd	r22, Y+35	; 0x23
    3828:	7c a1       	ldd	r23, Y+36	; 0x24
    382a:	8d a1       	ldd	r24, Y+37	; 0x25
    382c:	9e a1       	ldd	r25, Y+38	; 0x26
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e8       	ldi	r20, 0x80	; 128
    3834:	5f e3       	ldi	r21, 0x3F	; 63
    3836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    383a:	88 23       	and	r24, r24
    383c:	2c f4       	brge	.+10     	; 0x3848 <STM_vMoveCycle+0x348>
		__ticks = 1;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9a a3       	std	Y+34, r25	; 0x22
    3844:	89 a3       	std	Y+33, r24	; 0x21
    3846:	3f c0       	rjmp	.+126    	; 0x38c6 <STM_vMoveCycle+0x3c6>
	else if (__tmp > 65535)
    3848:	6b a1       	ldd	r22, Y+35	; 0x23
    384a:	7c a1       	ldd	r23, Y+36	; 0x24
    384c:	8d a1       	ldd	r24, Y+37	; 0x25
    384e:	9e a1       	ldd	r25, Y+38	; 0x26
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	3f ef       	ldi	r19, 0xFF	; 255
    3854:	4f e7       	ldi	r20, 0x7F	; 127
    3856:	57 e4       	ldi	r21, 0x47	; 71
    3858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    385c:	18 16       	cp	r1, r24
    385e:	4c f5       	brge	.+82     	; 0x38b2 <STM_vMoveCycle+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3860:	6f a1       	ldd	r22, Y+39	; 0x27
    3862:	78 a5       	ldd	r23, Y+40	; 0x28
    3864:	89 a5       	ldd	r24, Y+41	; 0x29
    3866:	9a a5       	ldd	r25, Y+42	; 0x2a
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	51 e4       	ldi	r21, 0x41	; 65
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9a a3       	std	Y+34, r25	; 0x22
    3886:	89 a3       	std	Y+33, r24	; 0x21
    3888:	0f c0       	rjmp	.+30     	; 0x38a8 <STM_vMoveCycle+0x3a8>
    388a:	88 ec       	ldi	r24, 0xC8	; 200
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	98 a3       	std	Y+32, r25	; 0x20
    3890:	8f 8f       	std	Y+31, r24	; 0x1f
    3892:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3894:	98 a1       	ldd	r25, Y+32	; 0x20
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <STM_vMoveCycle+0x396>
    389a:	98 a3       	std	Y+32, r25	; 0x20
    389c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389e:	89 a1       	ldd	r24, Y+33	; 0x21
    38a0:	9a a1       	ldd	r25, Y+34	; 0x22
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a8:	89 a1       	ldd	r24, Y+33	; 0x21
    38aa:	9a a1       	ldd	r25, Y+34	; 0x22
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	69 f7       	brne	.-38     	; 0x388a <STM_vMoveCycle+0x38a>
    38b0:	14 c0       	rjmp	.+40     	; 0x38da <STM_vMoveCycle+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b2:	6b a1       	ldd	r22, Y+35	; 0x23
    38b4:	7c a1       	ldd	r23, Y+36	; 0x24
    38b6:	8d a1       	ldd	r24, Y+37	; 0x25
    38b8:	9e a1       	ldd	r25, Y+38	; 0x26
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9a a3       	std	Y+34, r25	; 0x22
    38c4:	89 a3       	std	Y+33, r24	; 0x21
    38c6:	89 a1       	ldd	r24, Y+33	; 0x21
    38c8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ca:	9e 8f       	std	Y+30, r25	; 0x1e
    38cc:	8d 8f       	std	Y+29, r24	; 0x1d
    38ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <STM_vMoveCycle+0x3d2>
    38d6:	9e 8f       	std	Y+30, r25	; 0x1e
    38d8:	8d 8f       	std	Y+29, r24	; 0x1d
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 3; i >= 0; i--)
    38da:	8e ad       	ldd	r24, Y+62	; 0x3e
    38dc:	81 50       	subi	r24, 0x01	; 1
    38de:	8e af       	std	Y+62, r24	; 0x3e
    38e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    38e2:	88 23       	and	r24, r24
    38e4:	0c f0       	brlt	.+2      	; 0x38e8 <STM_vMoveCycle+0x3e8>
    38e6:	3a cf       	rjmp	.-396    	; 0x375c <STM_vMoveCycle+0x25c>
    38e8:	bc c1       	rjmp	.+888    	; 0x3c62 <STM_vMoveCycle+0x762>
        default:
            break;
        }
        break;
    case HALF_STEP:
        switch (A_u8Direction)
    38ea:	fe 01       	movw	r30, r28
    38ec:	ed 5b       	subi	r30, 0xBD	; 189
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	80 81       	ld	r24, Z
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	26 96       	adiw	r28, 0x06	; 6
    38f8:	3f af       	std	Y+63, r19	; 0x3f
    38fa:	2e af       	std	Y+62, r18	; 0x3e
    38fc:	26 97       	sbiw	r28, 0x06	; 6
    38fe:	26 96       	adiw	r28, 0x06	; 6
    3900:	8e ad       	ldd	r24, Y+62	; 0x3e
    3902:	9f ad       	ldd	r25, Y+63	; 0x3f
    3904:	26 97       	sbiw	r28, 0x06	; 6
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	09 f4       	brne	.+2      	; 0x390c <STM_vMoveCycle+0x40c>
    390a:	e2 c0       	rjmp	.+452    	; 0x3ad0 <STM_vMoveCycle+0x5d0>
    390c:	26 96       	adiw	r28, 0x06	; 6
    390e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3910:	ff ad       	ldd	r31, Y+63	; 0x3f
    3912:	26 97       	sbiw	r28, 0x06	; 6
    3914:	e1 30       	cpi	r30, 0x01	; 1
    3916:	f1 05       	cpc	r31, r1
    3918:	09 f0       	breq	.+2      	; 0x391c <STM_vMoveCycle+0x41c>
    391a:	a3 c1       	rjmp	.+838    	; 0x3c62 <STM_vMoveCycle+0x762>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 8; i++)
    391c:	1a ae       	std	Y+58, r1	; 0x3a
    391e:	1b ae       	std	Y+59, r1	; 0x3b
    3920:	1c ae       	std	Y+60, r1	; 0x3c
    3922:	1d ae       	std	Y+61, r1	; 0x3d
    3924:	ca c0       	rjmp	.+404    	; 0x3aba <STM_vMoveCycle+0x5ba>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    3926:	8a ad       	ldd	r24, Y+58	; 0x3a
    3928:	9b ad       	ldd	r25, Y+59	; 0x3b
    392a:	ac ad       	ldd	r26, Y+60	; 0x3c
    392c:	bd ad       	ldd	r27, Y+61	; 0x3d
    392e:	88 0f       	add	r24, r24
    3930:	99 1f       	adc	r25, r25
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	fc 01       	movw	r30, r24
    3938:	ed 56       	subi	r30, 0x6D	; 109
    393a:	fe 4f       	sbci	r31, 0xFE	; 254
    393c:	90 81       	ld	r25, Z
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	49 2f       	mov	r20, r25
    3944:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    3948:	8a ad       	ldd	r24, Y+58	; 0x3a
    394a:	9b ad       	ldd	r25, Y+59	; 0x3b
    394c:	ac ad       	ldd	r26, Y+60	; 0x3c
    394e:	bd ad       	ldd	r27, Y+61	; 0x3d
    3950:	88 0f       	add	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	fc 01       	movw	r30, r24
    395a:	ec 56       	subi	r30, 0x6C	; 108
    395c:	fe 4f       	sbci	r31, 0xFE	; 254
    395e:	90 81       	ld	r25, Z
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	62 e0       	ldi	r22, 0x02	; 2
    3964:	49 2f       	mov	r20, r25
    3966:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    396a:	8a ad       	ldd	r24, Y+58	; 0x3a
    396c:	9b ad       	ldd	r25, Y+59	; 0x3b
    396e:	ac ad       	ldd	r26, Y+60	; 0x3c
    3970:	bd ad       	ldd	r27, Y+61	; 0x3d
    3972:	88 0f       	add	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	01 96       	adiw	r24, 0x01	; 1
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	fc 01       	movw	r30, r24
    397e:	ed 56       	subi	r30, 0x6D	; 109
    3980:	fe 4f       	sbci	r31, 0xFE	; 254
    3982:	90 81       	ld	r25, Z
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	61 e0       	ldi	r22, 0x01	; 1
    3988:	49 2f       	mov	r20, r25
    398a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    398e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3990:	9b ad       	ldd	r25, Y+59	; 0x3b
    3992:	ac ad       	ldd	r26, Y+60	; 0x3c
    3994:	bd ad       	ldd	r27, Y+61	; 0x3d
    3996:	88 0f       	add	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	fc 01       	movw	r30, r24
    39a0:	ea 56       	subi	r30, 0x6A	; 106
    39a2:	fe 4f       	sbci	r31, 0xFE	; 254
    39a4:	90 81       	ld	r25, Z
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	63 e0       	ldi	r22, 0x03	; 3
    39aa:	49 2f       	mov	r20, r25
    39ac:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    39b0:	80 91 92 01 	lds	r24, 0x0192
    39b4:	88 2f       	mov	r24, r24
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	89 8f       	std	Y+25, r24	; 0x19
    39ca:	9a 8f       	std	Y+26, r25	; 0x1a
    39cc:	ab 8f       	std	Y+27, r26	; 0x1b
    39ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d0:	69 8d       	ldd	r22, Y+25	; 0x19
    39d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8d 8b       	std	Y+21, r24	; 0x15
    39ea:	9e 8b       	std	Y+22, r25	; 0x16
    39ec:	af 8b       	std	Y+23, r26	; 0x17
    39ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	40 e8       	ldi	r20, 0x80	; 128
    39fe:	5f e3       	ldi	r21, 0x3F	; 63
    3a00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a04:	88 23       	and	r24, r24
    3a06:	2c f4       	brge	.+10     	; 0x3a12 <STM_vMoveCycle+0x512>
		__ticks = 1;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	3f c0       	rjmp	.+126    	; 0x3a90 <STM_vMoveCycle+0x590>
	else if (__tmp > 65535)
    3a12:	6d 89       	ldd	r22, Y+21	; 0x15
    3a14:	7e 89       	ldd	r23, Y+22	; 0x16
    3a16:	8f 89       	ldd	r24, Y+23	; 0x17
    3a18:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	3f ef       	ldi	r19, 0xFF	; 255
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	57 e4       	ldi	r21, 0x47	; 71
    3a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	4c f5       	brge	.+82     	; 0x3a7c <STM_vMoveCycle+0x57c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	40 e2       	ldi	r20, 0x20	; 32
    3a38:	51 e4       	ldi	r21, 0x41	; 65
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
    3a52:	0f c0       	rjmp	.+30     	; 0x3a72 <STM_vMoveCycle+0x572>
    3a54:	88 ec       	ldi	r24, 0xC8	; 200
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	9a 8b       	std	Y+18, r25	; 0x12
    3a5a:	89 8b       	std	Y+17, r24	; 0x11
    3a5c:	89 89       	ldd	r24, Y+17	; 0x11
    3a5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a60:	01 97       	sbiw	r24, 0x01	; 1
    3a62:	f1 f7       	brne	.-4      	; 0x3a60 <STM_vMoveCycle+0x560>
    3a64:	9a 8b       	std	Y+18, r25	; 0x12
    3a66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	8b 89       	ldd	r24, Y+19	; 0x13
    3a74:	9c 89       	ldd	r25, Y+20	; 0x14
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	69 f7       	brne	.-38     	; 0x3a54 <STM_vMoveCycle+0x554>
    3a7a:	14 c0       	rjmp	.+40     	; 0x3aa4 <STM_vMoveCycle+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a80:	8f 89       	ldd	r24, Y+23	; 0x17
    3a82:	98 8d       	ldd	r25, Y+24	; 0x18
    3a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a88:	dc 01       	movw	r26, r24
    3a8a:	cb 01       	movw	r24, r22
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	9c 89       	ldd	r25, Y+20	; 0x14
    3a94:	98 8b       	std	Y+16, r25	; 0x10
    3a96:	8f 87       	std	Y+15, r24	; 0x0f
    3a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9a:	98 89       	ldd	r25, Y+16	; 0x10
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <STM_vMoveCycle+0x59c>
    3aa0:	98 8b       	std	Y+16, r25	; 0x10
    3aa2:	8f 87       	std	Y+15, r24	; 0x0f
        break;
    case HALF_STEP:
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 8; i++)
    3aa4:	8a ad       	ldd	r24, Y+58	; 0x3a
    3aa6:	9b ad       	ldd	r25, Y+59	; 0x3b
    3aa8:	ac ad       	ldd	r26, Y+60	; 0x3c
    3aaa:	bd ad       	ldd	r27, Y+61	; 0x3d
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	a1 1d       	adc	r26, r1
    3ab0:	b1 1d       	adc	r27, r1
    3ab2:	8a af       	std	Y+58, r24	; 0x3a
    3ab4:	9b af       	std	Y+59, r25	; 0x3b
    3ab6:	ac af       	std	Y+60, r26	; 0x3c
    3ab8:	bd af       	std	Y+61, r27	; 0x3d
    3aba:	8a ad       	ldd	r24, Y+58	; 0x3a
    3abc:	9b ad       	ldd	r25, Y+59	; 0x3b
    3abe:	ac ad       	ldd	r26, Y+60	; 0x3c
    3ac0:	bd ad       	ldd	r27, Y+61	; 0x3d
    3ac2:	88 30       	cpi	r24, 0x08	; 8
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	a1 05       	cpc	r26, r1
    3ac8:	b1 05       	cpc	r27, r1
    3aca:	08 f4       	brcc	.+2      	; 0x3ace <STM_vMoveCycle+0x5ce>
    3acc:	2c cf       	rjmp	.-424    	; 0x3926 <STM_vMoveCycle+0x426>
    3ace:	c9 c0       	rjmp	.+402    	; 0x3c62 <STM_vMoveCycle+0x762>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 7; i >= 0; i--)
    3ad0:	87 e0       	ldi	r24, 0x07	; 7
    3ad2:	89 af       	std	Y+57, r24	; 0x39
    3ad4:	c2 c0       	rjmp	.+388    	; 0x3c5a <STM_vMoveCycle+0x75a>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    3ad6:	89 ad       	ldd	r24, Y+57	; 0x39
    3ad8:	99 27       	eor	r25, r25
    3ada:	87 fd       	sbrc	r24, 7
    3adc:	90 95       	com	r25
    3ade:	88 0f       	add	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	88 0f       	add	r24, r24
    3ae4:	99 1f       	adc	r25, r25
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	ed 56       	subi	r30, 0x6D	; 109
    3aea:	fe 4f       	sbci	r31, 0xFE	; 254
    3aec:	90 81       	ld	r25, Z
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	49 2f       	mov	r20, r25
    3af4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    3af8:	89 ad       	ldd	r24, Y+57	; 0x39
    3afa:	99 27       	eor	r25, r25
    3afc:	87 fd       	sbrc	r24, 7
    3afe:	90 95       	com	r25
    3b00:	88 0f       	add	r24, r24
    3b02:	99 1f       	adc	r25, r25
    3b04:	88 0f       	add	r24, r24
    3b06:	99 1f       	adc	r25, r25
    3b08:	fc 01       	movw	r30, r24
    3b0a:	ec 56       	subi	r30, 0x6C	; 108
    3b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0e:	90 81       	ld	r25, Z
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	62 e0       	ldi	r22, 0x02	; 2
    3b14:	49 2f       	mov	r20, r25
    3b16:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    3b1a:	89 ad       	ldd	r24, Y+57	; 0x39
    3b1c:	99 27       	eor	r25, r25
    3b1e:	87 fd       	sbrc	r24, 7
    3b20:	90 95       	com	r25
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	88 0f       	add	r24, r24
    3b2a:	99 1f       	adc	r25, r25
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	ed 56       	subi	r30, 0x6D	; 109
    3b30:	fe 4f       	sbci	r31, 0xFE	; 254
    3b32:	90 81       	ld	r25, Z
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	61 e0       	ldi	r22, 0x01	; 1
    3b38:	49 2f       	mov	r20, r25
    3b3a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    3b3e:	89 ad       	ldd	r24, Y+57	; 0x39
    3b40:	99 27       	eor	r25, r25
    3b42:	87 fd       	sbrc	r24, 7
    3b44:	90 95       	com	r25
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	fc 01       	movw	r30, r24
    3b50:	ea 56       	subi	r30, 0x6A	; 106
    3b52:	fe 4f       	sbci	r31, 0xFE	; 254
    3b54:	90 81       	ld	r25, Z
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	63 e0       	ldi	r22, 0x03	; 3
    3b5a:	49 2f       	mov	r20, r25
    3b5c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    3b60:	80 91 92 01 	lds	r24, 0x0192
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	a0 e0       	ldi	r26, 0x00	; 0
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	8b 87       	std	Y+11, r24	; 0x0b
    3b7a:	9c 87       	std	Y+12, r25	; 0x0c
    3b7c:	ad 87       	std	Y+13, r26	; 0x0d
    3b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	4a ef       	ldi	r20, 0xFA	; 250
    3b8e:	54 e4       	ldi	r21, 0x44	; 68
    3b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	8f 83       	std	Y+7, r24	; 0x07
    3b9a:	98 87       	std	Y+8, r25	; 0x08
    3b9c:	a9 87       	std	Y+9, r26	; 0x09
    3b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba2:	78 85       	ldd	r23, Y+8	; 0x08
    3ba4:	89 85       	ldd	r24, Y+9	; 0x09
    3ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e8       	ldi	r20, 0x80	; 128
    3bae:	5f e3       	ldi	r21, 0x3F	; 63
    3bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb4:	88 23       	and	r24, r24
    3bb6:	2c f4       	brge	.+10     	; 0x3bc2 <STM_vMoveCycle+0x6c2>
		__ticks = 1;
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	3f c0       	rjmp	.+126    	; 0x3c40 <STM_vMoveCycle+0x740>
	else if (__tmp > 65535)
    3bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc4:	78 85       	ldd	r23, Y+8	; 0x08
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	3f ef       	ldi	r19, 0xFF	; 255
    3bce:	4f e7       	ldi	r20, 0x7F	; 127
    3bd0:	57 e4       	ldi	r21, 0x47	; 71
    3bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd6:	18 16       	cp	r1, r24
    3bd8:	4c f5       	brge	.+82     	; 0x3c2c <STM_vMoveCycle+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e2       	ldi	r20, 0x20	; 32
    3be8:	51 e4       	ldi	r21, 0x41	; 65
    3bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9e 83       	std	Y+6, r25	; 0x06
    3c00:	8d 83       	std	Y+5, r24	; 0x05
    3c02:	0f c0       	rjmp	.+30     	; 0x3c22 <STM_vMoveCycle+0x722>
    3c04:	88 ec       	ldi	r24, 0xC8	; 200
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	9c 83       	std	Y+4, r25	; 0x04
    3c0a:	8b 83       	std	Y+3, r24	; 0x03
    3c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <STM_vMoveCycle+0x710>
    3c14:	9c 83       	std	Y+4, r25	; 0x04
    3c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c18:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	9e 83       	std	Y+6, r25	; 0x06
    3c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c22:	8d 81       	ldd	r24, Y+5	; 0x05
    3c24:	9e 81       	ldd	r25, Y+6	; 0x06
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	69 f7       	brne	.-38     	; 0x3c04 <STM_vMoveCycle+0x704>
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <STM_vMoveCycle+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	78 85       	ldd	r23, Y+8	; 0x08
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	9e 81       	ldd	r25, Y+6	; 0x06
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <STM_vMoveCycle+0x74c>
    3c50:	9a 83       	std	Y+2, r25	; 0x02
    3c52:	89 83       	std	Y+1, r24	; 0x01
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 7; i >= 0; i--)
    3c54:	89 ad       	ldd	r24, Y+57	; 0x39
    3c56:	81 50       	subi	r24, 0x01	; 1
    3c58:	89 af       	std	Y+57, r24	; 0x39
    3c5a:	89 ad       	ldd	r24, Y+57	; 0x39
    3c5c:	88 23       	and	r24, r24
    3c5e:	0c f0       	brlt	.+2      	; 0x3c62 <STM_vMoveCycle+0x762>
    3c60:	3a cf       	rjmp	.-396    	; 0x3ad6 <STM_vMoveCycle+0x5d6>
        }
        break;
    default:
        break;
    }
}
    3c62:	c7 5b       	subi	r28, 0xB7	; 183
    3c64:	df 4f       	sbci	r29, 0xFF	; 255
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <STM_vMove>:

void STM_vMove(u8 A_u8Direction, u32 A_u8Angle)
{
    3c76:	0f 93       	push	r16
    3c78:	1f 93       	push	r17
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	c1 56       	subi	r28, 0x61	; 97
    3c84:	d0 40       	sbci	r29, 0x00	; 0
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	fe 01       	movw	r30, r28
    3c92:	e9 5a       	subi	r30, 0xA9	; 169
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 83       	st	Z, r24
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e8 5a       	subi	r30, 0xA8	; 168
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	40 83       	st	Z, r20
    3ca0:	51 83       	std	Z+1, r21	; 0x01
    3ca2:	62 83       	std	Z+2, r22	; 0x02
    3ca4:	73 83       	std	Z+3, r23	; 0x03
    u32 L_u8NumberSteps;
    switch (G_u8StepMode)
    3ca6:	80 91 15 02 	lds	r24, 0x0215
    3caa:	28 2f       	mov	r18, r24
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	a2 96       	adiw	r28, 0x22	; 34
    3cb0:	3f af       	std	Y+63, r19	; 0x3f
    3cb2:	2e af       	std	Y+62, r18	; 0x3e
    3cb4:	a2 97       	sbiw	r28, 0x22	; 34
    3cb6:	a2 96       	adiw	r28, 0x22	; 34
    3cb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cba:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cbc:	a2 97       	sbiw	r28, 0x22	; 34
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	49 f0       	breq	.+18     	; 0x3cd4 <STM_vMove+0x5e>
    3cc2:	a2 96       	adiw	r28, 0x22	; 34
    3cc4:	ee ad       	ldd	r30, Y+62	; 0x3e
    3cc6:	ff ad       	ldd	r31, Y+63	; 0x3f
    3cc8:	a2 97       	sbiw	r28, 0x22	; 34
    3cca:	e1 30       	cpi	r30, 0x01	; 1
    3ccc:	f1 05       	cpc	r31, r1
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <STM_vMove+0x5c>
    3cd0:	76 c2       	rjmp	.+1260   	; 0x41be <STM_vMove+0x548>
    3cd2:	bc c4       	rjmp	.+2424   	; 0x464c <STM_vMove+0x9d6>
    {
    case FULL_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_FULL_STEP * 4)));
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e8 5a       	subi	r30, 0xA8	; 168
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	bc 01       	movw	r22, r24
    3cec:	cd 01       	movw	r24, r26
    3cee:	2a ee       	ldi	r18, 0xEA	; 234
    3cf0:	34 e0       	ldi	r19, 0x04	; 4
    3cf2:	44 e3       	ldi	r20, 0x34	; 52
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	bc 01       	movw	r22, r24
    3d00:	cd 01       	movw	r24, r26
    3d02:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <round>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	8e 01       	movw	r16, r28
    3d0c:	0d 5a       	subi	r16, 0xAD	; 173
    3d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d10:	bc 01       	movw	r22, r24
    3d12:	cd 01       	movw	r24, r26
    3d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	f8 01       	movw	r30, r16
    3d1e:	80 83       	st	Z, r24
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	a2 83       	std	Z+2, r26	; 0x02
    3d24:	b3 83       	std	Z+3, r27	; 0x03
        switch (A_u8Direction)
    3d26:	fe 01       	movw	r30, r28
    3d28:	e9 5a       	subi	r30, 0xA9	; 169
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 81       	ld	r24, Z
    3d2e:	28 2f       	mov	r18, r24
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	a0 96       	adiw	r28, 0x20	; 32
    3d34:	3f af       	std	Y+63, r19	; 0x3f
    3d36:	2e af       	std	Y+62, r18	; 0x3e
    3d38:	a0 97       	sbiw	r28, 0x20	; 32
    3d3a:	a0 96       	adiw	r28, 0x20	; 32
    3d3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d40:	a0 97       	sbiw	r28, 0x20	; 32
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <STM_vMove+0xd2>
    3d46:	2a c1       	rjmp	.+596    	; 0x3f9c <STM_vMove+0x326>
    3d48:	a0 96       	adiw	r28, 0x20	; 32
    3d4a:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d4c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d4e:	a0 97       	sbiw	r28, 0x20	; 32
    3d50:	e1 30       	cpi	r30, 0x01	; 1
    3d52:	f1 05       	cpc	r31, r1
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <STM_vMove+0xe2>
    3d56:	7a c4       	rjmp	.+2292   	; 0x464c <STM_vMove+0x9d6>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e1 5b       	subi	r30, 0xB1	; 177
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	10 82       	st	Z, r1
    3d60:	11 82       	std	Z+1, r1	; 0x01
    3d62:	12 82       	std	Z+2, r1	; 0x02
    3d64:	13 82       	std	Z+3, r1	; 0x03
    3d66:	04 c1       	rjmp	.+520    	; 0x3f70 <STM_vMove+0x2fa>
            {
                for (u32 i = 0; i < 4; i++)
    3d68:	fe 01       	movw	r30, r28
    3d6a:	e5 5b       	subi	r30, 0xB5	; 181
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	10 82       	st	Z, r1
    3d70:	11 82       	std	Z+1, r1	; 0x01
    3d72:	12 82       	std	Z+2, r1	; 0x02
    3d74:	13 82       	std	Z+3, r1	; 0x03
    3d76:	dd c0       	rjmp	.+442    	; 0x3f32 <STM_vMove+0x2bc>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e5 5b       	subi	r30, 0xB5	; 181
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	a2 81       	ldd	r26, Z+2	; 0x02
    3d84:	b3 81       	ldd	r27, Z+3	; 0x03
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	fc 01       	movw	r30, r24
    3d90:	ed 54       	subi	r30, 0x4D	; 77
    3d92:	fe 4f       	sbci	r31, 0xFE	; 254
    3d94:	90 81       	ld	r25, Z
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	49 2f       	mov	r20, r25
    3d9c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    3da0:	fe 01       	movw	r30, r28
    3da2:	e5 5b       	subi	r30, 0xB5	; 181
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	a2 81       	ldd	r26, Z+2	; 0x02
    3dac:	b3 81       	ldd	r27, Z+3	; 0x03
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	88 0f       	add	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	fc 01       	movw	r30, r24
    3db8:	ec 54       	subi	r30, 0x4C	; 76
    3dba:	fe 4f       	sbci	r31, 0xFE	; 254
    3dbc:	90 81       	ld	r25, Z
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	62 e0       	ldi	r22, 0x02	; 2
    3dc2:	49 2f       	mov	r20, r25
    3dc4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    3dc8:	fe 01       	movw	r30, r28
    3dca:	e5 5b       	subi	r30, 0xB5	; 181
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	a2 81       	ldd	r26, Z+2	; 0x02
    3dd4:	b3 81       	ldd	r27, Z+3	; 0x03
    3dd6:	88 0f       	add	r24, r24
    3dd8:	99 1f       	adc	r25, r25
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	fc 01       	movw	r30, r24
    3de2:	ed 54       	subi	r30, 0x4D	; 77
    3de4:	fe 4f       	sbci	r31, 0xFE	; 254
    3de6:	90 81       	ld	r25, Z
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	61 e0       	ldi	r22, 0x01	; 1
    3dec:	49 2f       	mov	r20, r25
    3dee:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    3df2:	fe 01       	movw	r30, r28
    3df4:	e5 5b       	subi	r30, 0xB5	; 181
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	a2 81       	ldd	r26, Z+2	; 0x02
    3dfe:	b3 81       	ldd	r27, Z+3	; 0x03
    3e00:	88 0f       	add	r24, r24
    3e02:	99 1f       	adc	r25, r25
    3e04:	88 0f       	add	r24, r24
    3e06:	99 1f       	adc	r25, r25
    3e08:	fc 01       	movw	r30, r24
    3e0a:	ea 54       	subi	r30, 0x4A	; 74
    3e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e0e:	90 81       	ld	r25, Z
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	63 e0       	ldi	r22, 0x03	; 3
    3e14:	49 2f       	mov	r20, r25
    3e16:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    3e1a:	80 91 92 01 	lds	r24, 0x0192
    3e1e:	88 2f       	mov	r24, r24
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	a0 e0       	ldi	r26, 0x00	; 0
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	bc 01       	movw	r22, r24
    3e28:	cd 01       	movw	r24, r26
    3e2a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	8d ab       	std	Y+53, r24	; 0x35
    3e34:	9e ab       	std	Y+54, r25	; 0x36
    3e36:	af ab       	std	Y+55, r26	; 0x37
    3e38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    3e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    3e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    3e40:	98 ad       	ldd	r25, Y+56	; 0x38
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	4a ef       	ldi	r20, 0xFA	; 250
    3e48:	54 e4       	ldi	r21, 0x44	; 68
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	89 ab       	std	Y+49, r24	; 0x31
    3e54:	9a ab       	std	Y+50, r25	; 0x32
    3e56:	ab ab       	std	Y+51, r26	; 0x33
    3e58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    3e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    3e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    3e60:	9c a9       	ldd	r25, Y+52	; 0x34
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e8       	ldi	r20, 0x80	; 128
    3e68:	5f e3       	ldi	r21, 0x3F	; 63
    3e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e6e:	88 23       	and	r24, r24
    3e70:	2c f4       	brge	.+10     	; 0x3e7c <STM_vMove+0x206>
		__ticks = 1;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	98 ab       	std	Y+48, r25	; 0x30
    3e78:	8f a7       	std	Y+47, r24	; 0x2f
    3e7a:	3f c0       	rjmp	.+126    	; 0x3efa <STM_vMove+0x284>
	else if (__tmp > 65535)
    3e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e80:	8b a9       	ldd	r24, Y+51	; 0x33
    3e82:	9c a9       	ldd	r25, Y+52	; 0x34
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	3f ef       	ldi	r19, 0xFF	; 255
    3e88:	4f e7       	ldi	r20, 0x7F	; 127
    3e8a:	57 e4       	ldi	r21, 0x47	; 71
    3e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e90:	18 16       	cp	r1, r24
    3e92:	4c f5       	brge	.+82     	; 0x3ee6 <STM_vMove+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e94:	6d a9       	ldd	r22, Y+53	; 0x35
    3e96:	7e a9       	ldd	r23, Y+54	; 0x36
    3e98:	8f a9       	ldd	r24, Y+55	; 0x37
    3e9a:	98 ad       	ldd	r25, Y+56	; 0x38
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e2       	ldi	r20, 0x20	; 32
    3ea2:	51 e4       	ldi	r21, 0x41	; 65
    3ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	98 ab       	std	Y+48, r25	; 0x30
    3eba:	8f a7       	std	Y+47, r24	; 0x2f
    3ebc:	0f c0       	rjmp	.+30     	; 0x3edc <STM_vMove+0x266>
    3ebe:	88 ec       	ldi	r24, 0xC8	; 200
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	9e a7       	std	Y+46, r25	; 0x2e
    3ec4:	8d a7       	std	Y+45, r24	; 0x2d
    3ec6:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ec8:	9e a5       	ldd	r25, Y+46	; 0x2e
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <STM_vMove+0x254>
    3ece:	9e a7       	std	Y+46, r25	; 0x2e
    3ed0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ed4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ed6:	01 97       	sbiw	r24, 0x01	; 1
    3ed8:	98 ab       	std	Y+48, r25	; 0x30
    3eda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ede:	98 a9       	ldd	r25, Y+48	; 0x30
    3ee0:	00 97       	sbiw	r24, 0x00	; 0
    3ee2:	69 f7       	brne	.-38     	; 0x3ebe <STM_vMove+0x248>
    3ee4:	14 c0       	rjmp	.+40     	; 0x3f0e <STM_vMove+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    3eea:	8b a9       	ldd	r24, Y+51	; 0x33
    3eec:	9c a9       	ldd	r25, Y+52	; 0x34
    3eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	98 ab       	std	Y+48, r25	; 0x30
    3ef8:	8f a7       	std	Y+47, r24	; 0x2f
    3efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3efc:	98 a9       	ldd	r25, Y+48	; 0x30
    3efe:	9c a7       	std	Y+44, r25	; 0x2c
    3f00:	8b a7       	std	Y+43, r24	; 0x2b
    3f02:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f04:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <STM_vMove+0x290>
    3f0a:	9c a7       	std	Y+44, r25	; 0x2c
    3f0c:	8b a7       	std	Y+43, r24	; 0x2b
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (u32 i = 0; i < 4; i++)
    3f0e:	9e 01       	movw	r18, r28
    3f10:	25 5b       	subi	r18, 0xB5	; 181
    3f12:	3f 4f       	sbci	r19, 0xFF	; 255
    3f14:	fe 01       	movw	r30, r28
    3f16:	e5 5b       	subi	r30, 0xB5	; 181
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 81       	ld	r24, Z
    3f1c:	91 81       	ldd	r25, Z+1	; 0x01
    3f1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3f20:	b3 81       	ldd	r27, Z+3	; 0x03
    3f22:	01 96       	adiw	r24, 0x01	; 1
    3f24:	a1 1d       	adc	r26, r1
    3f26:	b1 1d       	adc	r27, r1
    3f28:	f9 01       	movw	r30, r18
    3f2a:	80 83       	st	Z, r24
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	a2 83       	std	Z+2, r26	; 0x02
    3f30:	b3 83       	std	Z+3, r27	; 0x03
    3f32:	fe 01       	movw	r30, r28
    3f34:	e5 5b       	subi	r30, 0xB5	; 181
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 81       	ld	r24, Z
    3f3a:	91 81       	ldd	r25, Z+1	; 0x01
    3f3c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f3e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f40:	84 30       	cpi	r24, 0x04	; 4
    3f42:	91 05       	cpc	r25, r1
    3f44:	a1 05       	cpc	r26, r1
    3f46:	b1 05       	cpc	r27, r1
    3f48:	08 f4       	brcc	.+2      	; 0x3f4c <STM_vMove+0x2d6>
    3f4a:	16 cf       	rjmp	.-468    	; 0x3d78 <STM_vMove+0x102>
    case FULL_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_FULL_STEP * 4)));
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3f4c:	9e 01       	movw	r18, r28
    3f4e:	21 5b       	subi	r18, 0xB1	; 177
    3f50:	3f 4f       	sbci	r19, 0xFF	; 255
    3f52:	fe 01       	movw	r30, r28
    3f54:	e1 5b       	subi	r30, 0xB1	; 177
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	91 81       	ldd	r25, Z+1	; 0x01
    3f5c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f5e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f60:	01 96       	adiw	r24, 0x01	; 1
    3f62:	a1 1d       	adc	r26, r1
    3f64:	b1 1d       	adc	r27, r1
    3f66:	f9 01       	movw	r30, r18
    3f68:	80 83       	st	Z, r24
    3f6a:	91 83       	std	Z+1, r25	; 0x01
    3f6c:	a2 83       	std	Z+2, r26	; 0x02
    3f6e:	b3 83       	std	Z+3, r27	; 0x03
    3f70:	fe 01       	movw	r30, r28
    3f72:	e1 5b       	subi	r30, 0xB1	; 177
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	de 01       	movw	r26, r28
    3f78:	ad 5a       	subi	r26, 0xAD	; 173
    3f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7c:	20 81       	ld	r18, Z
    3f7e:	31 81       	ldd	r19, Z+1	; 0x01
    3f80:	42 81       	ldd	r20, Z+2	; 0x02
    3f82:	53 81       	ldd	r21, Z+3	; 0x03
    3f84:	8d 91       	ld	r24, X+
    3f86:	9d 91       	ld	r25, X+
    3f88:	0d 90       	ld	r0, X+
    3f8a:	bc 91       	ld	r27, X
    3f8c:	a0 2d       	mov	r26, r0
    3f8e:	28 17       	cp	r18, r24
    3f90:	39 07       	cpc	r19, r25
    3f92:	4a 07       	cpc	r20, r26
    3f94:	5b 07       	cpc	r21, r27
    3f96:	08 f4       	brcc	.+2      	; 0x3f9a <STM_vMove+0x324>
    3f98:	e7 ce       	rjmp	.-562    	; 0x3d68 <STM_vMove+0xf2>
    3f9a:	58 c3       	rjmp	.+1712   	; 0x464c <STM_vMove+0x9d6>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e9 5b       	subi	r30, 0xB9	; 185
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	10 82       	st	Z, r1
    3fa4:	11 82       	std	Z+1, r1	; 0x01
    3fa6:	12 82       	std	Z+2, r1	; 0x02
    3fa8:	13 82       	std	Z+3, r1	; 0x03
    3faa:	f3 c0       	rjmp	.+486    	; 0x4192 <STM_vMove+0x51c>
            {
                for (s8 i = 3; i >= 0; i--)
    3fac:	fe 01       	movw	r30, r28
    3fae:	ea 5b       	subi	r30, 0xBA	; 186
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	83 e0       	ldi	r24, 0x03	; 3
    3fb4:	80 83       	st	Z, r24
    3fb6:	d4 c0       	rjmp	.+424    	; 0x4160 <STM_vMove+0x4ea>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    3fb8:	fe 01       	movw	r30, r28
    3fba:	ea 5b       	subi	r30, 0xBA	; 186
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	80 81       	ld	r24, Z
    3fc0:	99 27       	eor	r25, r25
    3fc2:	87 fd       	sbrc	r24, 7
    3fc4:	90 95       	com	r25
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	88 0f       	add	r24, r24
    3fcc:	99 1f       	adc	r25, r25
    3fce:	fc 01       	movw	r30, r24
    3fd0:	ed 54       	subi	r30, 0x4D	; 77
    3fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd4:	90 81       	ld	r25, Z
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	49 2f       	mov	r20, r25
    3fdc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	ea 5b       	subi	r30, 0xBA	; 186
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	80 81       	ld	r24, Z
    3fe8:	99 27       	eor	r25, r25
    3fea:	87 fd       	sbrc	r24, 7
    3fec:	90 95       	com	r25
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	ec 54       	subi	r30, 0x4C	; 76
    3ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffc:	90 81       	ld	r25, Z
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	62 e0       	ldi	r22, 0x02	; 2
    4002:	49 2f       	mov	r20, r25
    4004:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    4008:	fe 01       	movw	r30, r28
    400a:	ea 5b       	subi	r30, 0xBA	; 186
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	80 81       	ld	r24, Z
    4010:	99 27       	eor	r25, r25
    4012:	87 fd       	sbrc	r24, 7
    4014:	90 95       	com	r25
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	01 96       	adiw	r24, 0x01	; 1
    401c:	88 0f       	add	r24, r24
    401e:	99 1f       	adc	r25, r25
    4020:	fc 01       	movw	r30, r24
    4022:	ed 54       	subi	r30, 0x4D	; 77
    4024:	fe 4f       	sbci	r31, 0xFE	; 254
    4026:	90 81       	ld	r25, Z
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	61 e0       	ldi	r22, 0x01	; 1
    402c:	49 2f       	mov	r20, r25
    402e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    4032:	fe 01       	movw	r30, r28
    4034:	ea 5b       	subi	r30, 0xBA	; 186
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	80 81       	ld	r24, Z
    403a:	99 27       	eor	r25, r25
    403c:	87 fd       	sbrc	r24, 7
    403e:	90 95       	com	r25
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	88 0f       	add	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	fc 01       	movw	r30, r24
    404a:	ea 54       	subi	r30, 0x4A	; 74
    404c:	fe 4f       	sbci	r31, 0xFE	; 254
    404e:	90 81       	ld	r25, Z
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	63 e0       	ldi	r22, 0x03	; 3
    4054:	49 2f       	mov	r20, r25
    4056:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    405a:	80 91 92 01 	lds	r24, 0x0192
    405e:	88 2f       	mov	r24, r24
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	a0 e0       	ldi	r26, 0x00	; 0
    4064:	b0 e0       	ldi	r27, 0x00	; 0
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	8f a3       	std	Y+39, r24	; 0x27
    4074:	98 a7       	std	Y+40, r25	; 0x28
    4076:	a9 a7       	std	Y+41, r26	; 0x29
    4078:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    407a:	6f a1       	ldd	r22, Y+39	; 0x27
    407c:	78 a5       	ldd	r23, Y+40	; 0x28
    407e:	89 a5       	ldd	r24, Y+41	; 0x29
    4080:	9a a5       	ldd	r25, Y+42	; 0x2a
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	4a ef       	ldi	r20, 0xFA	; 250
    4088:	54 e4       	ldi	r21, 0x44	; 68
    408a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408e:	dc 01       	movw	r26, r24
    4090:	cb 01       	movw	r24, r22
    4092:	8b a3       	std	Y+35, r24	; 0x23
    4094:	9c a3       	std	Y+36, r25	; 0x24
    4096:	ad a3       	std	Y+37, r26	; 0x25
    4098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    409a:	6b a1       	ldd	r22, Y+35	; 0x23
    409c:	7c a1       	ldd	r23, Y+36	; 0x24
    409e:	8d a1       	ldd	r24, Y+37	; 0x25
    40a0:	9e a1       	ldd	r25, Y+38	; 0x26
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	40 e8       	ldi	r20, 0x80	; 128
    40a8:	5f e3       	ldi	r21, 0x3F	; 63
    40aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40ae:	88 23       	and	r24, r24
    40b0:	2c f4       	brge	.+10     	; 0x40bc <STM_vMove+0x446>
		__ticks = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	9a a3       	std	Y+34, r25	; 0x22
    40b8:	89 a3       	std	Y+33, r24	; 0x21
    40ba:	3f c0       	rjmp	.+126    	; 0x413a <STM_vMove+0x4c4>
	else if (__tmp > 65535)
    40bc:	6b a1       	ldd	r22, Y+35	; 0x23
    40be:	7c a1       	ldd	r23, Y+36	; 0x24
    40c0:	8d a1       	ldd	r24, Y+37	; 0x25
    40c2:	9e a1       	ldd	r25, Y+38	; 0x26
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	3f ef       	ldi	r19, 0xFF	; 255
    40c8:	4f e7       	ldi	r20, 0x7F	; 127
    40ca:	57 e4       	ldi	r21, 0x47	; 71
    40cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d0:	18 16       	cp	r1, r24
    40d2:	4c f5       	brge	.+82     	; 0x4126 <STM_vMove+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d4:	6f a1       	ldd	r22, Y+39	; 0x27
    40d6:	78 a5       	ldd	r23, Y+40	; 0x28
    40d8:	89 a5       	ldd	r24, Y+41	; 0x29
    40da:	9a a5       	ldd	r25, Y+42	; 0x2a
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e2       	ldi	r20, 0x20	; 32
    40e2:	51 e4       	ldi	r21, 0x41	; 65
    40e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	bc 01       	movw	r22, r24
    40ee:	cd 01       	movw	r24, r26
    40f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	9a a3       	std	Y+34, r25	; 0x22
    40fa:	89 a3       	std	Y+33, r24	; 0x21
    40fc:	0f c0       	rjmp	.+30     	; 0x411c <STM_vMove+0x4a6>
    40fe:	88 ec       	ldi	r24, 0xC8	; 200
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	98 a3       	std	Y+32, r25	; 0x20
    4104:	8f 8f       	std	Y+31, r24	; 0x1f
    4106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4108:	98 a1       	ldd	r25, Y+32	; 0x20
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <STM_vMove+0x494>
    410e:	98 a3       	std	Y+32, r25	; 0x20
    4110:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4112:	89 a1       	ldd	r24, Y+33	; 0x21
    4114:	9a a1       	ldd	r25, Y+34	; 0x22
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	9a a3       	std	Y+34, r25	; 0x22
    411a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411c:	89 a1       	ldd	r24, Y+33	; 0x21
    411e:	9a a1       	ldd	r25, Y+34	; 0x22
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	69 f7       	brne	.-38     	; 0x40fe <STM_vMove+0x488>
    4124:	14 c0       	rjmp	.+40     	; 0x414e <STM_vMove+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4126:	6b a1       	ldd	r22, Y+35	; 0x23
    4128:	7c a1       	ldd	r23, Y+36	; 0x24
    412a:	8d a1       	ldd	r24, Y+37	; 0x25
    412c:	9e a1       	ldd	r25, Y+38	; 0x26
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	9a a3       	std	Y+34, r25	; 0x22
    4138:	89 a3       	std	Y+33, r24	; 0x21
    413a:	89 a1       	ldd	r24, Y+33	; 0x21
    413c:	9a a1       	ldd	r25, Y+34	; 0x22
    413e:	9e 8f       	std	Y+30, r25	; 0x1e
    4140:	8d 8f       	std	Y+29, r24	; 0x1d
    4142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4144:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4146:	01 97       	sbiw	r24, 0x01	; 1
    4148:	f1 f7       	brne	.-4      	; 0x4146 <STM_vMove+0x4d0>
    414a:	9e 8f       	std	Y+30, r25	; 0x1e
    414c:	8d 8f       	std	Y+29, r24	; 0x1d
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (s8 i = 3; i >= 0; i--)
    414e:	de 01       	movw	r26, r28
    4150:	aa 5b       	subi	r26, 0xBA	; 186
    4152:	bf 4f       	sbci	r27, 0xFF	; 255
    4154:	fe 01       	movw	r30, r28
    4156:	ea 5b       	subi	r30, 0xBA	; 186
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	80 81       	ld	r24, Z
    415c:	81 50       	subi	r24, 0x01	; 1
    415e:	8c 93       	st	X, r24
    4160:	fe 01       	movw	r30, r28
    4162:	ea 5b       	subi	r30, 0xBA	; 186
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	80 81       	ld	r24, Z
    4168:	88 23       	and	r24, r24
    416a:	0c f0       	brlt	.+2      	; 0x416e <STM_vMove+0x4f8>
    416c:	25 cf       	rjmp	.-438    	; 0x3fb8 <STM_vMove+0x342>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    416e:	9e 01       	movw	r18, r28
    4170:	29 5b       	subi	r18, 0xB9	; 185
    4172:	3f 4f       	sbci	r19, 0xFF	; 255
    4174:	fe 01       	movw	r30, r28
    4176:	e9 5b       	subi	r30, 0xB9	; 185
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 81       	ld	r24, Z
    417c:	91 81       	ldd	r25, Z+1	; 0x01
    417e:	a2 81       	ldd	r26, Z+2	; 0x02
    4180:	b3 81       	ldd	r27, Z+3	; 0x03
    4182:	01 96       	adiw	r24, 0x01	; 1
    4184:	a1 1d       	adc	r26, r1
    4186:	b1 1d       	adc	r27, r1
    4188:	f9 01       	movw	r30, r18
    418a:	80 83       	st	Z, r24
    418c:	91 83       	std	Z+1, r25	; 0x01
    418e:	a2 83       	std	Z+2, r26	; 0x02
    4190:	b3 83       	std	Z+3, r27	; 0x03
    4192:	fe 01       	movw	r30, r28
    4194:	e9 5b       	subi	r30, 0xB9	; 185
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	de 01       	movw	r26, r28
    419a:	ad 5a       	subi	r26, 0xAD	; 173
    419c:	bf 4f       	sbci	r27, 0xFF	; 255
    419e:	20 81       	ld	r18, Z
    41a0:	31 81       	ldd	r19, Z+1	; 0x01
    41a2:	42 81       	ldd	r20, Z+2	; 0x02
    41a4:	53 81       	ldd	r21, Z+3	; 0x03
    41a6:	8d 91       	ld	r24, X+
    41a8:	9d 91       	ld	r25, X+
    41aa:	0d 90       	ld	r0, X+
    41ac:	bc 91       	ld	r27, X
    41ae:	a0 2d       	mov	r26, r0
    41b0:	28 17       	cp	r18, r24
    41b2:	39 07       	cpc	r19, r25
    41b4:	4a 07       	cpc	r20, r26
    41b6:	5b 07       	cpc	r21, r27
    41b8:	08 f4       	brcc	.+2      	; 0x41bc <STM_vMove+0x546>
    41ba:	f8 ce       	rjmp	.-528    	; 0x3fac <STM_vMove+0x336>
    41bc:	47 c2       	rjmp	.+1166   	; 0x464c <STM_vMove+0x9d6>
        default:
            break;
        }
        break;
    case HALF_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_HALF_STEP * 4)));
    41be:	fe 01       	movw	r30, r28
    41c0:	e8 5a       	subi	r30, 0xA8	; 168
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	60 81       	ld	r22, Z
    41c6:	71 81       	ldd	r23, Z+1	; 0x01
    41c8:	82 81       	ldd	r24, Z+2	; 0x02
    41ca:	93 81       	ldd	r25, Z+3	; 0x03
    41cc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	bc 01       	movw	r22, r24
    41d6:	cd 01       	movw	r24, r26
    41d8:	2a ee       	ldi	r18, 0xEA	; 234
    41da:	34 e0       	ldi	r19, 0x04	; 4
    41dc:	44 eb       	ldi	r20, 0xB4	; 180
    41de:	5e e3       	ldi	r21, 0x3E	; 62
    41e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	bc 01       	movw	r22, r24
    41ea:	cd 01       	movw	r24, r26
    41ec:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <round>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	8e 01       	movw	r16, r28
    41f6:	0d 5a       	subi	r16, 0xAD	; 173
    41f8:	1f 4f       	sbci	r17, 0xFF	; 255
    41fa:	bc 01       	movw	r22, r24
    41fc:	cd 01       	movw	r24, r26
    41fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	f8 01       	movw	r30, r16
    4208:	80 83       	st	Z, r24
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	a2 83       	std	Z+2, r26	; 0x02
    420e:	b3 83       	std	Z+3, r27	; 0x03
        switch (A_u8Direction)
    4210:	fe 01       	movw	r30, r28
    4212:	e9 5a       	subi	r30, 0xA9	; 169
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	28 2f       	mov	r18, r24
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	6e 96       	adiw	r28, 0x1e	; 30
    421e:	3f af       	std	Y+63, r19	; 0x3f
    4220:	2e af       	std	Y+62, r18	; 0x3e
    4222:	6e 97       	sbiw	r28, 0x1e	; 30
    4224:	6e 96       	adiw	r28, 0x1e	; 30
    4226:	8e ad       	ldd	r24, Y+62	; 0x3e
    4228:	9f ad       	ldd	r25, Y+63	; 0x3f
    422a:	6e 97       	sbiw	r28, 0x1e	; 30
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	09 f4       	brne	.+2      	; 0x4232 <STM_vMove+0x5bc>
    4230:	23 c1       	rjmp	.+582    	; 0x4478 <STM_vMove+0x802>
    4232:	6e 96       	adiw	r28, 0x1e	; 30
    4234:	ee ad       	ldd	r30, Y+62	; 0x3e
    4236:	ff ad       	ldd	r31, Y+63	; 0x3f
    4238:	6e 97       	sbiw	r28, 0x1e	; 30
    423a:	e1 30       	cpi	r30, 0x01	; 1
    423c:	f1 05       	cpc	r31, r1
    423e:	09 f0       	breq	.+2      	; 0x4242 <STM_vMove+0x5cc>
    4240:	05 c2       	rjmp	.+1034   	; 0x464c <STM_vMove+0x9d6>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    4242:	fe 01       	movw	r30, r28
    4244:	ee 5b       	subi	r30, 0xBE	; 190
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	10 82       	st	Z, r1
    424a:	11 82       	std	Z+1, r1	; 0x01
    424c:	12 82       	std	Z+2, r1	; 0x02
    424e:	13 82       	std	Z+3, r1	; 0x03
    4250:	fd c0       	rjmp	.+506    	; 0x444c <STM_vMove+0x7d6>
            {
                for (u32 i = 0; i < 8; i++)
    4252:	fe 01       	movw	r30, r28
    4254:	fe 96       	adiw	r30, 0x3e	; 62
    4256:	10 82       	st	Z, r1
    4258:	11 82       	std	Z+1, r1	; 0x01
    425a:	12 82       	std	Z+2, r1	; 0x02
    425c:	13 82       	std	Z+3, r1	; 0x03
    425e:	d8 c0       	rjmp	.+432    	; 0x4410 <STM_vMove+0x79a>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    4260:	fe 01       	movw	r30, r28
    4262:	fe 96       	adiw	r30, 0x3e	; 62
    4264:	80 81       	ld	r24, Z
    4266:	91 81       	ldd	r25, Z+1	; 0x01
    4268:	a2 81       	ldd	r26, Z+2	; 0x02
    426a:	b3 81       	ldd	r27, Z+3	; 0x03
    426c:	88 0f       	add	r24, r24
    426e:	99 1f       	adc	r25, r25
    4270:	88 0f       	add	r24, r24
    4272:	99 1f       	adc	r25, r25
    4274:	fc 01       	movw	r30, r24
    4276:	ed 56       	subi	r30, 0x6D	; 109
    4278:	fe 4f       	sbci	r31, 0xFE	; 254
    427a:	90 81       	ld	r25, Z
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	49 2f       	mov	r20, r25
    4282:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    4286:	fe 01       	movw	r30, r28
    4288:	fe 96       	adiw	r30, 0x3e	; 62
    428a:	80 81       	ld	r24, Z
    428c:	91 81       	ldd	r25, Z+1	; 0x01
    428e:	a2 81       	ldd	r26, Z+2	; 0x02
    4290:	b3 81       	ldd	r27, Z+3	; 0x03
    4292:	88 0f       	add	r24, r24
    4294:	99 1f       	adc	r25, r25
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	fc 01       	movw	r30, r24
    429c:	ec 56       	subi	r30, 0x6C	; 108
    429e:	fe 4f       	sbci	r31, 0xFE	; 254
    42a0:	90 81       	ld	r25, Z
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	62 e0       	ldi	r22, 0x02	; 2
    42a6:	49 2f       	mov	r20, r25
    42a8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    42ac:	fe 01       	movw	r30, r28
    42ae:	fe 96       	adiw	r30, 0x3e	; 62
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	a2 81       	ldd	r26, Z+2	; 0x02
    42b6:	b3 81       	ldd	r27, Z+3	; 0x03
    42b8:	88 0f       	add	r24, r24
    42ba:	99 1f       	adc	r25, r25
    42bc:	01 96       	adiw	r24, 0x01	; 1
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	fc 01       	movw	r30, r24
    42c4:	ed 56       	subi	r30, 0x6D	; 109
    42c6:	fe 4f       	sbci	r31, 0xFE	; 254
    42c8:	90 81       	ld	r25, Z
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	61 e0       	ldi	r22, 0x01	; 1
    42ce:	49 2f       	mov	r20, r25
    42d0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    42d4:	fe 01       	movw	r30, r28
    42d6:	fe 96       	adiw	r30, 0x3e	; 62
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	a2 81       	ldd	r26, Z+2	; 0x02
    42de:	b3 81       	ldd	r27, Z+3	; 0x03
    42e0:	88 0f       	add	r24, r24
    42e2:	99 1f       	adc	r25, r25
    42e4:	88 0f       	add	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	fc 01       	movw	r30, r24
    42ea:	ea 56       	subi	r30, 0x6A	; 106
    42ec:	fe 4f       	sbci	r31, 0xFE	; 254
    42ee:	90 81       	ld	r25, Z
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	63 e0       	ldi	r22, 0x03	; 3
    42f4:	49 2f       	mov	r20, r25
    42f6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    42fa:	80 91 92 01 	lds	r24, 0x0192
    42fe:	88 2f       	mov	r24, r24
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	a0 e0       	ldi	r26, 0x00	; 0
    4304:	b0 e0       	ldi	r27, 0x00	; 0
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	89 8f       	std	Y+25, r24	; 0x19
    4314:	9a 8f       	std	Y+26, r25	; 0x1a
    4316:	ab 8f       	std	Y+27, r26	; 0x1b
    4318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	69 8d       	ldd	r22, Y+25	; 0x19
    431c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    431e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a ef       	ldi	r20, 0xFA	; 250
    4328:	54 e4       	ldi	r21, 0x44	; 68
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	8d 8b       	std	Y+21, r24	; 0x15
    4334:	9e 8b       	std	Y+22, r25	; 0x16
    4336:	af 8b       	std	Y+23, r26	; 0x17
    4338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <STM_vMove+0x6e6>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	9c 8b       	std	Y+20, r25	; 0x14
    4358:	8b 8b       	std	Y+19, r24	; 0x13
    435a:	3f c0       	rjmp	.+126    	; 0x43da <STM_vMove+0x764>
	else if (__tmp > 65535)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <STM_vMove+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	69 8d       	ldd	r22, Y+25	; 0x19
    4376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9c 8b       	std	Y+20, r25	; 0x14
    439a:	8b 8b       	std	Y+19, r24	; 0x13
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <STM_vMove+0x746>
    439e:	88 ec       	ldi	r24, 0xC8	; 200
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	9a 8b       	std	Y+18, r25	; 0x12
    43a4:	89 8b       	std	Y+17, r24	; 0x11
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	9a 89       	ldd	r25, Y+18	; 0x12
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <STM_vMove+0x734>
    43ae:	9a 8b       	std	Y+18, r25	; 0x12
    43b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8b 89       	ldd	r24, Y+19	; 0x13
    43b4:	9c 89       	ldd	r25, Y+20	; 0x14
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8b 89       	ldd	r24, Y+19	; 0x13
    43be:	9c 89       	ldd	r25, Y+20	; 0x14
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <STM_vMove+0x728>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <STM_vMove+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	6d 89       	ldd	r22, Y+21	; 0x15
    43c8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ca:	8f 89       	ldd	r24, Y+23	; 0x17
    43cc:	98 8d       	ldd	r25, Y+24	; 0x18
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	8b 89       	ldd	r24, Y+19	; 0x13
    43dc:	9c 89       	ldd	r25, Y+20	; 0x14
    43de:	98 8b       	std	Y+16, r25	; 0x10
    43e0:	8f 87       	std	Y+15, r24	; 0x0f
    43e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e4:	98 89       	ldd	r25, Y+16	; 0x10
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <STM_vMove+0x770>
    43ea:	98 8b       	std	Y+16, r25	; 0x10
    43ec:	8f 87       	std	Y+15, r24	; 0x0f
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (u32 i = 0; i < 8; i++)
    43ee:	9e 01       	movw	r18, r28
    43f0:	22 5c       	subi	r18, 0xC2	; 194
    43f2:	3f 4f       	sbci	r19, 0xFF	; 255
    43f4:	fe 01       	movw	r30, r28
    43f6:	fe 96       	adiw	r30, 0x3e	; 62
    43f8:	80 81       	ld	r24, Z
    43fa:	91 81       	ldd	r25, Z+1	; 0x01
    43fc:	a2 81       	ldd	r26, Z+2	; 0x02
    43fe:	b3 81       	ldd	r27, Z+3	; 0x03
    4400:	01 96       	adiw	r24, 0x01	; 1
    4402:	a1 1d       	adc	r26, r1
    4404:	b1 1d       	adc	r27, r1
    4406:	f9 01       	movw	r30, r18
    4408:	80 83       	st	Z, r24
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	a2 83       	std	Z+2, r26	; 0x02
    440e:	b3 83       	std	Z+3, r27	; 0x03
    4410:	fe 01       	movw	r30, r28
    4412:	fe 96       	adiw	r30, 0x3e	; 62
    4414:	80 81       	ld	r24, Z
    4416:	91 81       	ldd	r25, Z+1	; 0x01
    4418:	a2 81       	ldd	r26, Z+2	; 0x02
    441a:	b3 81       	ldd	r27, Z+3	; 0x03
    441c:	88 30       	cpi	r24, 0x08	; 8
    441e:	91 05       	cpc	r25, r1
    4420:	a1 05       	cpc	r26, r1
    4422:	b1 05       	cpc	r27, r1
    4424:	08 f4       	brcc	.+2      	; 0x4428 <STM_vMove+0x7b2>
    4426:	1c cf       	rjmp	.-456    	; 0x4260 <STM_vMove+0x5ea>
    case HALF_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_HALF_STEP * 4)));
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    4428:	9e 01       	movw	r18, r28
    442a:	2e 5b       	subi	r18, 0xBE	; 190
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	fe 01       	movw	r30, r28
    4430:	ee 5b       	subi	r30, 0xBE	; 190
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	80 81       	ld	r24, Z
    4436:	91 81       	ldd	r25, Z+1	; 0x01
    4438:	a2 81       	ldd	r26, Z+2	; 0x02
    443a:	b3 81       	ldd	r27, Z+3	; 0x03
    443c:	01 96       	adiw	r24, 0x01	; 1
    443e:	a1 1d       	adc	r26, r1
    4440:	b1 1d       	adc	r27, r1
    4442:	f9 01       	movw	r30, r18
    4444:	80 83       	st	Z, r24
    4446:	91 83       	std	Z+1, r25	; 0x01
    4448:	a2 83       	std	Z+2, r26	; 0x02
    444a:	b3 83       	std	Z+3, r27	; 0x03
    444c:	fe 01       	movw	r30, r28
    444e:	ee 5b       	subi	r30, 0xBE	; 190
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	de 01       	movw	r26, r28
    4454:	ad 5a       	subi	r26, 0xAD	; 173
    4456:	bf 4f       	sbci	r27, 0xFF	; 255
    4458:	20 81       	ld	r18, Z
    445a:	31 81       	ldd	r19, Z+1	; 0x01
    445c:	42 81       	ldd	r20, Z+2	; 0x02
    445e:	53 81       	ldd	r21, Z+3	; 0x03
    4460:	8d 91       	ld	r24, X+
    4462:	9d 91       	ld	r25, X+
    4464:	0d 90       	ld	r0, X+
    4466:	bc 91       	ld	r27, X
    4468:	a0 2d       	mov	r26, r0
    446a:	28 17       	cp	r18, r24
    446c:	39 07       	cpc	r19, r25
    446e:	4a 07       	cpc	r20, r26
    4470:	5b 07       	cpc	r21, r27
    4472:	08 f4       	brcc	.+2      	; 0x4476 <STM_vMove+0x800>
    4474:	ee ce       	rjmp	.-548    	; 0x4252 <STM_vMove+0x5dc>
    4476:	ea c0       	rjmp	.+468    	; 0x464c <STM_vMove+0x9d6>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    4478:	1a ae       	std	Y+58, r1	; 0x3a
    447a:	1b ae       	std	Y+59, r1	; 0x3b
    447c:	1c ae       	std	Y+60, r1	; 0x3c
    447e:	1d ae       	std	Y+61, r1	; 0x3d
    4480:	d4 c0       	rjmp	.+424    	; 0x462a <STM_vMove+0x9b4>
            {
                for (s8 i = 7; i >= 0; i--)
    4482:	87 e0       	ldi	r24, 0x07	; 7
    4484:	89 af       	std	Y+57, r24	; 0x39
    4486:	c2 c0       	rjmp	.+388    	; 0x460c <STM_vMove+0x996>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    4488:	89 ad       	ldd	r24, Y+57	; 0x39
    448a:	99 27       	eor	r25, r25
    448c:	87 fd       	sbrc	r24, 7
    448e:	90 95       	com	r25
    4490:	88 0f       	add	r24, r24
    4492:	99 1f       	adc	r25, r25
    4494:	88 0f       	add	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	fc 01       	movw	r30, r24
    449a:	ed 56       	subi	r30, 0x6D	; 109
    449c:	fe 4f       	sbci	r31, 0xFE	; 254
    449e:	90 81       	ld	r25, Z
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	49 2f       	mov	r20, r25
    44a6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    44aa:	89 ad       	ldd	r24, Y+57	; 0x39
    44ac:	99 27       	eor	r25, r25
    44ae:	87 fd       	sbrc	r24, 7
    44b0:	90 95       	com	r25
    44b2:	88 0f       	add	r24, r24
    44b4:	99 1f       	adc	r25, r25
    44b6:	88 0f       	add	r24, r24
    44b8:	99 1f       	adc	r25, r25
    44ba:	fc 01       	movw	r30, r24
    44bc:	ec 56       	subi	r30, 0x6C	; 108
    44be:	fe 4f       	sbci	r31, 0xFE	; 254
    44c0:	90 81       	ld	r25, Z
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	62 e0       	ldi	r22, 0x02	; 2
    44c6:	49 2f       	mov	r20, r25
    44c8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    44cc:	89 ad       	ldd	r24, Y+57	; 0x39
    44ce:	99 27       	eor	r25, r25
    44d0:	87 fd       	sbrc	r24, 7
    44d2:	90 95       	com	r25
    44d4:	88 0f       	add	r24, r24
    44d6:	99 1f       	adc	r25, r25
    44d8:	01 96       	adiw	r24, 0x01	; 1
    44da:	88 0f       	add	r24, r24
    44dc:	99 1f       	adc	r25, r25
    44de:	fc 01       	movw	r30, r24
    44e0:	ed 56       	subi	r30, 0x6D	; 109
    44e2:	fe 4f       	sbci	r31, 0xFE	; 254
    44e4:	90 81       	ld	r25, Z
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	61 e0       	ldi	r22, 0x01	; 1
    44ea:	49 2f       	mov	r20, r25
    44ec:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    44f0:	89 ad       	ldd	r24, Y+57	; 0x39
    44f2:	99 27       	eor	r25, r25
    44f4:	87 fd       	sbrc	r24, 7
    44f6:	90 95       	com	r25
    44f8:	88 0f       	add	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	fc 01       	movw	r30, r24
    4502:	ea 56       	subi	r30, 0x6A	; 106
    4504:	fe 4f       	sbci	r31, 0xFE	; 254
    4506:	90 81       	ld	r25, Z
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	63 e0       	ldi	r22, 0x03	; 3
    450c:	49 2f       	mov	r20, r25
    450e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    4512:	80 91 92 01 	lds	r24, 0x0192
    4516:	88 2f       	mov	r24, r24
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	a0 e0       	ldi	r26, 0x00	; 0
    451c:	b0 e0       	ldi	r27, 0x00	; 0
    451e:	bc 01       	movw	r22, r24
    4520:	cd 01       	movw	r24, r26
    4522:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	8b 87       	std	Y+11, r24	; 0x0b
    452c:	9c 87       	std	Y+12, r25	; 0x0c
    452e:	ad 87       	std	Y+13, r26	; 0x0d
    4530:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4532:	6b 85       	ldd	r22, Y+11	; 0x0b
    4534:	7c 85       	ldd	r23, Y+12	; 0x0c
    4536:	8d 85       	ldd	r24, Y+13	; 0x0d
    4538:	9e 85       	ldd	r25, Y+14	; 0x0e
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	4a ef       	ldi	r20, 0xFA	; 250
    4540:	54 e4       	ldi	r21, 0x44	; 68
    4542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8f 83       	std	Y+7, r24	; 0x07
    454c:	98 87       	std	Y+8, r25	; 0x08
    454e:	a9 87       	std	Y+9, r26	; 0x09
    4550:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4552:	6f 81       	ldd	r22, Y+7	; 0x07
    4554:	78 85       	ldd	r23, Y+8	; 0x08
    4556:	89 85       	ldd	r24, Y+9	; 0x09
    4558:	9a 85       	ldd	r25, Y+10	; 0x0a
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e8       	ldi	r20, 0x80	; 128
    4560:	5f e3       	ldi	r21, 0x3F	; 63
    4562:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4566:	88 23       	and	r24, r24
    4568:	2c f4       	brge	.+10     	; 0x4574 <STM_vMove+0x8fe>
		__ticks = 1;
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	9e 83       	std	Y+6, r25	; 0x06
    4570:	8d 83       	std	Y+5, r24	; 0x05
    4572:	3f c0       	rjmp	.+126    	; 0x45f2 <STM_vMove+0x97c>
	else if (__tmp > 65535)
    4574:	6f 81       	ldd	r22, Y+7	; 0x07
    4576:	78 85       	ldd	r23, Y+8	; 0x08
    4578:	89 85       	ldd	r24, Y+9	; 0x09
    457a:	9a 85       	ldd	r25, Y+10	; 0x0a
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	3f ef       	ldi	r19, 0xFF	; 255
    4580:	4f e7       	ldi	r20, 0x7F	; 127
    4582:	57 e4       	ldi	r21, 0x47	; 71
    4584:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4588:	18 16       	cp	r1, r24
    458a:	4c f5       	brge	.+82     	; 0x45de <STM_vMove+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458c:	6b 85       	ldd	r22, Y+11	; 0x0b
    458e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4590:	8d 85       	ldd	r24, Y+13	; 0x0d
    4592:	9e 85       	ldd	r25, Y+14	; 0x0e
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	40 e2       	ldi	r20, 0x20	; 32
    459a:	51 e4       	ldi	r21, 0x41	; 65
    459c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a0:	dc 01       	movw	r26, r24
    45a2:	cb 01       	movw	r24, r22
    45a4:	bc 01       	movw	r22, r24
    45a6:	cd 01       	movw	r24, r26
    45a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	9e 83       	std	Y+6, r25	; 0x06
    45b2:	8d 83       	std	Y+5, r24	; 0x05
    45b4:	0f c0       	rjmp	.+30     	; 0x45d4 <STM_vMove+0x95e>
    45b6:	88 ec       	ldi	r24, 0xC8	; 200
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	9c 83       	std	Y+4, r25	; 0x04
    45bc:	8b 83       	std	Y+3, r24	; 0x03
    45be:	8b 81       	ldd	r24, Y+3	; 0x03
    45c0:	9c 81       	ldd	r25, Y+4	; 0x04
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <STM_vMove+0x94c>
    45c6:	9c 83       	std	Y+4, r25	; 0x04
    45c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ca:	8d 81       	ldd	r24, Y+5	; 0x05
    45cc:	9e 81       	ldd	r25, Y+6	; 0x06
    45ce:	01 97       	sbiw	r24, 0x01	; 1
    45d0:	9e 83       	std	Y+6, r25	; 0x06
    45d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d4:	8d 81       	ldd	r24, Y+5	; 0x05
    45d6:	9e 81       	ldd	r25, Y+6	; 0x06
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	69 f7       	brne	.-38     	; 0x45b6 <STM_vMove+0x940>
    45dc:	14 c0       	rjmp	.+40     	; 0x4606 <STM_vMove+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45de:	6f 81       	ldd	r22, Y+7	; 0x07
    45e0:	78 85       	ldd	r23, Y+8	; 0x08
    45e2:	89 85       	ldd	r24, Y+9	; 0x09
    45e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	9e 83       	std	Y+6, r25	; 0x06
    45f0:	8d 83       	std	Y+5, r24	; 0x05
    45f2:	8d 81       	ldd	r24, Y+5	; 0x05
    45f4:	9e 81       	ldd	r25, Y+6	; 0x06
    45f6:	9a 83       	std	Y+2, r25	; 0x02
    45f8:	89 83       	std	Y+1, r24	; 0x01
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
    45fc:	9a 81       	ldd	r25, Y+2	; 0x02
    45fe:	01 97       	sbiw	r24, 0x01	; 1
    4600:	f1 f7       	brne	.-4      	; 0x45fe <STM_vMove+0x988>
    4602:	9a 83       	std	Y+2, r25	; 0x02
    4604:	89 83       	std	Y+1, r24	; 0x01
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (s8 i = 7; i >= 0; i--)
    4606:	89 ad       	ldd	r24, Y+57	; 0x39
    4608:	81 50       	subi	r24, 0x01	; 1
    460a:	89 af       	std	Y+57, r24	; 0x39
    460c:	89 ad       	ldd	r24, Y+57	; 0x39
    460e:	88 23       	and	r24, r24
    4610:	0c f0       	brlt	.+2      	; 0x4614 <STM_vMove+0x99e>
    4612:	3a cf       	rjmp	.-396    	; 0x4488 <STM_vMove+0x812>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    4614:	8a ad       	ldd	r24, Y+58	; 0x3a
    4616:	9b ad       	ldd	r25, Y+59	; 0x3b
    4618:	ac ad       	ldd	r26, Y+60	; 0x3c
    461a:	bd ad       	ldd	r27, Y+61	; 0x3d
    461c:	01 96       	adiw	r24, 0x01	; 1
    461e:	a1 1d       	adc	r26, r1
    4620:	b1 1d       	adc	r27, r1
    4622:	8a af       	std	Y+58, r24	; 0x3a
    4624:	9b af       	std	Y+59, r25	; 0x3b
    4626:	ac af       	std	Y+60, r26	; 0x3c
    4628:	bd af       	std	Y+61, r27	; 0x3d
    462a:	fe 01       	movw	r30, r28
    462c:	ed 5a       	subi	r30, 0xAD	; 173
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	2a ad       	ldd	r18, Y+58	; 0x3a
    4632:	3b ad       	ldd	r19, Y+59	; 0x3b
    4634:	4c ad       	ldd	r20, Y+60	; 0x3c
    4636:	5d ad       	ldd	r21, Y+61	; 0x3d
    4638:	80 81       	ld	r24, Z
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	a2 81       	ldd	r26, Z+2	; 0x02
    463e:	b3 81       	ldd	r27, Z+3	; 0x03
    4640:	28 17       	cp	r18, r24
    4642:	39 07       	cpc	r19, r25
    4644:	4a 07       	cpc	r20, r26
    4646:	5b 07       	cpc	r21, r27
    4648:	08 f4       	brcc	.+2      	; 0x464c <STM_vMove+0x9d6>
    464a:	1b cf       	rjmp	.-458    	; 0x4482 <STM_vMove+0x80c>
        }
        break;
    default:
        break;
    }
};
    464c:	cf 59       	subi	r28, 0x9F	; 159
    464e:	df 4f       	sbci	r29, 0xFF	; 255
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	08 95       	ret

00004664 <SSD_vInit>:
#include "SSD_cfg.h"
#include "SSD_int.h"
#include <avr/delay.h>

void SSD_vInit(u8 A_u8SSDId)
{
    4664:	df 93       	push	r29
    4666:	cf 93       	push	r28
    4668:	00 d0       	rcall	.+0      	; 0x466a <SSD_vInit+0x6>
    466a:	0f 92       	push	r0
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    4670:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	28 2f       	mov	r18, r24
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	3b 83       	std	Y+3, r19	; 0x03
    467a:	2a 83       	std	Y+2, r18	; 0x02
    467c:	8a 81       	ldd	r24, Y+2	; 0x02
    467e:	9b 81       	ldd	r25, Y+3	; 0x03
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	31 f0       	breq	.+12     	; 0x4690 <SSD_vInit+0x2c>
    4684:	2a 81       	ldd	r18, Y+2	; 0x02
    4686:	3b 81       	ldd	r19, Y+3	; 0x03
    4688:	21 30       	cpi	r18, 0x01	; 1
    468a:	31 05       	cpc	r19, r1
    468c:	a1 f0       	breq	.+40     	; 0x46b6 <SSD_vInit+0x52>
    468e:	25 c0       	rjmp	.+74     	; 0x46da <SSD_vInit+0x76>
    {
    case SSD0:
        DIO_vSetPortDir(SSD0_DATA_PORT, PORT_OUT);
    4690:	82 e0       	ldi	r24, 0x02	; 2
    4692:	6f ef       	ldi	r22, 0xFF	; 255
    4694:	0e 94 21 15 	call	0x2a42	; 0x2a42 <DIO_vSetPortDir>
        DIO_vSetPinDir(SSD0_EN_PORT, SSD0_EN_PIN, DIR_OUTPUT);
    4698:	82 e0       	ldi	r24, 0x02	; 2
    469a:	67 e0       	ldi	r22, 0x07	; 7
    469c:	41 e0       	ldi	r20, 0x01	; 1
    469e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        DIO_vSetPortVal(SSD1_DATA_PORT, PORT_LOW);
    46a2:	83 e0       	ldi	r24, 0x03	; 3
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, LOW);
    46aa:	82 e0       	ldi	r24, 0x02	; 2
    46ac:	67 e0       	ldi	r22, 0x07	; 7
    46ae:	40 e0       	ldi	r20, 0x00	; 0
    46b0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    46b4:	12 c0       	rjmp	.+36     	; 0x46da <SSD_vInit+0x76>
        break;
    case SSD1:
        DIO_vSetPortDir(SSD1_DATA_PORT, PORT_OUT);
    46b6:	83 e0       	ldi	r24, 0x03	; 3
    46b8:	6f ef       	ldi	r22, 0xFF	; 255
    46ba:	0e 94 21 15 	call	0x2a42	; 0x2a42 <DIO_vSetPortDir>
        DIO_vSetPinDir(SSD1_EN_PORT, SSD1_EN_PIN, DIR_OUTPUT);
    46be:	83 e0       	ldi	r24, 0x03	; 3
    46c0:	67 e0       	ldi	r22, 0x07	; 7
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        DIO_vSetPortVal(SSD1_DATA_PORT, PORT_LOW);
    46c8:	83 e0       	ldi	r24, 0x03	; 3
    46ca:	60 e0       	ldi	r22, 0x00	; 0
    46cc:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, LOW);
    46d0:	83 e0       	ldi	r24, 0x03	; 3
    46d2:	67 e0       	ldi	r22, 0x07	; 7
    46d4:	40 e0       	ldi	r20, 0x00	; 0
    46d6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
};
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	cf 91       	pop	r28
    46e2:	df 91       	pop	r29
    46e4:	08 95       	ret

000046e6 <SSD_vTurnOn>:

void SSD_vTurnOn(u8 A_u8SSDId)
{
    46e6:	df 93       	push	r29
    46e8:	cf 93       	push	r28
    46ea:	00 d0       	rcall	.+0      	; 0x46ec <SSD_vTurnOn+0x6>
    46ec:	0f 92       	push	r0
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    46f4:	89 81       	ldd	r24, Y+1	; 0x01
    46f6:	28 2f       	mov	r18, r24
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	3b 83       	std	Y+3, r19	; 0x03
    46fc:	2a 83       	std	Y+2, r18	; 0x02
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	9b 81       	ldd	r25, Y+3	; 0x03
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	31 f0       	breq	.+12     	; 0x4712 <SSD_vTurnOn+0x2c>
    4706:	2a 81       	ldd	r18, Y+2	; 0x02
    4708:	3b 81       	ldd	r19, Y+3	; 0x03
    470a:	21 30       	cpi	r18, 0x01	; 1
    470c:	31 05       	cpc	r19, r1
    470e:	39 f0       	breq	.+14     	; 0x471e <SSD_vTurnOn+0x38>
    4710:	0b c0       	rjmp	.+22     	; 0x4728 <SSD_vTurnOn+0x42>
    {
    case SSD0:
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, LOW);
    4712:	82 e0       	ldi	r24, 0x02	; 2
    4714:	67 e0       	ldi	r22, 0x07	; 7
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <SSD_vTurnOn+0x42>
        break;
    case SSD1:
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, LOW);
    471e:	83 e0       	ldi	r24, 0x03	; 3
    4720:	67 e0       	ldi	r22, 0x07	; 7
    4722:	40 e0       	ldi	r20, 0x00	; 0
    4724:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	08 95       	ret

00004734 <SSD_vTurnOff>:
void SSD_vTurnOff(u8 A_u8SSDId)
{
    4734:	df 93       	push	r29
    4736:	cf 93       	push	r28
    4738:	00 d0       	rcall	.+0      	; 0x473a <SSD_vTurnOff+0x6>
    473a:	0f 92       	push	r0
    473c:	cd b7       	in	r28, 0x3d	; 61
    473e:	de b7       	in	r29, 0x3e	; 62
    4740:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	28 2f       	mov	r18, r24
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	3b 83       	std	Y+3, r19	; 0x03
    474a:	2a 83       	std	Y+2, r18	; 0x02
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	9b 81       	ldd	r25, Y+3	; 0x03
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	31 f0       	breq	.+12     	; 0x4760 <SSD_vTurnOff+0x2c>
    4754:	2a 81       	ldd	r18, Y+2	; 0x02
    4756:	3b 81       	ldd	r19, Y+3	; 0x03
    4758:	21 30       	cpi	r18, 0x01	; 1
    475a:	31 05       	cpc	r19, r1
    475c:	39 f0       	breq	.+14     	; 0x476c <SSD_vTurnOff+0x38>
    475e:	0b c0       	rjmp	.+22     	; 0x4776 <SSD_vTurnOff+0x42>
    {
    case SSD0:
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, HIGH);
    4760:	82 e0       	ldi	r24, 0x02	; 2
    4762:	67 e0       	ldi	r22, 0x07	; 7
    4764:	41 e0       	ldi	r20, 0x01	; 1
    4766:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    476a:	05 c0       	rjmp	.+10     	; 0x4776 <SSD_vTurnOff+0x42>
        break;
    case SSD1:
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, HIGH);
    476c:	83 e0       	ldi	r24, 0x03	; 3
    476e:	67 e0       	ldi	r22, 0x07	; 7
    4770:	41 e0       	ldi	r20, 0x01	; 1
    4772:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	0f 90       	pop	r0
    477c:	cf 91       	pop	r28
    477e:	df 91       	pop	r29
    4780:	08 95       	ret

00004782 <SSD_vDisplayNumber>:
void SSD_vDisplayNumber(u8 A_u8SSDId, u8 A_u8Number)
{
    4782:	df 93       	push	r29
    4784:	cf 93       	push	r28
    4786:	00 d0       	rcall	.+0      	; 0x4788 <SSD_vDisplayNumber+0x6>
    4788:	00 d0       	rcall	.+0      	; 0x478a <SSD_vDisplayNumber+0x8>
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	89 83       	std	Y+1, r24	; 0x01
    4790:	6a 83       	std	Y+2, r22	; 0x02
    static const u8 L_u8NumbersCathode[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};

#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    4792:	89 81       	ldd	r24, Y+1	; 0x01
    4794:	28 2f       	mov	r18, r24
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	3c 83       	std	Y+4, r19	; 0x04
    479a:	2b 83       	std	Y+3, r18	; 0x03
    479c:	8b 81       	ldd	r24, Y+3	; 0x03
    479e:	9c 81       	ldd	r25, Y+4	; 0x04
    47a0:	00 97       	sbiw	r24, 0x00	; 0
    47a2:	31 f0       	breq	.+12     	; 0x47b0 <SSD_vDisplayNumber+0x2e>
    47a4:	2b 81       	ldd	r18, Y+3	; 0x03
    47a6:	3c 81       	ldd	r19, Y+4	; 0x04
    47a8:	21 30       	cpi	r18, 0x01	; 1
    47aa:	31 05       	cpc	r19, r1
    47ac:	69 f0       	breq	.+26     	; 0x47c8 <SSD_vDisplayNumber+0x46>
    47ae:	17 c0       	rjmp	.+46     	; 0x47de <SSD_vDisplayNumber+0x5c>
    {
    case SSD0:
        DIO_vSetPortVal(SSD0_DATA_PORT, L_u8NumbersCathode[A_u8Number]);
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	88 2f       	mov	r24, r24
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	fc 01       	movw	r30, r24
    47b8:	ed 53       	subi	r30, 0x3D	; 61
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	90 81       	ld	r25, Z
    47be:	82 e0       	ldi	r24, 0x02	; 2
    47c0:	69 2f       	mov	r22, r25
    47c2:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    47c6:	0b c0       	rjmp	.+22     	; 0x47de <SSD_vDisplayNumber+0x5c>
        break;
    case SSD1:
        DIO_vSetPortVal(SSD1_DATA_PORT, L_u8NumbersCathode[A_u8Number]);
    47c8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ca:	88 2f       	mov	r24, r24
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	fc 01       	movw	r30, r24
    47d0:	ed 53       	subi	r30, 0x3D	; 61
    47d2:	fe 4f       	sbci	r31, 0xFE	; 254
    47d4:	90 81       	ld	r25, Z
    47d6:	83 e0       	ldi	r24, 0x03	; 3
    47d8:	69 2f       	mov	r22, r25
    47da:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
        break;
    default:
        break;
    }
#endif
};
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <SSD_vTurnOnRightSide>:

void SSD_vTurnOnRightSide(u8 A_u8SSDId)
{
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62
    47f4:	a1 97       	sbiw	r28, 0x21	; 33
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	de bf       	out	0x3e, r29	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	cd bf       	out	0x3d, r28	; 61
    4800:	8f 8f       	std	Y+31, r24	; 0x1f
    switch (A_u8SSDId)
    4802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4804:	28 2f       	mov	r18, r24
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	39 a3       	std	Y+33, r19	; 0x21
    480a:	28 a3       	std	Y+32, r18	; 0x20
    480c:	88 a1       	ldd	r24, Y+32	; 0x20
    480e:	99 a1       	ldd	r25, Y+33	; 0x21
    4810:	00 97       	sbiw	r24, 0x00	; 0
    4812:	39 f0       	breq	.+14     	; 0x4822 <SSD_vTurnOnRightSide+0x36>
    4814:	28 a1       	ldd	r18, Y+32	; 0x20
    4816:	39 a1       	ldd	r19, Y+33	; 0x21
    4818:	21 30       	cpi	r18, 0x01	; 1
    481a:	31 05       	cpc	r19, r1
    481c:	09 f4       	brne	.+2      	; 0x4820 <SSD_vTurnOnRightSide+0x34>
    481e:	90 c0       	rjmp	.+288    	; 0x4940 <SSD_vTurnOnRightSide+0x154>
    4820:	1d c1       	rjmp	.+570    	; 0x4a5c <SSD_vTurnOnRightSide+0x270>
    {
    case SSD0:
        for (u8 i = 0; i < 4; i++)
    4822:	1e 8e       	std	Y+30, r1	; 0x1e
    4824:	84 c0       	rjmp	.+264    	; 0x492e <SSD_vTurnOnRightSide+0x142>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
    4826:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4828:	28 2f       	mov	r18, r24
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	02 c0       	rjmp	.+4      	; 0x4836 <SSD_vTurnOnRightSide+0x4a>
    4832:	88 0f       	add	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	2a 95       	dec	r18
    4838:	e2 f7       	brpl	.-8      	; 0x4832 <SSD_vTurnOnRightSide+0x46>
    483a:	98 2f       	mov	r25, r24
    483c:	82 e0       	ldi	r24, 0x02	; 2
    483e:	69 2f       	mov	r22, r25
    4840:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	aa ef       	ldi	r26, 0xFA	; 250
    484a:	b3 e4       	ldi	r27, 0x43	; 67
    484c:	89 8f       	std	Y+25, r24	; 0x19
    484e:	9a 8f       	std	Y+26, r25	; 0x1a
    4850:	ab 8f       	std	Y+27, r26	; 0x1b
    4852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4854:	69 8d       	ldd	r22, Y+25	; 0x19
    4856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    485a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	4a ef       	ldi	r20, 0xFA	; 250
    4862:	54 e4       	ldi	r21, 0x44	; 68
    4864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	8d 8b       	std	Y+21, r24	; 0x15
    486e:	9e 8b       	std	Y+22, r25	; 0x16
    4870:	af 8b       	std	Y+23, r26	; 0x17
    4872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4874:	6d 89       	ldd	r22, Y+21	; 0x15
    4876:	7e 89       	ldd	r23, Y+22	; 0x16
    4878:	8f 89       	ldd	r24, Y+23	; 0x17
    487a:	98 8d       	ldd	r25, Y+24	; 0x18
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e8       	ldi	r20, 0x80	; 128
    4882:	5f e3       	ldi	r21, 0x3F	; 63
    4884:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4888:	88 23       	and	r24, r24
    488a:	2c f4       	brge	.+10     	; 0x4896 <SSD_vTurnOnRightSide+0xaa>
		__ticks = 1;
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	9c 8b       	std	Y+20, r25	; 0x14
    4892:	8b 8b       	std	Y+19, r24	; 0x13
    4894:	3f c0       	rjmp	.+126    	; 0x4914 <SSD_vTurnOnRightSide+0x128>
	else if (__tmp > 65535)
    4896:	6d 89       	ldd	r22, Y+21	; 0x15
    4898:	7e 89       	ldd	r23, Y+22	; 0x16
    489a:	8f 89       	ldd	r24, Y+23	; 0x17
    489c:	98 8d       	ldd	r25, Y+24	; 0x18
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	3f ef       	ldi	r19, 0xFF	; 255
    48a2:	4f e7       	ldi	r20, 0x7F	; 127
    48a4:	57 e4       	ldi	r21, 0x47	; 71
    48a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48aa:	18 16       	cp	r1, r24
    48ac:	4c f5       	brge	.+82     	; 0x4900 <SSD_vTurnOnRightSide+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ae:	69 8d       	ldd	r22, Y+25	; 0x19
    48b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	40 e2       	ldi	r20, 0x20	; 32
    48bc:	51 e4       	ldi	r21, 0x41	; 65
    48be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	bc 01       	movw	r22, r24
    48c8:	cd 01       	movw	r24, r26
    48ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	9c 8b       	std	Y+20, r25	; 0x14
    48d4:	8b 8b       	std	Y+19, r24	; 0x13
    48d6:	0f c0       	rjmp	.+30     	; 0x48f6 <SSD_vTurnOnRightSide+0x10a>
    48d8:	88 ec       	ldi	r24, 0xC8	; 200
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9a 8b       	std	Y+18, r25	; 0x12
    48de:	89 8b       	std	Y+17, r24	; 0x11
    48e0:	89 89       	ldd	r24, Y+17	; 0x11
    48e2:	9a 89       	ldd	r25, Y+18	; 0x12
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <SSD_vTurnOnRightSide+0xf8>
    48e8:	9a 8b       	std	Y+18, r25	; 0x12
    48ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ec:	8b 89       	ldd	r24, Y+19	; 0x13
    48ee:	9c 89       	ldd	r25, Y+20	; 0x14
    48f0:	01 97       	sbiw	r24, 0x01	; 1
    48f2:	9c 8b       	std	Y+20, r25	; 0x14
    48f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f6:	8b 89       	ldd	r24, Y+19	; 0x13
    48f8:	9c 89       	ldd	r25, Y+20	; 0x14
    48fa:	00 97       	sbiw	r24, 0x00	; 0
    48fc:	69 f7       	brne	.-38     	; 0x48d8 <SSD_vTurnOnRightSide+0xec>
    48fe:	14 c0       	rjmp	.+40     	; 0x4928 <SSD_vTurnOnRightSide+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4900:	6d 89       	ldd	r22, Y+21	; 0x15
    4902:	7e 89       	ldd	r23, Y+22	; 0x16
    4904:	8f 89       	ldd	r24, Y+23	; 0x17
    4906:	98 8d       	ldd	r25, Y+24	; 0x18
    4908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	9c 8b       	std	Y+20, r25	; 0x14
    4912:	8b 8b       	std	Y+19, r24	; 0x13
    4914:	8b 89       	ldd	r24, Y+19	; 0x13
    4916:	9c 89       	ldd	r25, Y+20	; 0x14
    4918:	98 8b       	std	Y+16, r25	; 0x10
    491a:	8f 87       	std	Y+15, r24	; 0x0f
    491c:	8f 85       	ldd	r24, Y+15	; 0x0f
    491e:	98 89       	ldd	r25, Y+16	; 0x10
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	f1 f7       	brne	.-4      	; 0x4920 <SSD_vTurnOnRightSide+0x134>
    4924:	98 8b       	std	Y+16, r25	; 0x10
    4926:	8f 87       	std	Y+15, r24	; 0x0f
void SSD_vTurnOnRightSide(u8 A_u8SSDId)
{
    switch (A_u8SSDId)
    {
    case SSD0:
        for (u8 i = 0; i < 4; i++)
    4928:	8e 8d       	ldd	r24, Y+30	; 0x1e
    492a:	8f 5f       	subi	r24, 0xFF	; 255
    492c:	8e 8f       	std	Y+30, r24	; 0x1e
    492e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4930:	84 30       	cpi	r24, 0x04	; 4
    4932:	08 f4       	brcc	.+2      	; 0x4936 <SSD_vTurnOnRightSide+0x14a>
    4934:	78 cf       	rjmp	.-272    	; 0x4826 <SSD_vTurnOnRightSide+0x3a>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, 0x00);
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	60 e0       	ldi	r22, 0x00	; 0
    493a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    493e:	8e c0       	rjmp	.+284    	; 0x4a5c <SSD_vTurnOnRightSide+0x270>
        break;
    case SSD1:
        for (u8 i = 0; i < 4; i++)
    4940:	1d 8e       	std	Y+29, r1	; 0x1d
    4942:	84 c0       	rjmp	.+264    	; 0x4a4c <SSD_vTurnOnRightSide+0x260>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i));
    4944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4946:	28 2f       	mov	r18, r24
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	02 c0       	rjmp	.+4      	; 0x4954 <SSD_vTurnOnRightSide+0x168>
    4950:	88 0f       	add	r24, r24
    4952:	99 1f       	adc	r25, r25
    4954:	2a 95       	dec	r18
    4956:	e2 f7       	brpl	.-8      	; 0x4950 <SSD_vTurnOnRightSide+0x164>
    4958:	98 2f       	mov	r25, r24
    495a:	83 e0       	ldi	r24, 0x03	; 3
    495c:	69 2f       	mov	r22, r25
    495e:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4962:	80 e0       	ldi	r24, 0x00	; 0
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	aa ef       	ldi	r26, 0xFA	; 250
    4968:	b3 e4       	ldi	r27, 0x43	; 67
    496a:	8b 87       	std	Y+11, r24	; 0x0b
    496c:	9c 87       	std	Y+12, r25	; 0x0c
    496e:	ad 87       	std	Y+13, r26	; 0x0d
    4970:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4972:	6b 85       	ldd	r22, Y+11	; 0x0b
    4974:	7c 85       	ldd	r23, Y+12	; 0x0c
    4976:	8d 85       	ldd	r24, Y+13	; 0x0d
    4978:	9e 85       	ldd	r25, Y+14	; 0x0e
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	4a ef       	ldi	r20, 0xFA	; 250
    4980:	54 e4       	ldi	r21, 0x44	; 68
    4982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4986:	dc 01       	movw	r26, r24
    4988:	cb 01       	movw	r24, r22
    498a:	8f 83       	std	Y+7, r24	; 0x07
    498c:	98 87       	std	Y+8, r25	; 0x08
    498e:	a9 87       	std	Y+9, r26	; 0x09
    4990:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4992:	6f 81       	ldd	r22, Y+7	; 0x07
    4994:	78 85       	ldd	r23, Y+8	; 0x08
    4996:	89 85       	ldd	r24, Y+9	; 0x09
    4998:	9a 85       	ldd	r25, Y+10	; 0x0a
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	40 e8       	ldi	r20, 0x80	; 128
    49a0:	5f e3       	ldi	r21, 0x3F	; 63
    49a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49a6:	88 23       	and	r24, r24
    49a8:	2c f4       	brge	.+10     	; 0x49b4 <SSD_vTurnOnRightSide+0x1c8>
		__ticks = 1;
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	9e 83       	std	Y+6, r25	; 0x06
    49b0:	8d 83       	std	Y+5, r24	; 0x05
    49b2:	3f c0       	rjmp	.+126    	; 0x4a32 <SSD_vTurnOnRightSide+0x246>
	else if (__tmp > 65535)
    49b4:	6f 81       	ldd	r22, Y+7	; 0x07
    49b6:	78 85       	ldd	r23, Y+8	; 0x08
    49b8:	89 85       	ldd	r24, Y+9	; 0x09
    49ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	3f ef       	ldi	r19, 0xFF	; 255
    49c0:	4f e7       	ldi	r20, 0x7F	; 127
    49c2:	57 e4       	ldi	r21, 0x47	; 71
    49c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49c8:	18 16       	cp	r1, r24
    49ca:	4c f5       	brge	.+82     	; 0x4a1e <SSD_vTurnOnRightSide+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    49ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    49d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	40 e2       	ldi	r20, 0x20	; 32
    49da:	51 e4       	ldi	r21, 0x41	; 65
    49dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e0:	dc 01       	movw	r26, r24
    49e2:	cb 01       	movw	r24, r22
    49e4:	bc 01       	movw	r22, r24
    49e6:	cd 01       	movw	r24, r26
    49e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	9e 83       	std	Y+6, r25	; 0x06
    49f2:	8d 83       	std	Y+5, r24	; 0x05
    49f4:	0f c0       	rjmp	.+30     	; 0x4a14 <SSD_vTurnOnRightSide+0x228>
    49f6:	88 ec       	ldi	r24, 0xC8	; 200
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	9c 83       	std	Y+4, r25	; 0x04
    49fc:	8b 83       	std	Y+3, r24	; 0x03
    49fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4a00:	9c 81       	ldd	r25, Y+4	; 0x04
    4a02:	01 97       	sbiw	r24, 0x01	; 1
    4a04:	f1 f7       	brne	.-4      	; 0x4a02 <SSD_vTurnOnRightSide+0x216>
    4a06:	9c 83       	std	Y+4, r25	; 0x04
    4a08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	9e 83       	std	Y+6, r25	; 0x06
    4a12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a14:	8d 81       	ldd	r24, Y+5	; 0x05
    4a16:	9e 81       	ldd	r25, Y+6	; 0x06
    4a18:	00 97       	sbiw	r24, 0x00	; 0
    4a1a:	69 f7       	brne	.-38     	; 0x49f6 <SSD_vTurnOnRightSide+0x20a>
    4a1c:	14 c0       	rjmp	.+40     	; 0x4a46 <SSD_vTurnOnRightSide+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a20:	78 85       	ldd	r23, Y+8	; 0x08
    4a22:	89 85       	ldd	r24, Y+9	; 0x09
    4a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a2a:	dc 01       	movw	r26, r24
    4a2c:	cb 01       	movw	r24, r22
    4a2e:	9e 83       	std	Y+6, r25	; 0x06
    4a30:	8d 83       	std	Y+5, r24	; 0x05
    4a32:	8d 81       	ldd	r24, Y+5	; 0x05
    4a34:	9e 81       	ldd	r25, Y+6	; 0x06
    4a36:	9a 83       	std	Y+2, r25	; 0x02
    4a38:	89 83       	std	Y+1, r24	; 0x01
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3e:	01 97       	sbiw	r24, 0x01	; 1
    4a40:	f1 f7       	brne	.-4      	; 0x4a3e <SSD_vTurnOnRightSide+0x252>
    4a42:	9a 83       	std	Y+2, r25	; 0x02
    4a44:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, 0x00);
        break;
    case SSD1:
        for (u8 i = 0; i < 4; i++)
    4a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a48:	8f 5f       	subi	r24, 0xFF	; 255
    4a4a:	8d 8f       	std	Y+29, r24	; 0x1d
    4a4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a4e:	84 30       	cpi	r24, 0x04	; 4
    4a50:	08 f4       	brcc	.+2      	; 0x4a54 <SSD_vTurnOnRightSide+0x268>
    4a52:	78 cf       	rjmp	.-272    	; 0x4944 <SSD_vTurnOnRightSide+0x158>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    4a54:	83 e0       	ldi	r24, 0x03	; 3
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
        break;

    default:
        break;
    }
};
    4a5c:	a1 96       	adiw	r28, 0x21	; 33
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	cd bf       	out	0x3d, r28	; 61
    4a68:	cf 91       	pop	r28
    4a6a:	df 91       	pop	r29
    4a6c:	08 95       	ret

00004a6e <SSD_vTurnOnLeftSide>:
void SSD_vTurnOnLeftSide(u8 A_u8SSDId)
{
    4a6e:	df 93       	push	r29
    4a70:	cf 93       	push	r28
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
    4a76:	ed 97       	sbiw	r28, 0x3d	; 61
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	f8 94       	cli
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	8b af       	std	Y+59, r24	; 0x3b
    switch (A_u8SSDId)
    4a84:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a86:	28 2f       	mov	r18, r24
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	3d af       	std	Y+61, r19	; 0x3d
    4a8c:	2c af       	std	Y+60, r18	; 0x3c
    4a8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    4a90:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	39 f0       	breq	.+14     	; 0x4aa4 <SSD_vTurnOnLeftSide+0x36>
    4a96:	2c ad       	ldd	r18, Y+60	; 0x3c
    4a98:	3d ad       	ldd	r19, Y+61	; 0x3d
    4a9a:	21 30       	cpi	r18, 0x01	; 1
    4a9c:	31 05       	cpc	r19, r1
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <SSD_vTurnOnLeftSide+0x34>
    4aa0:	06 c1       	rjmp	.+524    	; 0x4cae <SSD_vTurnOnLeftSide+0x240>
    4aa2:	0a c2       	rjmp	.+1044   	; 0x4eb8 <SSD_vTurnOnLeftSide+0x44a>
    {
    case SSD0:
        for (u8 i = 3; i < 6; i++)
    4aa4:	83 e0       	ldi	r24, 0x03	; 3
    4aa6:	8a af       	std	Y+58, r24	; 0x3a
    4aa8:	84 c0       	rjmp	.+264    	; 0x4bb2 <SSD_vTurnOnLeftSide+0x144>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
    4aaa:	8a ad       	ldd	r24, Y+58	; 0x3a
    4aac:	28 2f       	mov	r18, r24
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	02 c0       	rjmp	.+4      	; 0x4aba <SSD_vTurnOnLeftSide+0x4c>
    4ab6:	88 0f       	add	r24, r24
    4ab8:	99 1f       	adc	r25, r25
    4aba:	2a 95       	dec	r18
    4abc:	e2 f7       	brpl	.-8      	; 0x4ab6 <SSD_vTurnOnLeftSide+0x48>
    4abe:	98 2f       	mov	r25, r24
    4ac0:	82 e0       	ldi	r24, 0x02	; 2
    4ac2:	69 2f       	mov	r22, r25
    4ac4:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	aa ef       	ldi	r26, 0xFA	; 250
    4ace:	b3 e4       	ldi	r27, 0x43	; 67
    4ad0:	8d ab       	std	Y+53, r24	; 0x35
    4ad2:	9e ab       	std	Y+54, r25	; 0x36
    4ad4:	af ab       	std	Y+55, r26	; 0x37
    4ad6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    4ada:	7e a9       	ldd	r23, Y+54	; 0x36
    4adc:	8f a9       	ldd	r24, Y+55	; 0x37
    4ade:	98 ad       	ldd	r25, Y+56	; 0x38
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	4a ef       	ldi	r20, 0xFA	; 250
    4ae6:	54 e4       	ldi	r21, 0x44	; 68
    4ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22
    4af0:	89 ab       	std	Y+49, r24	; 0x31
    4af2:	9a ab       	std	Y+50, r25	; 0x32
    4af4:	ab ab       	std	Y+51, r26	; 0x33
    4af6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4af8:	69 a9       	ldd	r22, Y+49	; 0x31
    4afa:	7a a9       	ldd	r23, Y+50	; 0x32
    4afc:	8b a9       	ldd	r24, Y+51	; 0x33
    4afe:	9c a9       	ldd	r25, Y+52	; 0x34
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	40 e8       	ldi	r20, 0x80	; 128
    4b06:	5f e3       	ldi	r21, 0x3F	; 63
    4b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b0c:	88 23       	and	r24, r24
    4b0e:	2c f4       	brge	.+10     	; 0x4b1a <SSD_vTurnOnLeftSide+0xac>
		__ticks = 1;
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	98 ab       	std	Y+48, r25	; 0x30
    4b16:	8f a7       	std	Y+47, r24	; 0x2f
    4b18:	3f c0       	rjmp	.+126    	; 0x4b98 <SSD_vTurnOnLeftSide+0x12a>
	else if (__tmp > 65535)
    4b1a:	69 a9       	ldd	r22, Y+49	; 0x31
    4b1c:	7a a9       	ldd	r23, Y+50	; 0x32
    4b1e:	8b a9       	ldd	r24, Y+51	; 0x33
    4b20:	9c a9       	ldd	r25, Y+52	; 0x34
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	3f ef       	ldi	r19, 0xFF	; 255
    4b26:	4f e7       	ldi	r20, 0x7F	; 127
    4b28:	57 e4       	ldi	r21, 0x47	; 71
    4b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b2e:	18 16       	cp	r1, r24
    4b30:	4c f5       	brge	.+82     	; 0x4b84 <SSD_vTurnOnLeftSide+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b32:	6d a9       	ldd	r22, Y+53	; 0x35
    4b34:	7e a9       	ldd	r23, Y+54	; 0x36
    4b36:	8f a9       	ldd	r24, Y+55	; 0x37
    4b38:	98 ad       	ldd	r25, Y+56	; 0x38
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	40 e2       	ldi	r20, 0x20	; 32
    4b40:	51 e4       	ldi	r21, 0x41	; 65
    4b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	bc 01       	movw	r22, r24
    4b4c:	cd 01       	movw	r24, r26
    4b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	98 ab       	std	Y+48, r25	; 0x30
    4b58:	8f a7       	std	Y+47, r24	; 0x2f
    4b5a:	0f c0       	rjmp	.+30     	; 0x4b7a <SSD_vTurnOnLeftSide+0x10c>
    4b5c:	88 ec       	ldi	r24, 0xC8	; 200
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	9e a7       	std	Y+46, r25	; 0x2e
    4b62:	8d a7       	std	Y+45, r24	; 0x2d
    4b64:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b66:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b68:	01 97       	sbiw	r24, 0x01	; 1
    4b6a:	f1 f7       	brne	.-4      	; 0x4b68 <SSD_vTurnOnLeftSide+0xfa>
    4b6c:	9e a7       	std	Y+46, r25	; 0x2e
    4b6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b70:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b72:	98 a9       	ldd	r25, Y+48	; 0x30
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	98 ab       	std	Y+48, r25	; 0x30
    4b78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    4b7e:	00 97       	sbiw	r24, 0x00	; 0
    4b80:	69 f7       	brne	.-38     	; 0x4b5c <SSD_vTurnOnLeftSide+0xee>
    4b82:	14 c0       	rjmp	.+40     	; 0x4bac <SSD_vTurnOnLeftSide+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b84:	69 a9       	ldd	r22, Y+49	; 0x31
    4b86:	7a a9       	ldd	r23, Y+50	; 0x32
    4b88:	8b a9       	ldd	r24, Y+51	; 0x33
    4b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    4b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	98 ab       	std	Y+48, r25	; 0x30
    4b96:	8f a7       	std	Y+47, r24	; 0x2f
    4b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    4b9c:	9c a7       	std	Y+44, r25	; 0x2c
    4b9e:	8b a7       	std	Y+43, r24	; 0x2b
    4ba0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ba2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	f1 f7       	brne	.-4      	; 0x4ba4 <SSD_vTurnOnLeftSide+0x136>
    4ba8:	9c a7       	std	Y+44, r25	; 0x2c
    4baa:	8b a7       	std	Y+43, r24	; 0x2b
void SSD_vTurnOnLeftSide(u8 A_u8SSDId)
{
    switch (A_u8SSDId)
    {
    case SSD0:
        for (u8 i = 3; i < 6; i++)
    4bac:	8a ad       	ldd	r24, Y+58	; 0x3a
    4bae:	8f 5f       	subi	r24, 0xFF	; 255
    4bb0:	8a af       	std	Y+58, r24	; 0x3a
    4bb2:	8a ad       	ldd	r24, Y+58	; 0x3a
    4bb4:	86 30       	cpi	r24, 0x06	; 6
    4bb6:	08 f4       	brcc	.+2      	; 0x4bba <SSD_vTurnOnLeftSide+0x14c>
    4bb8:	78 cf       	rjmp	.-272    	; 0x4aaa <SSD_vTurnOnLeftSide+0x3c>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, (1 << 0));
    4bba:	82 e0       	ldi	r24, 0x02	; 2
    4bbc:	61 e0       	ldi	r22, 0x01	; 1
    4bbe:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	aa ef       	ldi	r26, 0xFA	; 250
    4bc8:	b3 e4       	ldi	r27, 0x43	; 67
    4bca:	8f a3       	std	Y+39, r24	; 0x27
    4bcc:	98 a7       	std	Y+40, r25	; 0x28
    4bce:	a9 a7       	std	Y+41, r26	; 0x29
    4bd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd2:	6f a1       	ldd	r22, Y+39	; 0x27
    4bd4:	78 a5       	ldd	r23, Y+40	; 0x28
    4bd6:	89 a5       	ldd	r24, Y+41	; 0x29
    4bd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	4a ef       	ldi	r20, 0xFA	; 250
    4be0:	54 e4       	ldi	r21, 0x44	; 68
    4be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	8b a3       	std	Y+35, r24	; 0x23
    4bec:	9c a3       	std	Y+36, r25	; 0x24
    4bee:	ad a3       	std	Y+37, r26	; 0x25
    4bf0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    4bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    4bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    4bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e8       	ldi	r20, 0x80	; 128
    4c00:	5f e3       	ldi	r21, 0x3F	; 63
    4c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c06:	88 23       	and	r24, r24
    4c08:	2c f4       	brge	.+10     	; 0x4c14 <SSD_vTurnOnLeftSide+0x1a6>
		__ticks = 1;
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	9a a3       	std	Y+34, r25	; 0x22
    4c10:	89 a3       	std	Y+33, r24	; 0x21
    4c12:	3f c0       	rjmp	.+126    	; 0x4c92 <SSD_vTurnOnLeftSide+0x224>
	else if (__tmp > 65535)
    4c14:	6b a1       	ldd	r22, Y+35	; 0x23
    4c16:	7c a1       	ldd	r23, Y+36	; 0x24
    4c18:	8d a1       	ldd	r24, Y+37	; 0x25
    4c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	57 e4       	ldi	r21, 0x47	; 71
    4c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	4c f5       	brge	.+82     	; 0x4c7e <SSD_vTurnOnLeftSide+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c2c:	6f a1       	ldd	r22, Y+39	; 0x27
    4c2e:	78 a5       	ldd	r23, Y+40	; 0x28
    4c30:	89 a5       	ldd	r24, Y+41	; 0x29
    4c32:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e2       	ldi	r20, 0x20	; 32
    4c3a:	51 e4       	ldi	r21, 0x41	; 65
    4c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	bc 01       	movw	r22, r24
    4c46:	cd 01       	movw	r24, r26
    4c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	9a a3       	std	Y+34, r25	; 0x22
    4c52:	89 a3       	std	Y+33, r24	; 0x21
    4c54:	0f c0       	rjmp	.+30     	; 0x4c74 <SSD_vTurnOnLeftSide+0x206>
    4c56:	88 ec       	ldi	r24, 0xC8	; 200
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	98 a3       	std	Y+32, r25	; 0x20
    4c5c:	8f 8f       	std	Y+31, r24	; 0x1f
    4c5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c60:	98 a1       	ldd	r25, Y+32	; 0x20
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	f1 f7       	brne	.-4      	; 0x4c62 <SSD_vTurnOnLeftSide+0x1f4>
    4c66:	98 a3       	std	Y+32, r25	; 0x20
    4c68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	9a a3       	std	Y+34, r25	; 0x22
    4c72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c74:	89 a1       	ldd	r24, Y+33	; 0x21
    4c76:	9a a1       	ldd	r25, Y+34	; 0x22
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	69 f7       	brne	.-38     	; 0x4c56 <SSD_vTurnOnLeftSide+0x1e8>
    4c7c:	14 c0       	rjmp	.+40     	; 0x4ca6 <SSD_vTurnOnLeftSide+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c7e:	6b a1       	ldd	r22, Y+35	; 0x23
    4c80:	7c a1       	ldd	r23, Y+36	; 0x24
    4c82:	8d a1       	ldd	r24, Y+37	; 0x25
    4c84:	9e a1       	ldd	r25, Y+38	; 0x26
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9a a3       	std	Y+34, r25	; 0x22
    4c90:	89 a3       	std	Y+33, r24	; 0x21
    4c92:	89 a1       	ldd	r24, Y+33	; 0x21
    4c94:	9a a1       	ldd	r25, Y+34	; 0x22
    4c96:	9e 8f       	std	Y+30, r25	; 0x1e
    4c98:	8d 8f       	std	Y+29, r24	; 0x1d
    4c9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <SSD_vTurnOnLeftSide+0x230>
    4ca2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ca4:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    4ca6:	83 e0       	ldi	r24, 0x03	; 3
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    case SSD1:
        for (u8 i = 3; i < 6; i++)
    4cae:	83 e0       	ldi	r24, 0x03	; 3
    4cb0:	89 af       	std	Y+57, r24	; 0x39
    4cb2:	84 c0       	rjmp	.+264    	; 0x4dbc <SSD_vTurnOnLeftSide+0x34e>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i)); // 3 00001000 //4 00010000 //5 00100000 //
    4cb4:	89 ad       	ldd	r24, Y+57	; 0x39
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	02 c0       	rjmp	.+4      	; 0x4cc4 <SSD_vTurnOnLeftSide+0x256>
    4cc0:	88 0f       	add	r24, r24
    4cc2:	99 1f       	adc	r25, r25
    4cc4:	2a 95       	dec	r18
    4cc6:	e2 f7       	brpl	.-8      	; 0x4cc0 <SSD_vTurnOnLeftSide+0x252>
    4cc8:	98 2f       	mov	r25, r24
    4cca:	83 e0       	ldi	r24, 0x03	; 3
    4ccc:	69 2f       	mov	r22, r25
    4cce:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4cd2:	80 e0       	ldi	r24, 0x00	; 0
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	aa ef       	ldi	r26, 0xFA	; 250
    4cd8:	b3 e4       	ldi	r27, 0x43	; 67
    4cda:	89 8f       	std	Y+25, r24	; 0x19
    4cdc:	9a 8f       	std	Y+26, r25	; 0x1a
    4cde:	ab 8f       	std	Y+27, r26	; 0x1b
    4ce0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	4a ef       	ldi	r20, 0xFA	; 250
    4cf0:	54 e4       	ldi	r21, 0x44	; 68
    4cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	8d 8b       	std	Y+21, r24	; 0x15
    4cfc:	9e 8b       	std	Y+22, r25	; 0x16
    4cfe:	af 8b       	std	Y+23, r26	; 0x17
    4d00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d02:	6d 89       	ldd	r22, Y+21	; 0x15
    4d04:	7e 89       	ldd	r23, Y+22	; 0x16
    4d06:	8f 89       	ldd	r24, Y+23	; 0x17
    4d08:	98 8d       	ldd	r25, Y+24	; 0x18
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e8       	ldi	r20, 0x80	; 128
    4d10:	5f e3       	ldi	r21, 0x3F	; 63
    4d12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d16:	88 23       	and	r24, r24
    4d18:	2c f4       	brge	.+10     	; 0x4d24 <SSD_vTurnOnLeftSide+0x2b6>
		__ticks = 1;
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	9c 8b       	std	Y+20, r25	; 0x14
    4d20:	8b 8b       	std	Y+19, r24	; 0x13
    4d22:	3f c0       	rjmp	.+126    	; 0x4da2 <SSD_vTurnOnLeftSide+0x334>
	else if (__tmp > 65535)
    4d24:	6d 89       	ldd	r22, Y+21	; 0x15
    4d26:	7e 89       	ldd	r23, Y+22	; 0x16
    4d28:	8f 89       	ldd	r24, Y+23	; 0x17
    4d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	3f ef       	ldi	r19, 0xFF	; 255
    4d30:	4f e7       	ldi	r20, 0x7F	; 127
    4d32:	57 e4       	ldi	r21, 0x47	; 71
    4d34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d38:	18 16       	cp	r1, r24
    4d3a:	4c f5       	brge	.+82     	; 0x4d8e <SSD_vTurnOnLeftSide+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    4d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e2       	ldi	r20, 0x20	; 32
    4d4a:	51 e4       	ldi	r21, 0x41	; 65
    4d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	9c 8b       	std	Y+20, r25	; 0x14
    4d62:	8b 8b       	std	Y+19, r24	; 0x13
    4d64:	0f c0       	rjmp	.+30     	; 0x4d84 <SSD_vTurnOnLeftSide+0x316>
    4d66:	88 ec       	ldi	r24, 0xC8	; 200
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	9a 8b       	std	Y+18, r25	; 0x12
    4d6c:	89 8b       	std	Y+17, r24	; 0x11
    4d6e:	89 89       	ldd	r24, Y+17	; 0x11
    4d70:	9a 89       	ldd	r25, Y+18	; 0x12
    4d72:	01 97       	sbiw	r24, 0x01	; 1
    4d74:	f1 f7       	brne	.-4      	; 0x4d72 <SSD_vTurnOnLeftSide+0x304>
    4d76:	9a 8b       	std	Y+18, r25	; 0x12
    4d78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d7a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d7c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	9c 8b       	std	Y+20, r25	; 0x14
    4d82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d84:	8b 89       	ldd	r24, Y+19	; 0x13
    4d86:	9c 89       	ldd	r25, Y+20	; 0x14
    4d88:	00 97       	sbiw	r24, 0x00	; 0
    4d8a:	69 f7       	brne	.-38     	; 0x4d66 <SSD_vTurnOnLeftSide+0x2f8>
    4d8c:	14 c0       	rjmp	.+40     	; 0x4db6 <SSD_vTurnOnLeftSide+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d90:	7e 89       	ldd	r23, Y+22	; 0x16
    4d92:	8f 89       	ldd	r24, Y+23	; 0x17
    4d94:	98 8d       	ldd	r25, Y+24	; 0x18
    4d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d9a:	dc 01       	movw	r26, r24
    4d9c:	cb 01       	movw	r24, r22
    4d9e:	9c 8b       	std	Y+20, r25	; 0x14
    4da0:	8b 8b       	std	Y+19, r24	; 0x13
    4da2:	8b 89       	ldd	r24, Y+19	; 0x13
    4da4:	9c 89       	ldd	r25, Y+20	; 0x14
    4da6:	98 8b       	std	Y+16, r25	; 0x10
    4da8:	8f 87       	std	Y+15, r24	; 0x0f
    4daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dac:	98 89       	ldd	r25, Y+16	; 0x10
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	f1 f7       	brne	.-4      	; 0x4dae <SSD_vTurnOnLeftSide+0x340>
    4db2:	98 8b       	std	Y+16, r25	; 0x10
    4db4:	8f 87       	std	Y+15, r24	; 0x0f
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, (1 << 0));
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    case SSD1:
        for (u8 i = 3; i < 6; i++)
    4db6:	89 ad       	ldd	r24, Y+57	; 0x39
    4db8:	8f 5f       	subi	r24, 0xFF	; 255
    4dba:	89 af       	std	Y+57, r24	; 0x39
    4dbc:	89 ad       	ldd	r24, Y+57	; 0x39
    4dbe:	86 30       	cpi	r24, 0x06	; 6
    4dc0:	08 f4       	brcc	.+2      	; 0x4dc4 <SSD_vTurnOnLeftSide+0x356>
    4dc2:	78 cf       	rjmp	.-272    	; 0x4cb4 <SSD_vTurnOnLeftSide+0x246>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i)); // 3 00001000 //4 00010000 //5 00100000 //
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD1_DATA_PORT, (1 << 0));
    4dc4:	83 e0       	ldi	r24, 0x03	; 3
    4dc6:	61 e0       	ldi	r22, 0x01	; 1
    4dc8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    4dcc:	80 e0       	ldi	r24, 0x00	; 0
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	aa ef       	ldi	r26, 0xFA	; 250
    4dd2:	b3 e4       	ldi	r27, 0x43	; 67
    4dd4:	8b 87       	std	Y+11, r24	; 0x0b
    4dd6:	9c 87       	std	Y+12, r25	; 0x0c
    4dd8:	ad 87       	std	Y+13, r26	; 0x0d
    4dda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    4de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	4a ef       	ldi	r20, 0xFA	; 250
    4dea:	54 e4       	ldi	r21, 0x44	; 68
    4dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	8f 83       	std	Y+7, r24	; 0x07
    4df6:	98 87       	std	Y+8, r25	; 0x08
    4df8:	a9 87       	std	Y+9, r26	; 0x09
    4dfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    4dfe:	78 85       	ldd	r23, Y+8	; 0x08
    4e00:	89 85       	ldd	r24, Y+9	; 0x09
    4e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	40 e8       	ldi	r20, 0x80	; 128
    4e0a:	5f e3       	ldi	r21, 0x3F	; 63
    4e0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e10:	88 23       	and	r24, r24
    4e12:	2c f4       	brge	.+10     	; 0x4e1e <SSD_vTurnOnLeftSide+0x3b0>
		__ticks = 1;
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	9e 83       	std	Y+6, r25	; 0x06
    4e1a:	8d 83       	std	Y+5, r24	; 0x05
    4e1c:	3f c0       	rjmp	.+126    	; 0x4e9c <SSD_vTurnOnLeftSide+0x42e>
	else if (__tmp > 65535)
    4e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e20:	78 85       	ldd	r23, Y+8	; 0x08
    4e22:	89 85       	ldd	r24, Y+9	; 0x09
    4e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	3f ef       	ldi	r19, 0xFF	; 255
    4e2a:	4f e7       	ldi	r20, 0x7F	; 127
    4e2c:	57 e4       	ldi	r21, 0x47	; 71
    4e2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e32:	18 16       	cp	r1, r24
    4e34:	4c f5       	brge	.+82     	; 0x4e88 <SSD_vTurnOnLeftSide+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	40 e2       	ldi	r20, 0x20	; 32
    4e44:	51 e4       	ldi	r21, 0x41	; 65
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	bc 01       	movw	r22, r24
    4e50:	cd 01       	movw	r24, r26
    4e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e56:	dc 01       	movw	r26, r24
    4e58:	cb 01       	movw	r24, r22
    4e5a:	9e 83       	std	Y+6, r25	; 0x06
    4e5c:	8d 83       	std	Y+5, r24	; 0x05
    4e5e:	0f c0       	rjmp	.+30     	; 0x4e7e <SSD_vTurnOnLeftSide+0x410>
    4e60:	88 ec       	ldi	r24, 0xC8	; 200
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	9c 83       	std	Y+4, r25	; 0x04
    4e66:	8b 83       	std	Y+3, r24	; 0x03
    4e68:	8b 81       	ldd	r24, Y+3	; 0x03
    4e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6c:	01 97       	sbiw	r24, 0x01	; 1
    4e6e:	f1 f7       	brne	.-4      	; 0x4e6c <SSD_vTurnOnLeftSide+0x3fe>
    4e70:	9c 83       	std	Y+4, r25	; 0x04
    4e72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e74:	8d 81       	ldd	r24, Y+5	; 0x05
    4e76:	9e 81       	ldd	r25, Y+6	; 0x06
    4e78:	01 97       	sbiw	r24, 0x01	; 1
    4e7a:	9e 83       	std	Y+6, r25	; 0x06
    4e7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e80:	9e 81       	ldd	r25, Y+6	; 0x06
    4e82:	00 97       	sbiw	r24, 0x00	; 0
    4e84:	69 f7       	brne	.-38     	; 0x4e60 <SSD_vTurnOnLeftSide+0x3f2>
    4e86:	14 c0       	rjmp	.+40     	; 0x4eb0 <SSD_vTurnOnLeftSide+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e88:	6f 81       	ldd	r22, Y+7	; 0x07
    4e8a:	78 85       	ldd	r23, Y+8	; 0x08
    4e8c:	89 85       	ldd	r24, Y+9	; 0x09
    4e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e94:	dc 01       	movw	r26, r24
    4e96:	cb 01       	movw	r24, r22
    4e98:	9e 83       	std	Y+6, r25	; 0x06
    4e9a:	8d 83       	std	Y+5, r24	; 0x05
    4e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea0:	9a 83       	std	Y+2, r25	; 0x02
    4ea2:	89 83       	std	Y+1, r24	; 0x01
    4ea4:	89 81       	ldd	r24, Y+1	; 0x01
    4ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea8:	01 97       	sbiw	r24, 0x01	; 1
    4eaa:	f1 f7       	brne	.-4      	; 0x4ea8 <SSD_vTurnOnLeftSide+0x43a>
    4eac:	9a 83       	std	Y+2, r25	; 0x02
    4eae:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    4eb0:	83 e0       	ldi	r24, 0x03	; 3
    4eb2:	60 e0       	ldi	r22, 0x00	; 0
    4eb4:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
        break;

    default:
        break;
    }
};
    4eb8:	ed 96       	adiw	r28, 0x3d	; 61
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	cf 91       	pop	r28
    4ec6:	df 91       	pop	r29
    4ec8:	08 95       	ret

00004eca <SERVO_vInit>:
#include "SERVO_int.h"
#include "SERVO_cfg.h"
#include "SERVO_pri.h"

void SERVO_vInit()
{
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
    DIO_vSetPinDir(PORTD_ID, PIN5_ID, DIR_OUTPUT);
    4ed2:	83 e0       	ldi	r24, 0x03	; 3
    4ed4:	65 e0       	ldi	r22, 0x05	; 5
    4ed6:	41 e0       	ldi	r20, 0x01	; 1
    4ed8:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    TIMER_vInit(TIMER1);
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	0e 94 c2 09 	call	0x1384	; 0x1384 <TIMER_vInit>
}
    4ee2:	cf 91       	pop	r28
    4ee4:	df 91       	pop	r29
    4ee6:	08 95       	ret

00004ee8 <SERVO_vMoveToInitialAngle>:
void SERVO_vMoveToInitialAngle()
{
    4ee8:	df 93       	push	r29
    4eea:	cf 93       	push	r28
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
	/* 600 to OCR1AW */
    TIMER_vPWMSignal(TIMER1, 3);
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	40 e0       	ldi	r20, 0x00	; 0
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	60 e4       	ldi	r22, 0x40	; 64
    4ef8:	70 e4       	ldi	r23, 0x40	; 64
    4efa:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>

}
    4efe:	cf 91       	pop	r28
    4f00:	df 91       	pop	r29
    4f02:	08 95       	ret

00004f04 <SERVO_vMoveToAngle>:
void SERVO_vMoveToAngle(u32 A_u32Angle)
{
    4f04:	df 93       	push	r29
    4f06:	cf 93       	push	r28
    4f08:	cd b7       	in	r28, 0x3d	; 61
    4f0a:	de b7       	in	r29, 0x3e	; 62
    4f0c:	28 97       	sbiw	r28, 0x08	; 8
    4f0e:	0f b6       	in	r0, 0x3f	; 63
    4f10:	f8 94       	cli
    4f12:	de bf       	out	0x3e, r29	; 62
    4f14:	0f be       	out	0x3f, r0	; 63
    4f16:	cd bf       	out	0x3d, r28	; 61
    4f18:	69 83       	std	Y+1, r22	; 0x01
    4f1a:	7a 83       	std	Y+2, r23	; 0x02
    4f1c:	8b 83       	std	Y+3, r24	; 0x03
    4f1e:	9c 83       	std	Y+4, r25	; 0x04
    switch (A_u32Angle)
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	9a 81       	ldd	r25, Y+2	; 0x02
    4f24:	ab 81       	ldd	r26, Y+3	; 0x03
    4f26:	bc 81       	ldd	r27, Y+4	; 0x04
    4f28:	8d 83       	std	Y+5, r24	; 0x05
    4f2a:	9e 83       	std	Y+6, r25	; 0x06
    4f2c:	af 83       	std	Y+7, r26	; 0x07
    4f2e:	b8 87       	std	Y+8, r27	; 0x08
    4f30:	8d 81       	ldd	r24, Y+5	; 0x05
    4f32:	9e 81       	ldd	r25, Y+6	; 0x06
    4f34:	af 81       	ldd	r26, Y+7	; 0x07
    4f36:	b8 85       	ldd	r27, Y+8	; 0x08
    4f38:	8a 35       	cpi	r24, 0x5A	; 90
    4f3a:	91 05       	cpc	r25, r1
    4f3c:	a1 05       	cpc	r26, r1
    4f3e:	b1 05       	cpc	r27, r1
    4f40:	a9 f1       	breq	.+106    	; 0x4fac <SERVO_vMoveToAngle+0xa8>
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	9e 81       	ldd	r25, Y+6	; 0x06
    4f46:	af 81       	ldd	r26, Y+7	; 0x07
    4f48:	b8 85       	ldd	r27, Y+8	; 0x08
    4f4a:	8b 35       	cpi	r24, 0x5B	; 91
    4f4c:	91 05       	cpc	r25, r1
    4f4e:	a1 05       	cpc	r26, r1
    4f50:	b1 05       	cpc	r27, r1
    4f52:	50 f4       	brcc	.+20     	; 0x4f68 <SERVO_vMoveToAngle+0x64>
    4f54:	8d 81       	ldd	r24, Y+5	; 0x05
    4f56:	9e 81       	ldd	r25, Y+6	; 0x06
    4f58:	af 81       	ldd	r26, Y+7	; 0x07
    4f5a:	b8 85       	ldd	r27, Y+8	; 0x08
    4f5c:	8d 32       	cpi	r24, 0x2D	; 45
    4f5e:	91 05       	cpc	r25, r1
    4f60:	a1 05       	cpc	r26, r1
    4f62:	b1 05       	cpc	r27, r1
    4f64:	59 f1       	breq	.+86     	; 0x4fbc <SERVO_vMoveToAngle+0xb8>
    4f66:	31 c0       	rjmp	.+98     	; 0x4fca <SERVO_vMoveToAngle+0xc6>
    4f68:	8d 81       	ldd	r24, Y+5	; 0x05
    4f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f6c:	af 81       	ldd	r26, Y+7	; 0x07
    4f6e:	b8 85       	ldd	r27, Y+8	; 0x08
    4f70:	87 38       	cpi	r24, 0x87	; 135
    4f72:	91 05       	cpc	r25, r1
    4f74:	a1 05       	cpc	r26, r1
    4f76:	b1 05       	cpc	r27, r1
    4f78:	89 f0       	breq	.+34     	; 0x4f9c <SERVO_vMoveToAngle+0x98>
    4f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f7e:	af 81       	ldd	r26, Y+7	; 0x07
    4f80:	b8 85       	ldd	r27, Y+8	; 0x08
    4f82:	84 3b       	cpi	r24, 0xB4	; 180
    4f84:	91 05       	cpc	r25, r1
    4f86:	a1 05       	cpc	r26, r1
    4f88:	b1 05       	cpc	r27, r1
    4f8a:	f9 f4       	brne	.+62     	; 0x4fca <SERVO_vMoveToAngle+0xc6>
    {
    case 180:
        TIMER_vPWMSignal(TIMER1, 12.5);
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	40 e0       	ldi	r20, 0x00	; 0
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	68 e4       	ldi	r22, 0x48	; 72
    4f94:	71 e4       	ldi	r23, 0x41	; 65
    4f96:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>
    4f9a:	17 c0       	rjmp	.+46     	; 0x4fca <SERVO_vMoveToAngle+0xc6>
        break;
    case 135:
        TIMER_vPWMSignal(TIMER1, 10.125);
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	40 e0       	ldi	r20, 0x00	; 0
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	62 e2       	ldi	r22, 0x22	; 34
    4fa4:	71 e4       	ldi	r23, 0x41	; 65
    4fa6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>
    4faa:	0f c0       	rjmp	.+30     	; 0x4fca <SERVO_vMoveToAngle+0xc6>
        break;
    case 90:
        TIMER_vPWMSignal(TIMER1, 7.75);
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	40 e0       	ldi	r20, 0x00	; 0
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	68 ef       	ldi	r22, 0xF8	; 248
    4fb4:	70 e4       	ldi	r23, 0x40	; 64
    4fb6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>
    4fba:	07 c0       	rjmp	.+14     	; 0x4fca <SERVO_vMoveToAngle+0xc6>
        break;
    case 45:
        TIMER_vPWMSignal(TIMER1, 5.375);
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	40 e0       	ldi	r20, 0x00	; 0
    4fc0:	50 e0       	ldi	r21, 0x00	; 0
    4fc2:	6c ea       	ldi	r22, 0xAC	; 172
    4fc4:	70 e4       	ldi	r23, 0x40	; 64
    4fc6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>
    default:
        break;
    }

    // TIMER_vSetOcrValue(TIMER1, 2500);
}
    4fca:	28 96       	adiw	r28, 0x08	; 8
    4fcc:	0f b6       	in	r0, 0x3f	; 63
    4fce:	f8 94       	cli
    4fd0:	de bf       	out	0x3e, r29	; 62
    4fd2:	0f be       	out	0x3f, r0	; 63
    4fd4:	cd bf       	out	0x3d, r28	; 61
    4fd6:	cf 91       	pop	r28
    4fd8:	df 91       	pop	r29
    4fda:	08 95       	ret

00004fdc <LED_vInit>:
#include "LED_int.h"

#include "../../MCAL/DIO/DIO_int.h"

void LED_vInit(u8 A_u8LedNo)
{
    4fdc:	df 93       	push	r29
    4fde:	cf 93       	push	r28
    4fe0:	00 d0       	rcall	.+0      	; 0x4fe2 <LED_vInit+0x6>
    4fe2:	0f 92       	push	r0
    4fe4:	cd b7       	in	r28, 0x3d	; 61
    4fe6:	de b7       	in	r29, 0x3e	; 62
    4fe8:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    4fea:	89 81       	ldd	r24, Y+1	; 0x01
    4fec:	28 2f       	mov	r18, r24
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	3b 83       	std	Y+3, r19	; 0x03
    4ff2:	2a 83       	std	Y+2, r18	; 0x02
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff8:	83 30       	cpi	r24, 0x03	; 3
    4ffa:	91 05       	cpc	r25, r1
    4ffc:	d9 f1       	breq	.+118    	; 0x5074 <LED_vInit+0x98>
    4ffe:	2a 81       	ldd	r18, Y+2	; 0x02
    5000:	3b 81       	ldd	r19, Y+3	; 0x03
    5002:	24 30       	cpi	r18, 0x04	; 4
    5004:	31 05       	cpc	r19, r1
    5006:	7c f4       	brge	.+30     	; 0x5026 <LED_vInit+0x4a>
    5008:	8a 81       	ldd	r24, Y+2	; 0x02
    500a:	9b 81       	ldd	r25, Y+3	; 0x03
    500c:	81 30       	cpi	r24, 0x01	; 1
    500e:	91 05       	cpc	r25, r1
    5010:	29 f1       	breq	.+74     	; 0x505c <LED_vInit+0x80>
    5012:	2a 81       	ldd	r18, Y+2	; 0x02
    5014:	3b 81       	ldd	r19, Y+3	; 0x03
    5016:	22 30       	cpi	r18, 0x02	; 2
    5018:	31 05       	cpc	r19, r1
    501a:	34 f5       	brge	.+76     	; 0x5068 <LED_vInit+0x8c>
    501c:	8a 81       	ldd	r24, Y+2	; 0x02
    501e:	9b 81       	ldd	r25, Y+3	; 0x03
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	b1 f0       	breq	.+44     	; 0x5050 <LED_vInit+0x74>
    5024:	44 c0       	rjmp	.+136    	; 0x50ae <LED_vInit+0xd2>
    5026:	2a 81       	ldd	r18, Y+2	; 0x02
    5028:	3b 81       	ldd	r19, Y+3	; 0x03
    502a:	25 30       	cpi	r18, 0x05	; 5
    502c:	31 05       	cpc	r19, r1
    502e:	71 f1       	breq	.+92     	; 0x508c <LED_vInit+0xb0>
    5030:	8a 81       	ldd	r24, Y+2	; 0x02
    5032:	9b 81       	ldd	r25, Y+3	; 0x03
    5034:	85 30       	cpi	r24, 0x05	; 5
    5036:	91 05       	cpc	r25, r1
    5038:	1c f1       	brlt	.+70     	; 0x5080 <LED_vInit+0xa4>
    503a:	2a 81       	ldd	r18, Y+2	; 0x02
    503c:	3b 81       	ldd	r19, Y+3	; 0x03
    503e:	26 30       	cpi	r18, 0x06	; 6
    5040:	31 05       	cpc	r19, r1
    5042:	51 f1       	breq	.+84     	; 0x5098 <LED_vInit+0xbc>
    5044:	8a 81       	ldd	r24, Y+2	; 0x02
    5046:	9b 81       	ldd	r25, Y+3	; 0x03
    5048:	87 30       	cpi	r24, 0x07	; 7
    504a:	91 05       	cpc	r25, r1
    504c:	59 f1       	breq	.+86     	; 0x50a4 <LED_vInit+0xc8>
    504e:	2f c0       	rjmp	.+94     	; 0x50ae <LED_vInit+0xd2>
	{
	case LED0:
		DIO_vSetPinDir(LED0_PORT, LED0_PIN, DIR_OUTPUT);
    5050:	82 e0       	ldi	r24, 0x02	; 2
    5052:	60 e0       	ldi	r22, 0x00	; 0
    5054:	41 e0       	ldi	r20, 0x01	; 1
    5056:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    505a:	29 c0       	rjmp	.+82     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED1:
		DIO_vSetPinDir(LED1_PORT, LED1_PIN, DIR_OUTPUT);
    505c:	82 e0       	ldi	r24, 0x02	; 2
    505e:	61 e0       	ldi	r22, 0x01	; 1
    5060:	41 e0       	ldi	r20, 0x01	; 1
    5062:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    5066:	23 c0       	rjmp	.+70     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED2:
		DIO_vSetPinDir(LED2_PORT, LED2_PIN, DIR_OUTPUT);
    5068:	82 e0       	ldi	r24, 0x02	; 2
    506a:	62 e0       	ldi	r22, 0x02	; 2
    506c:	41 e0       	ldi	r20, 0x01	; 1
    506e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    5072:	1d c0       	rjmp	.+58     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED3:
		DIO_vSetPinDir(LED3_PORT, LED3_PIN, DIR_OUTPUT);
    5074:	82 e0       	ldi	r24, 0x02	; 2
    5076:	63 e0       	ldi	r22, 0x03	; 3
    5078:	41 e0       	ldi	r20, 0x01	; 1
    507a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    507e:	17 c0       	rjmp	.+46     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED4:
		DIO_vSetPinDir(LED4_PORT, LED4_PIN, DIR_OUTPUT);
    5080:	82 e0       	ldi	r24, 0x02	; 2
    5082:	64 e0       	ldi	r22, 0x04	; 4
    5084:	41 e0       	ldi	r20, 0x01	; 1
    5086:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    508a:	11 c0       	rjmp	.+34     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED5:
		DIO_vSetPinDir(LED5_PORT, LED5_PIN, DIR_OUTPUT);
    508c:	82 e0       	ldi	r24, 0x02	; 2
    508e:	65 e0       	ldi	r22, 0x05	; 5
    5090:	41 e0       	ldi	r20, 0x01	; 1
    5092:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    5096:	0b c0       	rjmp	.+22     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED6:
		DIO_vSetPinDir(LED6_PORT, LED6_PIN, DIR_OUTPUT);
    5098:	82 e0       	ldi	r24, 0x02	; 2
    509a:	66 e0       	ldi	r22, 0x06	; 6
    509c:	41 e0       	ldi	r20, 0x01	; 1
    509e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    50a2:	05 c0       	rjmp	.+10     	; 0x50ae <LED_vInit+0xd2>
		break;
	case LED7:
		DIO_vSetPinDir(LED7_PORT, LED7_PIN, DIR_OUTPUT);
    50a4:	82 e0       	ldi	r24, 0x02	; 2
    50a6:	67 e0       	ldi	r22, 0x07	; 7
    50a8:	41 e0       	ldi	r20, 0x01	; 1
    50aa:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
		break;
	}
}
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <LED_vTurnOn>:
void LED_vTurnOn(u8 A_u8LedNo)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	00 d0       	rcall	.+0      	; 0x50c0 <LED_vTurnOn+0x6>
    50c0:	0f 92       	push	r0
    50c2:	cd b7       	in	r28, 0x3d	; 61
    50c4:	de b7       	in	r29, 0x3e	; 62
    50c6:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    50c8:	89 81       	ldd	r24, Y+1	; 0x01
    50ca:	28 2f       	mov	r18, r24
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	3b 83       	std	Y+3, r19	; 0x03
    50d0:	2a 83       	std	Y+2, r18	; 0x02
    50d2:	8a 81       	ldd	r24, Y+2	; 0x02
    50d4:	9b 81       	ldd	r25, Y+3	; 0x03
    50d6:	83 30       	cpi	r24, 0x03	; 3
    50d8:	91 05       	cpc	r25, r1
    50da:	d9 f1       	breq	.+118    	; 0x5152 <LED_vTurnOn+0x98>
    50dc:	2a 81       	ldd	r18, Y+2	; 0x02
    50de:	3b 81       	ldd	r19, Y+3	; 0x03
    50e0:	24 30       	cpi	r18, 0x04	; 4
    50e2:	31 05       	cpc	r19, r1
    50e4:	7c f4       	brge	.+30     	; 0x5104 <LED_vTurnOn+0x4a>
    50e6:	8a 81       	ldd	r24, Y+2	; 0x02
    50e8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ea:	81 30       	cpi	r24, 0x01	; 1
    50ec:	91 05       	cpc	r25, r1
    50ee:	29 f1       	breq	.+74     	; 0x513a <LED_vTurnOn+0x80>
    50f0:	2a 81       	ldd	r18, Y+2	; 0x02
    50f2:	3b 81       	ldd	r19, Y+3	; 0x03
    50f4:	22 30       	cpi	r18, 0x02	; 2
    50f6:	31 05       	cpc	r19, r1
    50f8:	34 f5       	brge	.+76     	; 0x5146 <LED_vTurnOn+0x8c>
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	9b 81       	ldd	r25, Y+3	; 0x03
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	b1 f0       	breq	.+44     	; 0x512e <LED_vTurnOn+0x74>
    5102:	44 c0       	rjmp	.+136    	; 0x518c <LED_vTurnOn+0xd2>
    5104:	2a 81       	ldd	r18, Y+2	; 0x02
    5106:	3b 81       	ldd	r19, Y+3	; 0x03
    5108:	25 30       	cpi	r18, 0x05	; 5
    510a:	31 05       	cpc	r19, r1
    510c:	71 f1       	breq	.+92     	; 0x516a <LED_vTurnOn+0xb0>
    510e:	8a 81       	ldd	r24, Y+2	; 0x02
    5110:	9b 81       	ldd	r25, Y+3	; 0x03
    5112:	85 30       	cpi	r24, 0x05	; 5
    5114:	91 05       	cpc	r25, r1
    5116:	1c f1       	brlt	.+70     	; 0x515e <LED_vTurnOn+0xa4>
    5118:	2a 81       	ldd	r18, Y+2	; 0x02
    511a:	3b 81       	ldd	r19, Y+3	; 0x03
    511c:	26 30       	cpi	r18, 0x06	; 6
    511e:	31 05       	cpc	r19, r1
    5120:	51 f1       	breq	.+84     	; 0x5176 <LED_vTurnOn+0xbc>
    5122:	8a 81       	ldd	r24, Y+2	; 0x02
    5124:	9b 81       	ldd	r25, Y+3	; 0x03
    5126:	87 30       	cpi	r24, 0x07	; 7
    5128:	91 05       	cpc	r25, r1
    512a:	59 f1       	breq	.+86     	; 0x5182 <LED_vTurnOn+0xc8>
    512c:	2f c0       	rjmp	.+94     	; 0x518c <LED_vTurnOn+0xd2>
	{
	case LED0:
		DIO_vSetPinVal(LED0_PORT, LED0_PIN, HIGH);
    512e:	82 e0       	ldi	r24, 0x02	; 2
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	41 e0       	ldi	r20, 0x01	; 1
    5134:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5138:	29 c0       	rjmp	.+82     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED1:
		DIO_vSetPinVal(LED1_PORT, LED1_PIN, HIGH);
    513a:	82 e0       	ldi	r24, 0x02	; 2
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	41 e0       	ldi	r20, 0x01	; 1
    5140:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5144:	23 c0       	rjmp	.+70     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED2:
		DIO_vSetPinVal(LED2_PORT, LED2_PIN, HIGH);
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	62 e0       	ldi	r22, 0x02	; 2
    514a:	41 e0       	ldi	r20, 0x01	; 1
    514c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5150:	1d c0       	rjmp	.+58     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED3:
		DIO_vSetPinVal(LED3_PORT, LED3_PIN, HIGH);
    5152:	82 e0       	ldi	r24, 0x02	; 2
    5154:	63 e0       	ldi	r22, 0x03	; 3
    5156:	41 e0       	ldi	r20, 0x01	; 1
    5158:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    515c:	17 c0       	rjmp	.+46     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED4:
		DIO_vSetPinVal(LED4_PORT, LED4_PIN, HIGH);
    515e:	82 e0       	ldi	r24, 0x02	; 2
    5160:	64 e0       	ldi	r22, 0x04	; 4
    5162:	41 e0       	ldi	r20, 0x01	; 1
    5164:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5168:	11 c0       	rjmp	.+34     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED5:
		DIO_vSetPinVal(LED5_PORT, LED5_PIN, HIGH);
    516a:	82 e0       	ldi	r24, 0x02	; 2
    516c:	65 e0       	ldi	r22, 0x05	; 5
    516e:	41 e0       	ldi	r20, 0x01	; 1
    5170:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5174:	0b c0       	rjmp	.+22     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED6:
		DIO_vSetPinVal(LED6_PORT, LED6_PIN, HIGH);
    5176:	82 e0       	ldi	r24, 0x02	; 2
    5178:	66 e0       	ldi	r22, 0x06	; 6
    517a:	41 e0       	ldi	r20, 0x01	; 1
    517c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5180:	05 c0       	rjmp	.+10     	; 0x518c <LED_vTurnOn+0xd2>
		break;
	case LED7:
		DIO_vSetPinVal(LED7_PORT, LED7_PIN, HIGH);
    5182:	82 e0       	ldi	r24, 0x02	; 2
    5184:	67 e0       	ldi	r22, 0x07	; 7
    5186:	41 e0       	ldi	r20, 0x01	; 1
    5188:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
		break;
	}
}
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	cf 91       	pop	r28
    5194:	df 91       	pop	r29
    5196:	08 95       	ret

00005198 <LED_vTurnOff>:
void LED_vTurnOff(u8 A_u8LedNo)
{
    5198:	df 93       	push	r29
    519a:	cf 93       	push	r28
    519c:	00 d0       	rcall	.+0      	; 0x519e <LED_vTurnOff+0x6>
    519e:	0f 92       	push	r0
    51a0:	cd b7       	in	r28, 0x3d	; 61
    51a2:	de b7       	in	r29, 0x3e	; 62
    51a4:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	28 2f       	mov	r18, r24
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	3b 83       	std	Y+3, r19	; 0x03
    51ae:	2a 83       	std	Y+2, r18	; 0x02
    51b0:	8a 81       	ldd	r24, Y+2	; 0x02
    51b2:	9b 81       	ldd	r25, Y+3	; 0x03
    51b4:	83 30       	cpi	r24, 0x03	; 3
    51b6:	91 05       	cpc	r25, r1
    51b8:	d9 f1       	breq	.+118    	; 0x5230 <LED_vTurnOff+0x98>
    51ba:	2a 81       	ldd	r18, Y+2	; 0x02
    51bc:	3b 81       	ldd	r19, Y+3	; 0x03
    51be:	24 30       	cpi	r18, 0x04	; 4
    51c0:	31 05       	cpc	r19, r1
    51c2:	7c f4       	brge	.+30     	; 0x51e2 <LED_vTurnOff+0x4a>
    51c4:	8a 81       	ldd	r24, Y+2	; 0x02
    51c6:	9b 81       	ldd	r25, Y+3	; 0x03
    51c8:	81 30       	cpi	r24, 0x01	; 1
    51ca:	91 05       	cpc	r25, r1
    51cc:	29 f1       	breq	.+74     	; 0x5218 <LED_vTurnOff+0x80>
    51ce:	2a 81       	ldd	r18, Y+2	; 0x02
    51d0:	3b 81       	ldd	r19, Y+3	; 0x03
    51d2:	22 30       	cpi	r18, 0x02	; 2
    51d4:	31 05       	cpc	r19, r1
    51d6:	34 f5       	brge	.+76     	; 0x5224 <LED_vTurnOff+0x8c>
    51d8:	8a 81       	ldd	r24, Y+2	; 0x02
    51da:	9b 81       	ldd	r25, Y+3	; 0x03
    51dc:	00 97       	sbiw	r24, 0x00	; 0
    51de:	b1 f0       	breq	.+44     	; 0x520c <LED_vTurnOff+0x74>
    51e0:	44 c0       	rjmp	.+136    	; 0x526a <LED_vTurnOff+0xd2>
    51e2:	2a 81       	ldd	r18, Y+2	; 0x02
    51e4:	3b 81       	ldd	r19, Y+3	; 0x03
    51e6:	25 30       	cpi	r18, 0x05	; 5
    51e8:	31 05       	cpc	r19, r1
    51ea:	71 f1       	breq	.+92     	; 0x5248 <LED_vTurnOff+0xb0>
    51ec:	8a 81       	ldd	r24, Y+2	; 0x02
    51ee:	9b 81       	ldd	r25, Y+3	; 0x03
    51f0:	85 30       	cpi	r24, 0x05	; 5
    51f2:	91 05       	cpc	r25, r1
    51f4:	1c f1       	brlt	.+70     	; 0x523c <LED_vTurnOff+0xa4>
    51f6:	2a 81       	ldd	r18, Y+2	; 0x02
    51f8:	3b 81       	ldd	r19, Y+3	; 0x03
    51fa:	26 30       	cpi	r18, 0x06	; 6
    51fc:	31 05       	cpc	r19, r1
    51fe:	51 f1       	breq	.+84     	; 0x5254 <LED_vTurnOff+0xbc>
    5200:	8a 81       	ldd	r24, Y+2	; 0x02
    5202:	9b 81       	ldd	r25, Y+3	; 0x03
    5204:	87 30       	cpi	r24, 0x07	; 7
    5206:	91 05       	cpc	r25, r1
    5208:	59 f1       	breq	.+86     	; 0x5260 <LED_vTurnOff+0xc8>
    520a:	2f c0       	rjmp	.+94     	; 0x526a <LED_vTurnOff+0xd2>
	{
	case LED0:
		DIO_vSetPinVal(LED0_PORT, LED0_PIN, LOW);
    520c:	82 e0       	ldi	r24, 0x02	; 2
    520e:	60 e0       	ldi	r22, 0x00	; 0
    5210:	40 e0       	ldi	r20, 0x00	; 0
    5212:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5216:	29 c0       	rjmp	.+82     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED1:
		DIO_vSetPinVal(LED1_PORT, LED1_PIN, LOW);
    5218:	82 e0       	ldi	r24, 0x02	; 2
    521a:	61 e0       	ldi	r22, 0x01	; 1
    521c:	40 e0       	ldi	r20, 0x00	; 0
    521e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5222:	23 c0       	rjmp	.+70     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED2:
		DIO_vSetPinVal(LED2_PORT, LED2_PIN, LOW);
    5224:	82 e0       	ldi	r24, 0x02	; 2
    5226:	62 e0       	ldi	r22, 0x02	; 2
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    522e:	1d c0       	rjmp	.+58     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED3:
		DIO_vSetPinVal(LED3_PORT, LED3_PIN, LOW);
    5230:	82 e0       	ldi	r24, 0x02	; 2
    5232:	63 e0       	ldi	r22, 0x03	; 3
    5234:	40 e0       	ldi	r20, 0x00	; 0
    5236:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    523a:	17 c0       	rjmp	.+46     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED4:
		DIO_vSetPinVal(LED4_PORT, LED4_PIN, LOW);
    523c:	82 e0       	ldi	r24, 0x02	; 2
    523e:	64 e0       	ldi	r22, 0x04	; 4
    5240:	40 e0       	ldi	r20, 0x00	; 0
    5242:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5246:	11 c0       	rjmp	.+34     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED5:
		DIO_vSetPinVal(LED5_PORT, LED5_PIN, LOW);
    5248:	82 e0       	ldi	r24, 0x02	; 2
    524a:	65 e0       	ldi	r22, 0x05	; 5
    524c:	40 e0       	ldi	r20, 0x00	; 0
    524e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    5252:	0b c0       	rjmp	.+22     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED6:
		DIO_vSetPinVal(LED6_PORT, LED6_PIN, LOW);
    5254:	82 e0       	ldi	r24, 0x02	; 2
    5256:	66 e0       	ldi	r22, 0x06	; 6
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    525e:	05 c0       	rjmp	.+10     	; 0x526a <LED_vTurnOff+0xd2>
		break;
	case LED7:
		DIO_vSetPinVal(LED7_PORT, LED7_PIN, LOW);
    5260:	82 e0       	ldi	r24, 0x02	; 2
    5262:	67 e0       	ldi	r22, 0x07	; 7
    5264:	40 e0       	ldi	r20, 0x00	; 0
    5266:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
		break;
	}
}
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <LDR_vInit>:
#include "../../MCAL/ADC/ADC_int.h"
#include "LDR_pri.h"
#include "LDR_cfg.h"
#include "LDR_int.h"

void LDR_vInit(){
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	cd b7       	in	r28, 0x3d	; 61
    527c:	de b7       	in	r29, 0x3e	; 62
	 ADC_vInit();
    527e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <ADC_vInit>
}
    5282:	cf 91       	pop	r28
    5284:	df 91       	pop	r29
    5286:	08 95       	ret

00005288 <LDR_f32GetLuxValue>:
f32 LDR_f32GetLuxValue(){
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	cd b7       	in	r28, 0x3d	; 61
    528e:	de b7       	in	r29, 0x3e	; 62
    5290:	2e 97       	sbiw	r28, 0x0e	; 14
    5292:	0f b6       	in	r0, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	de bf       	out	0x3e, r29	; 62
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16DigitalReading;
	f32 L_f32OutputVolt, L_f32LuxValue,L_f32LdrResValue;
	L_u16DigitalReading =ADC_u16ReadDigitalDataSync(ADC0);
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <ADC_u16ReadDigitalDataSync>
    52a2:	9e 87       	std	Y+14, r25	; 0x0e
    52a4:	8d 87       	std	Y+13, r24	; 0x0d
	L_f32OutputVolt = L_u16DigitalReading * REFERENCE_VOLTAGE / TWO_POWER_ADC_RESOLUTION;
    52a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    52aa:	cc 01       	movw	r24, r24
    52ac:	a0 e0       	ldi	r26, 0x00	; 0
    52ae:	b0 e0       	ldi	r27, 0x00	; 0
    52b0:	bc 01       	movw	r22, r24
    52b2:	cd 01       	movw	r24, r26
    52b4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	bc 01       	movw	r22, r24
    52be:	cd 01       	movw	r24, r26
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 ea       	ldi	r20, 0xA0	; 160
    52c6:	50 e4       	ldi	r21, 0x40	; 64
    52c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	bc 01       	movw	r22, r24
    52d2:	cd 01       	movw	r24, r26
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e8       	ldi	r20, 0x80	; 128
    52da:	54 e4       	ldi	r21, 0x44	; 68
    52dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	89 87       	std	Y+9, r24	; 0x09
    52e6:	9a 87       	std	Y+10, r25	; 0x0a
    52e8:	ab 87       	std	Y+11, r26	; 0x0b
    52ea:	bc 87       	std	Y+12, r27	; 0x0c
	L_f32LdrResValue =  (RES_KO * INPUT_VOLT - RES_KO * L_f32OutputVolt) / 	L_f32OutputVolt;
    52ec:	69 85       	ldd	r22, Y+9	; 0x09
    52ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    52f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    52f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	30 e4       	ldi	r19, 0x40	; 64
    52f8:	4c e9       	ldi	r20, 0x9C	; 156
    52fa:	55 ec       	ldi	r21, 0xC5	; 197
    52fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	bc 01       	movw	r22, r24
    5306:	cd 01       	movw	r24, r26
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e5       	ldi	r19, 0x50	; 80
    530c:	43 ec       	ldi	r20, 0xC3	; 195
    530e:	56 e4       	ldi	r21, 0x46	; 70
    5310:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	bc 01       	movw	r22, r24
    531a:	cd 01       	movw	r24, r26
    531c:	29 85       	ldd	r18, Y+9	; 0x09
    531e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5320:	4b 85       	ldd	r20, Y+11	; 0x0b
    5322:	5c 85       	ldd	r21, Y+12	; 0x0c
    5324:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5328:	dc 01       	movw	r26, r24
    532a:	cb 01       	movw	r24, r22
    532c:	89 83       	std	Y+1, r24	; 0x01
    532e:	9a 83       	std	Y+2, r25	; 0x02
    5330:	ab 83       	std	Y+3, r26	; 0x03
    5332:	bc 83       	std	Y+4, r27	; 0x04
	L_f32LuxValue = 500.0/ (L_f32LdrResValue/1000);
    5334:	69 81       	ldd	r22, Y+1	; 0x01
    5336:	7a 81       	ldd	r23, Y+2	; 0x02
    5338:	8b 81       	ldd	r24, Y+3	; 0x03
    533a:	9c 81       	ldd	r25, Y+4	; 0x04
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	4a e7       	ldi	r20, 0x7A	; 122
    5342:	54 e4       	ldi	r21, 0x44	; 68
    5344:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	9c 01       	movw	r18, r24
    534e:	ad 01       	movw	r20, r26
    5350:	60 e0       	ldi	r22, 0x00	; 0
    5352:	70 e0       	ldi	r23, 0x00	; 0
    5354:	8a ef       	ldi	r24, 0xFA	; 250
    5356:	93 e4       	ldi	r25, 0x43	; 67
    5358:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    535c:	dc 01       	movw	r26, r24
    535e:	cb 01       	movw	r24, r22
    5360:	8d 83       	std	Y+5, r24	; 0x05
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	af 83       	std	Y+7, r26	; 0x07
    5366:	b8 87       	std	Y+8, r27	; 0x08
	return (L_f32LuxValue);
    5368:	8d 81       	ldd	r24, Y+5	; 0x05
    536a:	9e 81       	ldd	r25, Y+6	; 0x06
    536c:	af 81       	ldd	r26, Y+7	; 0x07
    536e:	b8 85       	ldd	r27, Y+8	; 0x08
}
    5370:	bc 01       	movw	r22, r24
    5372:	cd 01       	movw	r24, r26
    5374:	2e 96       	adiw	r28, 0x0e	; 14
    5376:	0f b6       	in	r0, 0x3f	; 63
    5378:	f8 94       	cli
    537a:	de bf       	out	0x3e, r29	; 62
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	cd bf       	out	0x3d, r28	; 61
    5380:	cf 91       	pop	r28
    5382:	df 91       	pop	r29
    5384:	08 95       	ret

00005386 <LCD_vInit>:
#include "LCD_cfg.h"
#include "LCD_int.h"
#include <avr/delay.h>
#include <stdlib.h>
void LCD_vInit()
{
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	df 93       	push	r29
    538c:	cf 93       	push	r28
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	cc 54       	subi	r28, 0x4C	; 76
    5394:	d0 40       	sbci	r29, 0x00	; 0
    5396:	0f b6       	in	r0, 0x3f	; 63
    5398:	f8 94       	cli
    539a:	de bf       	out	0x3e, r29	; 62
    539c:	0f be       	out	0x3f, r0	; 63
    539e:	cd bf       	out	0x3d, r28	; 61
    53a0:	fe 01       	movw	r30, r28
    53a2:	e7 5b       	subi	r30, 0xB7	; 183
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	a8 ec       	ldi	r26, 0xC8	; 200
    53ac:	b2 e4       	ldi	r27, 0x42	; 66
    53ae:	80 83       	st	Z, r24
    53b0:	91 83       	std	Z+1, r25	; 0x01
    53b2:	a2 83       	std	Z+2, r26	; 0x02
    53b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b6:	8e 01       	movw	r16, r28
    53b8:	0b 5b       	subi	r16, 0xBB	; 187
    53ba:	1f 4f       	sbci	r17, 0xFF	; 255
    53bc:	fe 01       	movw	r30, r28
    53be:	e7 5b       	subi	r30, 0xB7	; 183
    53c0:	ff 4f       	sbci	r31, 0xFF	; 255
    53c2:	60 81       	ld	r22, Z
    53c4:	71 81       	ldd	r23, Z+1	; 0x01
    53c6:	82 81       	ldd	r24, Z+2	; 0x02
    53c8:	93 81       	ldd	r25, Z+3	; 0x03
    53ca:	20 e0       	ldi	r18, 0x00	; 0
    53cc:	30 e0       	ldi	r19, 0x00	; 0
    53ce:	4a ef       	ldi	r20, 0xFA	; 250
    53d0:	54 e4       	ldi	r21, 0x44	; 68
    53d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	f8 01       	movw	r30, r16
    53dc:	80 83       	st	Z, r24
    53de:	91 83       	std	Z+1, r25	; 0x01
    53e0:	a2 83       	std	Z+2, r26	; 0x02
    53e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53e4:	fe 01       	movw	r30, r28
    53e6:	eb 5b       	subi	r30, 0xBB	; 187
    53e8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ea:	60 81       	ld	r22, Z
    53ec:	71 81       	ldd	r23, Z+1	; 0x01
    53ee:	82 81       	ldd	r24, Z+2	; 0x02
    53f0:	93 81       	ldd	r25, Z+3	; 0x03
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	40 e8       	ldi	r20, 0x80	; 128
    53f8:	5f e3       	ldi	r21, 0x3F	; 63
    53fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53fe:	88 23       	and	r24, r24
    5400:	44 f4       	brge	.+16     	; 0x5412 <LCD_vInit+0x8c>
		__ticks = 1;
    5402:	fe 01       	movw	r30, r28
    5404:	ed 5b       	subi	r30, 0xBD	; 189
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	91 83       	std	Z+1, r25	; 0x01
    540e:	80 83       	st	Z, r24
    5410:	64 c0       	rjmp	.+200    	; 0x54da <LCD_vInit+0x154>
	else if (__tmp > 65535)
    5412:	fe 01       	movw	r30, r28
    5414:	eb 5b       	subi	r30, 0xBB	; 187
    5416:	ff 4f       	sbci	r31, 0xFF	; 255
    5418:	60 81       	ld	r22, Z
    541a:	71 81       	ldd	r23, Z+1	; 0x01
    541c:	82 81       	ldd	r24, Z+2	; 0x02
    541e:	93 81       	ldd	r25, Z+3	; 0x03
    5420:	20 e0       	ldi	r18, 0x00	; 0
    5422:	3f ef       	ldi	r19, 0xFF	; 255
    5424:	4f e7       	ldi	r20, 0x7F	; 127
    5426:	57 e4       	ldi	r21, 0x47	; 71
    5428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    542c:	18 16       	cp	r1, r24
    542e:	0c f0       	brlt	.+2      	; 0x5432 <LCD_vInit+0xac>
    5430:	43 c0       	rjmp	.+134    	; 0x54b8 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5432:	fe 01       	movw	r30, r28
    5434:	e7 5b       	subi	r30, 0xB7	; 183
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	60 81       	ld	r22, Z
    543a:	71 81       	ldd	r23, Z+1	; 0x01
    543c:	82 81       	ldd	r24, Z+2	; 0x02
    543e:	93 81       	ldd	r25, Z+3	; 0x03
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e2       	ldi	r20, 0x20	; 32
    5446:	51 e4       	ldi	r21, 0x41	; 65
    5448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    544c:	dc 01       	movw	r26, r24
    544e:	cb 01       	movw	r24, r22
    5450:	8e 01       	movw	r16, r28
    5452:	0d 5b       	subi	r16, 0xBD	; 189
    5454:	1f 4f       	sbci	r17, 0xFF	; 255
    5456:	bc 01       	movw	r22, r24
    5458:	cd 01       	movw	r24, r26
    545a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	f8 01       	movw	r30, r16
    5464:	91 83       	std	Z+1, r25	; 0x01
    5466:	80 83       	st	Z, r24
    5468:	1f c0       	rjmp	.+62     	; 0x54a8 <LCD_vInit+0x122>
    546a:	fe 01       	movw	r30, r28
    546c:	ef 5b       	subi	r30, 0xBF	; 191
    546e:	ff 4f       	sbci	r31, 0xFF	; 255
    5470:	88 ec       	ldi	r24, 0xC8	; 200
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	91 83       	std	Z+1, r25	; 0x01
    5476:	80 83       	st	Z, r24
    5478:	fe 01       	movw	r30, r28
    547a:	ef 5b       	subi	r30, 0xBF	; 191
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	80 81       	ld	r24, Z
    5480:	91 81       	ldd	r25, Z+1	; 0x01
    5482:	01 97       	sbiw	r24, 0x01	; 1
    5484:	f1 f7       	brne	.-4      	; 0x5482 <LCD_vInit+0xfc>
    5486:	fe 01       	movw	r30, r28
    5488:	ef 5b       	subi	r30, 0xBF	; 191
    548a:	ff 4f       	sbci	r31, 0xFF	; 255
    548c:	91 83       	std	Z+1, r25	; 0x01
    548e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5490:	de 01       	movw	r26, r28
    5492:	ad 5b       	subi	r26, 0xBD	; 189
    5494:	bf 4f       	sbci	r27, 0xFF	; 255
    5496:	fe 01       	movw	r30, r28
    5498:	ed 5b       	subi	r30, 0xBD	; 189
    549a:	ff 4f       	sbci	r31, 0xFF	; 255
    549c:	80 81       	ld	r24, Z
    549e:	91 81       	ldd	r25, Z+1	; 0x01
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	11 96       	adiw	r26, 0x01	; 1
    54a4:	9c 93       	st	X, r25
    54a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a8:	fe 01       	movw	r30, r28
    54aa:	ed 5b       	subi	r30, 0xBD	; 189
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	80 81       	ld	r24, Z
    54b0:	91 81       	ldd	r25, Z+1	; 0x01
    54b2:	00 97       	sbiw	r24, 0x00	; 0
    54b4:	d1 f6       	brne	.-76     	; 0x546a <LCD_vInit+0xe4>
    54b6:	24 c0       	rjmp	.+72     	; 0x5500 <LCD_vInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b8:	8e 01       	movw	r16, r28
    54ba:	0d 5b       	subi	r16, 0xBD	; 189
    54bc:	1f 4f       	sbci	r17, 0xFF	; 255
    54be:	fe 01       	movw	r30, r28
    54c0:	eb 5b       	subi	r30, 0xBB	; 187
    54c2:	ff 4f       	sbci	r31, 0xFF	; 255
    54c4:	60 81       	ld	r22, Z
    54c6:	71 81       	ldd	r23, Z+1	; 0x01
    54c8:	82 81       	ldd	r24, Z+2	; 0x02
    54ca:	93 81       	ldd	r25, Z+3	; 0x03
    54cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	f8 01       	movw	r30, r16
    54d6:	91 83       	std	Z+1, r25	; 0x01
    54d8:	80 83       	st	Z, r24
    54da:	fe 01       	movw	r30, r28
    54dc:	ed 5b       	subi	r30, 0xBD	; 189
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 81       	ld	r24, Z
    54e2:	91 81       	ldd	r25, Z+1	; 0x01
    54e4:	fe 01       	movw	r30, r28
    54e6:	ff 96       	adiw	r30, 0x3f	; 63
    54e8:	91 83       	std	Z+1, r25	; 0x01
    54ea:	80 83       	st	Z, r24
    54ec:	fe 01       	movw	r30, r28
    54ee:	ff 96       	adiw	r30, 0x3f	; 63
    54f0:	80 81       	ld	r24, Z
    54f2:	91 81       	ldd	r25, Z+1	; 0x01
    54f4:	01 97       	sbiw	r24, 0x01	; 1
    54f6:	f1 f7       	brne	.-4      	; 0x54f4 <LCD_vInit+0x16e>
    54f8:	fe 01       	movw	r30, r28
    54fa:	ff 96       	adiw	r30, 0x3f	; 63
    54fc:	91 83       	std	Z+1, r25	; 0x01
    54fe:	80 83       	st	Z, r24
    _delay_ms(100);
    DIO_vSetPinDir(LCD_EN_PORT, LCD_EN_PIN, DIR_OUTPUT);
    5500:	80 e0       	ldi	r24, 0x00	; 0
    5502:	62 e0       	ldi	r22, 0x02	; 2
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinDir(LCD_RW_PORT, LCD_RW_PIN, DIR_OUTPUT);
    550a:	80 e0       	ldi	r24, 0x00	; 0
    550c:	61 e0       	ldi	r22, 0x01	; 1
    550e:	41 e0       	ldi	r20, 0x01	; 1
    5510:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, DIR_OUTPUT);
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	60 e0       	ldi	r22, 0x00	; 0
    5518:	41 e0       	ldi	r20, 0x01	; 1
    551a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
    DIO_vSetPortDir(LCD_DATA_PORT, PORT_OUT);
    551e:	83 e0       	ldi	r24, 0x03	; 3
    5520:	6f ef       	ldi	r22, 0xFF	; 255
    5522:	0e 94 21 15 	call	0x2a42	; 0x2a42 <DIO_vSetPortDir>

#if LCD_MODE == MODE_8_BIT
    LCD_vWriteCommand(MODE_8BIT_2LINE);
    5526:	88 e3       	ldi	r24, 0x38	; 56
    5528:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    552c:	80 e0       	ldi	r24, 0x00	; 0
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	a8 e4       	ldi	r26, 0x48	; 72
    5532:	b2 e4       	ldi	r27, 0x42	; 66
    5534:	8b af       	std	Y+59, r24	; 0x3b
    5536:	9c af       	std	Y+60, r25	; 0x3c
    5538:	ad af       	std	Y+61, r26	; 0x3d
    553a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    553c:	6b ad       	ldd	r22, Y+59	; 0x3b
    553e:	7c ad       	ldd	r23, Y+60	; 0x3c
    5540:	8d ad       	ldd	r24, Y+61	; 0x3d
    5542:	9e ad       	ldd	r25, Y+62	; 0x3e
    5544:	2b ea       	ldi	r18, 0xAB	; 171
    5546:	3a ea       	ldi	r19, 0xAA	; 170
    5548:	4a e2       	ldi	r20, 0x2A	; 42
    554a:	50 e4       	ldi	r21, 0x40	; 64
    554c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	8f ab       	std	Y+55, r24	; 0x37
    5556:	98 af       	std	Y+56, r25	; 0x38
    5558:	a9 af       	std	Y+57, r26	; 0x39
    555a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    555c:	6f a9       	ldd	r22, Y+55	; 0x37
    555e:	78 ad       	ldd	r23, Y+56	; 0x38
    5560:	89 ad       	ldd	r24, Y+57	; 0x39
    5562:	9a ad       	ldd	r25, Y+58	; 0x3a
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	40 e8       	ldi	r20, 0x80	; 128
    556a:	5f e3       	ldi	r21, 0x3F	; 63
    556c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5570:	88 23       	and	r24, r24
    5572:	1c f4       	brge	.+6      	; 0x557a <LCD_vInit+0x1f4>
		__ticks = 1;
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	8e ab       	std	Y+54, r24	; 0x36
    5578:	91 c0       	rjmp	.+290    	; 0x569c <LCD_vInit+0x316>
	else if (__tmp > 255)
    557a:	6f a9       	ldd	r22, Y+55	; 0x37
    557c:	78 ad       	ldd	r23, Y+56	; 0x38
    557e:	89 ad       	ldd	r24, Y+57	; 0x39
    5580:	9a ad       	ldd	r25, Y+58	; 0x3a
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	4f e7       	ldi	r20, 0x7F	; 127
    5588:	53 e4       	ldi	r21, 0x43	; 67
    558a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    558e:	18 16       	cp	r1, r24
    5590:	0c f0       	brlt	.+2      	; 0x5594 <LCD_vInit+0x20e>
    5592:	7b c0       	rjmp	.+246    	; 0x568a <LCD_vInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    5594:	6b ad       	ldd	r22, Y+59	; 0x3b
    5596:	7c ad       	ldd	r23, Y+60	; 0x3c
    5598:	8d ad       	ldd	r24, Y+61	; 0x3d
    559a:	9e ad       	ldd	r25, Y+62	; 0x3e
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	4a e7       	ldi	r20, 0x7A	; 122
    55a2:	54 e4       	ldi	r21, 0x44	; 68
    55a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22
    55ac:	8a ab       	std	Y+50, r24	; 0x32
    55ae:	9b ab       	std	Y+51, r25	; 0x33
    55b0:	ac ab       	std	Y+52, r26	; 0x34
    55b2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b4:	6a a9       	ldd	r22, Y+50	; 0x32
    55b6:	7b a9       	ldd	r23, Y+51	; 0x33
    55b8:	8c a9       	ldd	r24, Y+52	; 0x34
    55ba:	9d a9       	ldd	r25, Y+53	; 0x35
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	4a ef       	ldi	r20, 0xFA	; 250
    55c2:	54 e4       	ldi	r21, 0x44	; 68
    55c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	8e a7       	std	Y+46, r24	; 0x2e
    55ce:	9f a7       	std	Y+47, r25	; 0x2f
    55d0:	a8 ab       	std	Y+48, r26	; 0x30
    55d2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    55d4:	6e a5       	ldd	r22, Y+46	; 0x2e
    55d6:	7f a5       	ldd	r23, Y+47	; 0x2f
    55d8:	88 a9       	ldd	r24, Y+48	; 0x30
    55da:	99 a9       	ldd	r25, Y+49	; 0x31
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e8       	ldi	r20, 0x80	; 128
    55e2:	5f e3       	ldi	r21, 0x3F	; 63
    55e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55e8:	88 23       	and	r24, r24
    55ea:	2c f4       	brge	.+10     	; 0x55f6 <LCD_vInit+0x270>
		__ticks = 1;
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	9d a7       	std	Y+45, r25	; 0x2d
    55f2:	8c a7       	std	Y+44, r24	; 0x2c
    55f4:	3f c0       	rjmp	.+126    	; 0x5674 <LCD_vInit+0x2ee>
	else if (__tmp > 65535)
    55f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    55f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    55fa:	88 a9       	ldd	r24, Y+48	; 0x30
    55fc:	99 a9       	ldd	r25, Y+49	; 0x31
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	3f ef       	ldi	r19, 0xFF	; 255
    5602:	4f e7       	ldi	r20, 0x7F	; 127
    5604:	57 e4       	ldi	r21, 0x47	; 71
    5606:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    560a:	18 16       	cp	r1, r24
    560c:	4c f5       	brge	.+82     	; 0x5660 <LCD_vInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560e:	6a a9       	ldd	r22, Y+50	; 0x32
    5610:	7b a9       	ldd	r23, Y+51	; 0x33
    5612:	8c a9       	ldd	r24, Y+52	; 0x34
    5614:	9d a9       	ldd	r25, Y+53	; 0x35
    5616:	20 e0       	ldi	r18, 0x00	; 0
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	40 e2       	ldi	r20, 0x20	; 32
    561c:	51 e4       	ldi	r21, 0x41	; 65
    561e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5622:	dc 01       	movw	r26, r24
    5624:	cb 01       	movw	r24, r22
    5626:	bc 01       	movw	r22, r24
    5628:	cd 01       	movw	r24, r26
    562a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	9d a7       	std	Y+45, r25	; 0x2d
    5634:	8c a7       	std	Y+44, r24	; 0x2c
    5636:	0f c0       	rjmp	.+30     	; 0x5656 <LCD_vInit+0x2d0>
    5638:	88 ec       	ldi	r24, 0xC8	; 200
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	9b a7       	std	Y+43, r25	; 0x2b
    563e:	8a a7       	std	Y+42, r24	; 0x2a
    5640:	8a a5       	ldd	r24, Y+42	; 0x2a
    5642:	9b a5       	ldd	r25, Y+43	; 0x2b
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <LCD_vInit+0x2be>
    5648:	9b a7       	std	Y+43, r25	; 0x2b
    564a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564c:	8c a5       	ldd	r24, Y+44	; 0x2c
    564e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5650:	01 97       	sbiw	r24, 0x01	; 1
    5652:	9d a7       	std	Y+45, r25	; 0x2d
    5654:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5656:	8c a5       	ldd	r24, Y+44	; 0x2c
    5658:	9d a5       	ldd	r25, Y+45	; 0x2d
    565a:	00 97       	sbiw	r24, 0x00	; 0
    565c:	69 f7       	brne	.-38     	; 0x5638 <LCD_vInit+0x2b2>
    565e:	24 c0       	rjmp	.+72     	; 0x56a8 <LCD_vInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5660:	6e a5       	ldd	r22, Y+46	; 0x2e
    5662:	7f a5       	ldd	r23, Y+47	; 0x2f
    5664:	88 a9       	ldd	r24, Y+48	; 0x30
    5666:	99 a9       	ldd	r25, Y+49	; 0x31
    5668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	9d a7       	std	Y+45, r25	; 0x2d
    5672:	8c a7       	std	Y+44, r24	; 0x2c
    5674:	8c a5       	ldd	r24, Y+44	; 0x2c
    5676:	9d a5       	ldd	r25, Y+45	; 0x2d
    5678:	99 a7       	std	Y+41, r25	; 0x29
    567a:	88 a7       	std	Y+40, r24	; 0x28
    567c:	88 a5       	ldd	r24, Y+40	; 0x28
    567e:	99 a5       	ldd	r25, Y+41	; 0x29
    5680:	01 97       	sbiw	r24, 0x01	; 1
    5682:	f1 f7       	brne	.-4      	; 0x5680 <LCD_vInit+0x2fa>
    5684:	99 a7       	std	Y+41, r25	; 0x29
    5686:	88 a7       	std	Y+40, r24	; 0x28
    5688:	0f c0       	rjmp	.+30     	; 0x56a8 <LCD_vInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    568a:	6f a9       	ldd	r22, Y+55	; 0x37
    568c:	78 ad       	ldd	r23, Y+56	; 0x38
    568e:	89 ad       	ldd	r24, Y+57	; 0x39
    5690:	9a ad       	ldd	r25, Y+58	; 0x3a
    5692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5696:	dc 01       	movw	r26, r24
    5698:	cb 01       	movw	r24, r22
    569a:	8e ab       	std	Y+54, r24	; 0x36
    569c:	8e a9       	ldd	r24, Y+54	; 0x36
    569e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56a0:	8f a1       	ldd	r24, Y+39	; 0x27
    56a2:	8a 95       	dec	r24
    56a4:	f1 f7       	brne	.-4      	; 0x56a2 <LCD_vInit+0x31c>
    56a6:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(50);
    LCD_vWriteCommand(DISPLAY_ON_CUR_OFF_BL_OFF);
    56a8:	8c e0       	ldi	r24, 0x0C	; 12
    56aa:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    56ae:	80 e0       	ldi	r24, 0x00	; 0
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	a8 e4       	ldi	r26, 0x48	; 72
    56b4:	b2 e4       	ldi	r27, 0x42	; 66
    56b6:	8b a3       	std	Y+35, r24	; 0x23
    56b8:	9c a3       	std	Y+36, r25	; 0x24
    56ba:	ad a3       	std	Y+37, r26	; 0x25
    56bc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    56be:	6b a1       	ldd	r22, Y+35	; 0x23
    56c0:	7c a1       	ldd	r23, Y+36	; 0x24
    56c2:	8d a1       	ldd	r24, Y+37	; 0x25
    56c4:	9e a1       	ldd	r25, Y+38	; 0x26
    56c6:	2b ea       	ldi	r18, 0xAB	; 171
    56c8:	3a ea       	ldi	r19, 0xAA	; 170
    56ca:	4a e2       	ldi	r20, 0x2A	; 42
    56cc:	50 e4       	ldi	r21, 0x40	; 64
    56ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56d2:	dc 01       	movw	r26, r24
    56d4:	cb 01       	movw	r24, r22
    56d6:	8f 8f       	std	Y+31, r24	; 0x1f
    56d8:	98 a3       	std	Y+32, r25	; 0x20
    56da:	a9 a3       	std	Y+33, r26	; 0x21
    56dc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    56de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    56e0:	78 a1       	ldd	r23, Y+32	; 0x20
    56e2:	89 a1       	ldd	r24, Y+33	; 0x21
    56e4:	9a a1       	ldd	r25, Y+34	; 0x22
    56e6:	20 e0       	ldi	r18, 0x00	; 0
    56e8:	30 e0       	ldi	r19, 0x00	; 0
    56ea:	40 e8       	ldi	r20, 0x80	; 128
    56ec:	5f e3       	ldi	r21, 0x3F	; 63
    56ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56f2:	88 23       	and	r24, r24
    56f4:	1c f4       	brge	.+6      	; 0x56fc <LCD_vInit+0x376>
		__ticks = 1;
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	8e 8f       	std	Y+30, r24	; 0x1e
    56fa:	91 c0       	rjmp	.+290    	; 0x581e <LCD_vInit+0x498>
	else if (__tmp > 255)
    56fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    56fe:	78 a1       	ldd	r23, Y+32	; 0x20
    5700:	89 a1       	ldd	r24, Y+33	; 0x21
    5702:	9a a1       	ldd	r25, Y+34	; 0x22
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	4f e7       	ldi	r20, 0x7F	; 127
    570a:	53 e4       	ldi	r21, 0x43	; 67
    570c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5710:	18 16       	cp	r1, r24
    5712:	0c f0       	brlt	.+2      	; 0x5716 <LCD_vInit+0x390>
    5714:	7b c0       	rjmp	.+246    	; 0x580c <LCD_vInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    5716:	6b a1       	ldd	r22, Y+35	; 0x23
    5718:	7c a1       	ldd	r23, Y+36	; 0x24
    571a:	8d a1       	ldd	r24, Y+37	; 0x25
    571c:	9e a1       	ldd	r25, Y+38	; 0x26
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	4a e7       	ldi	r20, 0x7A	; 122
    5724:	54 e4       	ldi	r21, 0x44	; 68
    5726:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	8a 8f       	std	Y+26, r24	; 0x1a
    5730:	9b 8f       	std	Y+27, r25	; 0x1b
    5732:	ac 8f       	std	Y+28, r26	; 0x1c
    5734:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5736:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5738:	7b 8d       	ldd	r23, Y+27	; 0x1b
    573a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    573c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	4a ef       	ldi	r20, 0xFA	; 250
    5744:	54 e4       	ldi	r21, 0x44	; 68
    5746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    574a:	dc 01       	movw	r26, r24
    574c:	cb 01       	movw	r24, r22
    574e:	8e 8b       	std	Y+22, r24	; 0x16
    5750:	9f 8b       	std	Y+23, r25	; 0x17
    5752:	a8 8f       	std	Y+24, r26	; 0x18
    5754:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    5756:	6e 89       	ldd	r22, Y+22	; 0x16
    5758:	7f 89       	ldd	r23, Y+23	; 0x17
    575a:	88 8d       	ldd	r24, Y+24	; 0x18
    575c:	99 8d       	ldd	r25, Y+25	; 0x19
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	40 e8       	ldi	r20, 0x80	; 128
    5764:	5f e3       	ldi	r21, 0x3F	; 63
    5766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    576a:	88 23       	and	r24, r24
    576c:	2c f4       	brge	.+10     	; 0x5778 <LCD_vInit+0x3f2>
		__ticks = 1;
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	9d 8b       	std	Y+21, r25	; 0x15
    5774:	8c 8b       	std	Y+20, r24	; 0x14
    5776:	3f c0       	rjmp	.+126    	; 0x57f6 <LCD_vInit+0x470>
	else if (__tmp > 65535)
    5778:	6e 89       	ldd	r22, Y+22	; 0x16
    577a:	7f 89       	ldd	r23, Y+23	; 0x17
    577c:	88 8d       	ldd	r24, Y+24	; 0x18
    577e:	99 8d       	ldd	r25, Y+25	; 0x19
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	3f ef       	ldi	r19, 0xFF	; 255
    5784:	4f e7       	ldi	r20, 0x7F	; 127
    5786:	57 e4       	ldi	r21, 0x47	; 71
    5788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    578c:	18 16       	cp	r1, r24
    578e:	4c f5       	brge	.+82     	; 0x57e2 <LCD_vInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5790:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5792:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5794:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5796:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	30 e0       	ldi	r19, 0x00	; 0
    579c:	40 e2       	ldi	r20, 0x20	; 32
    579e:	51 e4       	ldi	r21, 0x41	; 65
    57a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	bc 01       	movw	r22, r24
    57aa:	cd 01       	movw	r24, r26
    57ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57b0:	dc 01       	movw	r26, r24
    57b2:	cb 01       	movw	r24, r22
    57b4:	9d 8b       	std	Y+21, r25	; 0x15
    57b6:	8c 8b       	std	Y+20, r24	; 0x14
    57b8:	0f c0       	rjmp	.+30     	; 0x57d8 <LCD_vInit+0x452>
    57ba:	88 ec       	ldi	r24, 0xC8	; 200
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	9b 8b       	std	Y+19, r25	; 0x13
    57c0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    57c2:	8a 89       	ldd	r24, Y+18	; 0x12
    57c4:	9b 89       	ldd	r25, Y+19	; 0x13
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <LCD_vInit+0x440>
    57ca:	9b 8b       	std	Y+19, r25	; 0x13
    57cc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ce:	8c 89       	ldd	r24, Y+20	; 0x14
    57d0:	9d 89       	ldd	r25, Y+21	; 0x15
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	9d 8b       	std	Y+21, r25	; 0x15
    57d6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57d8:	8c 89       	ldd	r24, Y+20	; 0x14
    57da:	9d 89       	ldd	r25, Y+21	; 0x15
    57dc:	00 97       	sbiw	r24, 0x00	; 0
    57de:	69 f7       	brne	.-38     	; 0x57ba <LCD_vInit+0x434>
    57e0:	24 c0       	rjmp	.+72     	; 0x582a <LCD_vInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57e2:	6e 89       	ldd	r22, Y+22	; 0x16
    57e4:	7f 89       	ldd	r23, Y+23	; 0x17
    57e6:	88 8d       	ldd	r24, Y+24	; 0x18
    57e8:	99 8d       	ldd	r25, Y+25	; 0x19
    57ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	9d 8b       	std	Y+21, r25	; 0x15
    57f4:	8c 8b       	std	Y+20, r24	; 0x14
    57f6:	8c 89       	ldd	r24, Y+20	; 0x14
    57f8:	9d 89       	ldd	r25, Y+21	; 0x15
    57fa:	99 8b       	std	Y+17, r25	; 0x11
    57fc:	88 8b       	std	Y+16, r24	; 0x10
    57fe:	88 89       	ldd	r24, Y+16	; 0x10
    5800:	99 89       	ldd	r25, Y+17	; 0x11
    5802:	01 97       	sbiw	r24, 0x01	; 1
    5804:	f1 f7       	brne	.-4      	; 0x5802 <LCD_vInit+0x47c>
    5806:	99 8b       	std	Y+17, r25	; 0x11
    5808:	88 8b       	std	Y+16, r24	; 0x10
    580a:	0f c0       	rjmp	.+30     	; 0x582a <LCD_vInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    580c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    580e:	78 a1       	ldd	r23, Y+32	; 0x20
    5810:	89 a1       	ldd	r24, Y+33	; 0x21
    5812:	9a a1       	ldd	r25, Y+34	; 0x22
    5814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5818:	dc 01       	movw	r26, r24
    581a:	cb 01       	movw	r24, r22
    581c:	8e 8f       	std	Y+30, r24	; 0x1e
    581e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5820:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5822:	8f 85       	ldd	r24, Y+15	; 0x0f
    5824:	8a 95       	dec	r24
    5826:	f1 f7       	brne	.-4      	; 0x5824 <LCD_vInit+0x49e>
    5828:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(50);
    LCD_vWriteCommand(CLEAR);
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	a0 e0       	ldi	r26, 0x00	; 0
    5836:	b0 e4       	ldi	r27, 0x40	; 64
    5838:	8b 87       	std	Y+11, r24	; 0x0b
    583a:	9c 87       	std	Y+12, r25	; 0x0c
    583c:	ad 87       	std	Y+13, r26	; 0x0d
    583e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5840:	6b 85       	ldd	r22, Y+11	; 0x0b
    5842:	7c 85       	ldd	r23, Y+12	; 0x0c
    5844:	8d 85       	ldd	r24, Y+13	; 0x0d
    5846:	9e 85       	ldd	r25, Y+14	; 0x0e
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	4a ef       	ldi	r20, 0xFA	; 250
    584e:	54 e4       	ldi	r21, 0x44	; 68
    5850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5854:	dc 01       	movw	r26, r24
    5856:	cb 01       	movw	r24, r22
    5858:	8f 83       	std	Y+7, r24	; 0x07
    585a:	98 87       	std	Y+8, r25	; 0x08
    585c:	a9 87       	std	Y+9, r26	; 0x09
    585e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5860:	6f 81       	ldd	r22, Y+7	; 0x07
    5862:	78 85       	ldd	r23, Y+8	; 0x08
    5864:	89 85       	ldd	r24, Y+9	; 0x09
    5866:	9a 85       	ldd	r25, Y+10	; 0x0a
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	40 e8       	ldi	r20, 0x80	; 128
    586e:	5f e3       	ldi	r21, 0x3F	; 63
    5870:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5874:	88 23       	and	r24, r24
    5876:	2c f4       	brge	.+10     	; 0x5882 <LCD_vInit+0x4fc>
		__ticks = 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	9e 83       	std	Y+6, r25	; 0x06
    587e:	8d 83       	std	Y+5, r24	; 0x05
    5880:	3f c0       	rjmp	.+126    	; 0x5900 <LCD_vInit+0x57a>
	else if (__tmp > 65535)
    5882:	6f 81       	ldd	r22, Y+7	; 0x07
    5884:	78 85       	ldd	r23, Y+8	; 0x08
    5886:	89 85       	ldd	r24, Y+9	; 0x09
    5888:	9a 85       	ldd	r25, Y+10	; 0x0a
    588a:	20 e0       	ldi	r18, 0x00	; 0
    588c:	3f ef       	ldi	r19, 0xFF	; 255
    588e:	4f e7       	ldi	r20, 0x7F	; 127
    5890:	57 e4       	ldi	r21, 0x47	; 71
    5892:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5896:	18 16       	cp	r1, r24
    5898:	4c f5       	brge	.+82     	; 0x58ec <LCD_vInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    589a:	6b 85       	ldd	r22, Y+11	; 0x0b
    589c:	7c 85       	ldd	r23, Y+12	; 0x0c
    589e:	8d 85       	ldd	r24, Y+13	; 0x0d
    58a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	40 e2       	ldi	r20, 0x20	; 32
    58a8:	51 e4       	ldi	r21, 0x41	; 65
    58aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	bc 01       	movw	r22, r24
    58b4:	cd 01       	movw	r24, r26
    58b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	9e 83       	std	Y+6, r25	; 0x06
    58c0:	8d 83       	std	Y+5, r24	; 0x05
    58c2:	0f c0       	rjmp	.+30     	; 0x58e2 <LCD_vInit+0x55c>
    58c4:	88 ec       	ldi	r24, 0xC8	; 200
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	9c 83       	std	Y+4, r25	; 0x04
    58ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    58cc:	8b 81       	ldd	r24, Y+3	; 0x03
    58ce:	9c 81       	ldd	r25, Y+4	; 0x04
    58d0:	01 97       	sbiw	r24, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <LCD_vInit+0x54a>
    58d4:	9c 83       	std	Y+4, r25	; 0x04
    58d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d8:	8d 81       	ldd	r24, Y+5	; 0x05
    58da:	9e 81       	ldd	r25, Y+6	; 0x06
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	9e 83       	std	Y+6, r25	; 0x06
    58e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e2:	8d 81       	ldd	r24, Y+5	; 0x05
    58e4:	9e 81       	ldd	r25, Y+6	; 0x06
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	69 f7       	brne	.-38     	; 0x58c4 <LCD_vInit+0x53e>
    58ea:	14 c0       	rjmp	.+40     	; 0x5914 <LCD_vInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ec:	6f 81       	ldd	r22, Y+7	; 0x07
    58ee:	78 85       	ldd	r23, Y+8	; 0x08
    58f0:	89 85       	ldd	r24, Y+9	; 0x09
    58f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	9e 83       	std	Y+6, r25	; 0x06
    58fe:	8d 83       	std	Y+5, r24	; 0x05
    5900:	8d 81       	ldd	r24, Y+5	; 0x05
    5902:	9e 81       	ldd	r25, Y+6	; 0x06
    5904:	9a 83       	std	Y+2, r25	; 0x02
    5906:	89 83       	std	Y+1, r24	; 0x01
    5908:	89 81       	ldd	r24, Y+1	; 0x01
    590a:	9a 81       	ldd	r25, Y+2	; 0x02
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <LCD_vInit+0x586>
    5910:	9a 83       	std	Y+2, r25	; 0x02
    5912:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_vWriteCommand(CURSOR_INC);
    5914:	86 e0       	ldi	r24, 0x06	; 6
    5916:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    _delay_us(50);
    LCD_vWriteCommand(CLEAR);
    _delay_ms(2);
    LCD_vWriteCommand(CURSOR_INC);
#endif
}
    591a:	c4 5b       	subi	r28, 0xB4	; 180
    591c:	df 4f       	sbci	r29, 0xFF	; 255
    591e:	0f b6       	in	r0, 0x3f	; 63
    5920:	f8 94       	cli
    5922:	de bf       	out	0x3e, r29	; 62
    5924:	0f be       	out	0x3f, r0	; 63
    5926:	cd bf       	out	0x3d, r28	; 61
    5928:	cf 91       	pop	r28
    592a:	df 91       	pop	r29
    592c:	1f 91       	pop	r17
    592e:	0f 91       	pop	r16
    5930:	08 95       	ret

00005932 <LCD_vWriteCommand>:
static void LCD_vWriteCommand(u8 A_u8Cmd)
{
    5932:	df 93       	push	r29
    5934:	cf 93       	push	r28
    5936:	0f 92       	push	r0
    5938:	cd b7       	in	r28, 0x3d	; 61
    593a:	de b7       	in	r29, 0x3e	; 62
    593c:	89 83       	std	Y+1, r24	; 0x01

#if LCD_MODE == MODE_8_BIT
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	62 e0       	ldi	r22, 0x02	; 2
    5942:	41 e0       	ldi	r20, 0x01	; 1
    5944:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	61 e0       	ldi	r22, 0x01	; 1
    594c:	40 e0       	ldi	r20, 0x00	; 0
    594e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, LOW);
    5952:	80 e0       	ldi	r24, 0x00	; 0
    5954:	60 e0       	ldi	r22, 0x00	; 0
    5956:	40 e0       	ldi	r20, 0x00	; 0
    5958:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPortVal(LCD_DATA_PORT, A_u8Cmd);
    595c:	83 e0       	ldi	r24, 0x03	; 3
    595e:	69 81       	ldd	r22, Y+1	; 0x01
    5960:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
    5964:	80 e0       	ldi	r24, 0x00	; 0
    5966:	62 e0       	ldi	r22, 0x02	; 2
    5968:	40 e0       	ldi	r20, 0x00	; 0
    596a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, LOW);
    DIO_vSetPortVal(LCD_DATA_PORT, ((A_u8Cmd << 4) & 0xF0));
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
#endif
}
    596e:	0f 90       	pop	r0
    5970:	cf 91       	pop	r28
    5972:	df 91       	pop	r29
    5974:	08 95       	ret

00005976 <LCD_vDisplayString>:
void LCD_vDisplayString(u8 *A_u8Str)
{
    5976:	df 93       	push	r29
    5978:	cf 93       	push	r28
    597a:	cd b7       	in	r28, 0x3d	; 61
    597c:	de b7       	in	r29, 0x3e	; 62
    597e:	e6 97       	sbiw	r28, 0x36	; 54
    5980:	0f b6       	in	r0, 0x3f	; 63
    5982:	f8 94       	cli
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	cd bf       	out	0x3d, r28	; 61
    598a:	9e ab       	std	Y+54, r25	; 0x36
    598c:	8d ab       	std	Y+53, r24	; 0x35
    598e:	80 e0       	ldi	r24, 0x00	; 0
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	a8 e4       	ldi	r26, 0x48	; 72
    5994:	b2 e4       	ldi	r27, 0x42	; 66
    5996:	8d a7       	std	Y+45, r24	; 0x2d
    5998:	9e a7       	std	Y+46, r25	; 0x2e
    599a:	af a7       	std	Y+47, r26	; 0x2f
    599c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    599e:	6d a5       	ldd	r22, Y+45	; 0x2d
    59a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    59a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    59a4:	98 a9       	ldd	r25, Y+48	; 0x30
    59a6:	2b ea       	ldi	r18, 0xAB	; 171
    59a8:	3a ea       	ldi	r19, 0xAA	; 170
    59aa:	4a e2       	ldi	r20, 0x2A	; 42
    59ac:	50 e4       	ldi	r21, 0x40	; 64
    59ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b2:	dc 01       	movw	r26, r24
    59b4:	cb 01       	movw	r24, r22
    59b6:	89 a7       	std	Y+41, r24	; 0x29
    59b8:	9a a7       	std	Y+42, r25	; 0x2a
    59ba:	ab a7       	std	Y+43, r26	; 0x2b
    59bc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    59be:	69 a5       	ldd	r22, Y+41	; 0x29
    59c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    59c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    59c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	40 e8       	ldi	r20, 0x80	; 128
    59cc:	5f e3       	ldi	r21, 0x3F	; 63
    59ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59d2:	88 23       	and	r24, r24
    59d4:	1c f4       	brge	.+6      	; 0x59dc <LCD_vDisplayString+0x66>
		__ticks = 1;
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	88 a7       	std	Y+40, r24	; 0x28
    59da:	91 c0       	rjmp	.+290    	; 0x5afe <LCD_vDisplayString+0x188>
	else if (__tmp > 255)
    59dc:	69 a5       	ldd	r22, Y+41	; 0x29
    59de:	7a a5       	ldd	r23, Y+42	; 0x2a
    59e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    59e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    59e4:	20 e0       	ldi	r18, 0x00	; 0
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	4f e7       	ldi	r20, 0x7F	; 127
    59ea:	53 e4       	ldi	r21, 0x43	; 67
    59ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59f0:	18 16       	cp	r1, r24
    59f2:	0c f0       	brlt	.+2      	; 0x59f6 <LCD_vDisplayString+0x80>
    59f4:	7b c0       	rjmp	.+246    	; 0x5aec <LCD_vDisplayString+0x176>
	{
		_delay_ms(__us / 1000.0);
    59f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    59f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    59fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    59fc:	98 a9       	ldd	r25, Y+48	; 0x30
    59fe:	20 e0       	ldi	r18, 0x00	; 0
    5a00:	30 e0       	ldi	r19, 0x00	; 0
    5a02:	4a e7       	ldi	r20, 0x7A	; 122
    5a04:	54 e4       	ldi	r21, 0x44	; 68
    5a06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	8c a3       	std	Y+36, r24	; 0x24
    5a10:	9d a3       	std	Y+37, r25	; 0x25
    5a12:	ae a3       	std	Y+38, r26	; 0x26
    5a14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a16:	6c a1       	ldd	r22, Y+36	; 0x24
    5a18:	7d a1       	ldd	r23, Y+37	; 0x25
    5a1a:	8e a1       	ldd	r24, Y+38	; 0x26
    5a1c:	9f a1       	ldd	r25, Y+39	; 0x27
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	4a ef       	ldi	r20, 0xFA	; 250
    5a24:	54 e4       	ldi	r21, 0x44	; 68
    5a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a2a:	dc 01       	movw	r26, r24
    5a2c:	cb 01       	movw	r24, r22
    5a2e:	88 a3       	std	Y+32, r24	; 0x20
    5a30:	99 a3       	std	Y+33, r25	; 0x21
    5a32:	aa a3       	std	Y+34, r26	; 0x22
    5a34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5a36:	68 a1       	ldd	r22, Y+32	; 0x20
    5a38:	79 a1       	ldd	r23, Y+33	; 0x21
    5a3a:	8a a1       	ldd	r24, Y+34	; 0x22
    5a3c:	9b a1       	ldd	r25, Y+35	; 0x23
    5a3e:	20 e0       	ldi	r18, 0x00	; 0
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	40 e8       	ldi	r20, 0x80	; 128
    5a44:	5f e3       	ldi	r21, 0x3F	; 63
    5a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a4a:	88 23       	and	r24, r24
    5a4c:	2c f4       	brge	.+10     	; 0x5a58 <LCD_vDisplayString+0xe2>
		__ticks = 1;
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	9f 8f       	std	Y+31, r25	; 0x1f
    5a54:	8e 8f       	std	Y+30, r24	; 0x1e
    5a56:	3f c0       	rjmp	.+126    	; 0x5ad6 <LCD_vDisplayString+0x160>
	else if (__tmp > 65535)
    5a58:	68 a1       	ldd	r22, Y+32	; 0x20
    5a5a:	79 a1       	ldd	r23, Y+33	; 0x21
    5a5c:	8a a1       	ldd	r24, Y+34	; 0x22
    5a5e:	9b a1       	ldd	r25, Y+35	; 0x23
    5a60:	20 e0       	ldi	r18, 0x00	; 0
    5a62:	3f ef       	ldi	r19, 0xFF	; 255
    5a64:	4f e7       	ldi	r20, 0x7F	; 127
    5a66:	57 e4       	ldi	r21, 0x47	; 71
    5a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a6c:	18 16       	cp	r1, r24
    5a6e:	4c f5       	brge	.+82     	; 0x5ac2 <LCD_vDisplayString+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a70:	6c a1       	ldd	r22, Y+36	; 0x24
    5a72:	7d a1       	ldd	r23, Y+37	; 0x25
    5a74:	8e a1       	ldd	r24, Y+38	; 0x26
    5a76:	9f a1       	ldd	r25, Y+39	; 0x27
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	40 e2       	ldi	r20, 0x20	; 32
    5a7e:	51 e4       	ldi	r21, 0x41	; 65
    5a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	bc 01       	movw	r22, r24
    5a8a:	cd 01       	movw	r24, r26
    5a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	9f 8f       	std	Y+31, r25	; 0x1f
    5a96:	8e 8f       	std	Y+30, r24	; 0x1e
    5a98:	0f c0       	rjmp	.+30     	; 0x5ab8 <LCD_vDisplayString+0x142>
    5a9a:	88 ec       	ldi	r24, 0xC8	; 200
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	9d 8f       	std	Y+29, r25	; 0x1d
    5aa0:	8c 8f       	std	Y+28, r24	; 0x1c
    5aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5aa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5aa6:	01 97       	sbiw	r24, 0x01	; 1
    5aa8:	f1 f7       	brne	.-4      	; 0x5aa6 <LCD_vDisplayString+0x130>
    5aaa:	9d 8f       	std	Y+29, r25	; 0x1d
    5aac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ab0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5ab2:	01 97       	sbiw	r24, 0x01	; 1
    5ab4:	9f 8f       	std	Y+31, r25	; 0x1f
    5ab6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ab8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5aba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5abc:	00 97       	sbiw	r24, 0x00	; 0
    5abe:	69 f7       	brne	.-38     	; 0x5a9a <LCD_vDisplayString+0x124>
    5ac0:	24 c0       	rjmp	.+72     	; 0x5b0a <LCD_vDisplayString+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ac2:	68 a1       	ldd	r22, Y+32	; 0x20
    5ac4:	79 a1       	ldd	r23, Y+33	; 0x21
    5ac6:	8a a1       	ldd	r24, Y+34	; 0x22
    5ac8:	9b a1       	ldd	r25, Y+35	; 0x23
    5aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	9f 8f       	std	Y+31, r25	; 0x1f
    5ad4:	8e 8f       	std	Y+30, r24	; 0x1e
    5ad6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5ad8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5ada:	9b 8f       	std	Y+27, r25	; 0x1b
    5adc:	8a 8f       	std	Y+26, r24	; 0x1a
    5ade:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5ae0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5ae2:	01 97       	sbiw	r24, 0x01	; 1
    5ae4:	f1 f7       	brne	.-4      	; 0x5ae2 <LCD_vDisplayString+0x16c>
    5ae6:	9b 8f       	std	Y+27, r25	; 0x1b
    5ae8:	8a 8f       	std	Y+26, r24	; 0x1a
    5aea:	0f c0       	rjmp	.+30     	; 0x5b0a <LCD_vDisplayString+0x194>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5aec:	69 a5       	ldd	r22, Y+41	; 0x29
    5aee:	7a a5       	ldd	r23, Y+42	; 0x2a
    5af0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5af2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af8:	dc 01       	movw	r26, r24
    5afa:	cb 01       	movw	r24, r22
    5afc:	88 a7       	std	Y+40, r24	; 0x28
    5afe:	88 a5       	ldd	r24, Y+40	; 0x28
    5b00:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5b02:	89 8d       	ldd	r24, Y+25	; 0x19
    5b04:	8a 95       	dec	r24
    5b06:	f1 f7       	brne	.-4      	; 0x5b04 <LCD_vDisplayString+0x18e>
    5b08:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(50);
    for (u32 i = 0; A_u8Str[i] != 0; i++) /* Send each char of string till the NULL */
    5b0a:	19 aa       	std	Y+49, r1	; 0x31
    5b0c:	1a aa       	std	Y+50, r1	; 0x32
    5b0e:	1b aa       	std	Y+51, r1	; 0x33
    5b10:	1c aa       	std	Y+52, r1	; 0x34
    5b12:	d3 c0       	rjmp	.+422    	; 0x5cba <LCD_vDisplayString+0x344>
    {
        LCD_vDisplayChar(A_u8Str[i]);
    5b14:	29 a9       	ldd	r18, Y+49	; 0x31
    5b16:	3a a9       	ldd	r19, Y+50	; 0x32
    5b18:	8d a9       	ldd	r24, Y+53	; 0x35
    5b1a:	9e a9       	ldd	r25, Y+54	; 0x36
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	e2 0f       	add	r30, r18
    5b20:	f3 1f       	adc	r31, r19
    5b22:	80 81       	ld	r24, Z
    5b24:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <LCD_vDisplayChar>
    5b28:	80 e0       	ldi	r24, 0x00	; 0
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	a0 e2       	ldi	r26, 0x20	; 32
    5b2e:	b1 e4       	ldi	r27, 0x41	; 65
    5b30:	8d 8b       	std	Y+21, r24	; 0x15
    5b32:	9e 8b       	std	Y+22, r25	; 0x16
    5b34:	af 8b       	std	Y+23, r26	; 0x17
    5b36:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5b38:	6d 89       	ldd	r22, Y+21	; 0x15
    5b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    5b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    5b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b40:	2b ea       	ldi	r18, 0xAB	; 171
    5b42:	3a ea       	ldi	r19, 0xAA	; 170
    5b44:	4a e2       	ldi	r20, 0x2A	; 42
    5b46:	50 e4       	ldi	r21, 0x40	; 64
    5b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	cb 01       	movw	r24, r22
    5b50:	89 8b       	std	Y+17, r24	; 0x11
    5b52:	9a 8b       	std	Y+18, r25	; 0x12
    5b54:	ab 8b       	std	Y+19, r26	; 0x13
    5b56:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5b58:	69 89       	ldd	r22, Y+17	; 0x11
    5b5a:	7a 89       	ldd	r23, Y+18	; 0x12
    5b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	40 e8       	ldi	r20, 0x80	; 128
    5b66:	5f e3       	ldi	r21, 0x3F	; 63
    5b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b6c:	88 23       	and	r24, r24
    5b6e:	1c f4       	brge	.+6      	; 0x5b76 <LCD_vDisplayString+0x200>
		__ticks = 1;
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	88 8b       	std	Y+16, r24	; 0x10
    5b74:	91 c0       	rjmp	.+290    	; 0x5c98 <LCD_vDisplayString+0x322>
	else if (__tmp > 255)
    5b76:	69 89       	ldd	r22, Y+17	; 0x11
    5b78:	7a 89       	ldd	r23, Y+18	; 0x12
    5b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    5b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    5b7e:	20 e0       	ldi	r18, 0x00	; 0
    5b80:	30 e0       	ldi	r19, 0x00	; 0
    5b82:	4f e7       	ldi	r20, 0x7F	; 127
    5b84:	53 e4       	ldi	r21, 0x43	; 67
    5b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b8a:	18 16       	cp	r1, r24
    5b8c:	0c f0       	brlt	.+2      	; 0x5b90 <LCD_vDisplayString+0x21a>
    5b8e:	7b c0       	rjmp	.+246    	; 0x5c86 <LCD_vDisplayString+0x310>
	{
		_delay_ms(__us / 1000.0);
    5b90:	6d 89       	ldd	r22, Y+21	; 0x15
    5b92:	7e 89       	ldd	r23, Y+22	; 0x16
    5b94:	8f 89       	ldd	r24, Y+23	; 0x17
    5b96:	98 8d       	ldd	r25, Y+24	; 0x18
    5b98:	20 e0       	ldi	r18, 0x00	; 0
    5b9a:	30 e0       	ldi	r19, 0x00	; 0
    5b9c:	4a e7       	ldi	r20, 0x7A	; 122
    5b9e:	54 e4       	ldi	r21, 0x44	; 68
    5ba0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5ba4:	dc 01       	movw	r26, r24
    5ba6:	cb 01       	movw	r24, r22
    5ba8:	8c 87       	std	Y+12, r24	; 0x0c
    5baa:	9d 87       	std	Y+13, r25	; 0x0d
    5bac:	ae 87       	std	Y+14, r26	; 0x0e
    5bae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    5bb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    5bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5bb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    5bb8:	20 e0       	ldi	r18, 0x00	; 0
    5bba:	30 e0       	ldi	r19, 0x00	; 0
    5bbc:	4a ef       	ldi	r20, 0xFA	; 250
    5bbe:	54 e4       	ldi	r21, 0x44	; 68
    5bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22
    5bc8:	88 87       	std	Y+8, r24	; 0x08
    5bca:	99 87       	std	Y+9, r25	; 0x09
    5bcc:	aa 87       	std	Y+10, r26	; 0x0a
    5bce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5bd0:	68 85       	ldd	r22, Y+8	; 0x08
    5bd2:	79 85       	ldd	r23, Y+9	; 0x09
    5bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bd8:	20 e0       	ldi	r18, 0x00	; 0
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	40 e8       	ldi	r20, 0x80	; 128
    5bde:	5f e3       	ldi	r21, 0x3F	; 63
    5be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5be4:	88 23       	and	r24, r24
    5be6:	2c f4       	brge	.+10     	; 0x5bf2 <LCD_vDisplayString+0x27c>
		__ticks = 1;
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	9f 83       	std	Y+7, r25	; 0x07
    5bee:	8e 83       	std	Y+6, r24	; 0x06
    5bf0:	3f c0       	rjmp	.+126    	; 0x5c70 <LCD_vDisplayString+0x2fa>
	else if (__tmp > 65535)
    5bf2:	68 85       	ldd	r22, Y+8	; 0x08
    5bf4:	79 85       	ldd	r23, Y+9	; 0x09
    5bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bfa:	20 e0       	ldi	r18, 0x00	; 0
    5bfc:	3f ef       	ldi	r19, 0xFF	; 255
    5bfe:	4f e7       	ldi	r20, 0x7F	; 127
    5c00:	57 e4       	ldi	r21, 0x47	; 71
    5c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c06:	18 16       	cp	r1, r24
    5c08:	4c f5       	brge	.+82     	; 0x5c5c <LCD_vDisplayString+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5c10:	9f 85       	ldd	r25, Y+15	; 0x0f
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	40 e2       	ldi	r20, 0x20	; 32
    5c18:	51 e4       	ldi	r21, 0x41	; 65
    5c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c1e:	dc 01       	movw	r26, r24
    5c20:	cb 01       	movw	r24, r22
    5c22:	bc 01       	movw	r22, r24
    5c24:	cd 01       	movw	r24, r26
    5c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	9f 83       	std	Y+7, r25	; 0x07
    5c30:	8e 83       	std	Y+6, r24	; 0x06
    5c32:	0f c0       	rjmp	.+30     	; 0x5c52 <LCD_vDisplayString+0x2dc>
    5c34:	88 ec       	ldi	r24, 0xC8	; 200
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	9d 83       	std	Y+5, r25	; 0x05
    5c3a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c40:	01 97       	sbiw	r24, 0x01	; 1
    5c42:	f1 f7       	brne	.-4      	; 0x5c40 <LCD_vDisplayString+0x2ca>
    5c44:	9d 83       	std	Y+5, r25	; 0x05
    5c46:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c48:	8e 81       	ldd	r24, Y+6	; 0x06
    5c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    5c4c:	01 97       	sbiw	r24, 0x01	; 1
    5c4e:	9f 83       	std	Y+7, r25	; 0x07
    5c50:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c52:	8e 81       	ldd	r24, Y+6	; 0x06
    5c54:	9f 81       	ldd	r25, Y+7	; 0x07
    5c56:	00 97       	sbiw	r24, 0x00	; 0
    5c58:	69 f7       	brne	.-38     	; 0x5c34 <LCD_vDisplayString+0x2be>
    5c5a:	24 c0       	rjmp	.+72     	; 0x5ca4 <LCD_vDisplayString+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c5c:	68 85       	ldd	r22, Y+8	; 0x08
    5c5e:	79 85       	ldd	r23, Y+9	; 0x09
    5c60:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c62:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c68:	dc 01       	movw	r26, r24
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	9f 83       	std	Y+7, r25	; 0x07
    5c6e:	8e 83       	std	Y+6, r24	; 0x06
    5c70:	8e 81       	ldd	r24, Y+6	; 0x06
    5c72:	9f 81       	ldd	r25, Y+7	; 0x07
    5c74:	9b 83       	std	Y+3, r25	; 0x03
    5c76:	8a 83       	std	Y+2, r24	; 0x02
    5c78:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c7c:	01 97       	sbiw	r24, 0x01	; 1
    5c7e:	f1 f7       	brne	.-4      	; 0x5c7c <LCD_vDisplayString+0x306>
    5c80:	9b 83       	std	Y+3, r25	; 0x03
    5c82:	8a 83       	std	Y+2, r24	; 0x02
    5c84:	0f c0       	rjmp	.+30     	; 0x5ca4 <LCD_vDisplayString+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5c86:	69 89       	ldd	r22, Y+17	; 0x11
    5c88:	7a 89       	ldd	r23, Y+18	; 0x12
    5c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c92:	dc 01       	movw	r26, r24
    5c94:	cb 01       	movw	r24, r22
    5c96:	88 8b       	std	Y+16, r24	; 0x10
    5c98:	88 89       	ldd	r24, Y+16	; 0x10
    5c9a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5c9c:	89 81       	ldd	r24, Y+1	; 0x01
    5c9e:	8a 95       	dec	r24
    5ca0:	f1 f7       	brne	.-4      	; 0x5c9e <LCD_vDisplayString+0x328>
    5ca2:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_vDisplayString(u8 *A_u8Str)
{
    _delay_us(50);
    for (u32 i = 0; A_u8Str[i] != 0; i++) /* Send each char of string till the NULL */
    5ca4:	89 a9       	ldd	r24, Y+49	; 0x31
    5ca6:	9a a9       	ldd	r25, Y+50	; 0x32
    5ca8:	ab a9       	ldd	r26, Y+51	; 0x33
    5caa:	bc a9       	ldd	r27, Y+52	; 0x34
    5cac:	01 96       	adiw	r24, 0x01	; 1
    5cae:	a1 1d       	adc	r26, r1
    5cb0:	b1 1d       	adc	r27, r1
    5cb2:	89 ab       	std	Y+49, r24	; 0x31
    5cb4:	9a ab       	std	Y+50, r25	; 0x32
    5cb6:	ab ab       	std	Y+51, r26	; 0x33
    5cb8:	bc ab       	std	Y+52, r27	; 0x34
    5cba:	29 a9       	ldd	r18, Y+49	; 0x31
    5cbc:	3a a9       	ldd	r19, Y+50	; 0x32
    5cbe:	8d a9       	ldd	r24, Y+53	; 0x35
    5cc0:	9e a9       	ldd	r25, Y+54	; 0x36
    5cc2:	fc 01       	movw	r30, r24
    5cc4:	e2 0f       	add	r30, r18
    5cc6:	f3 1f       	adc	r31, r19
    5cc8:	80 81       	ld	r24, Z
    5cca:	88 23       	and	r24, r24
    5ccc:	09 f0       	breq	.+2      	; 0x5cd0 <LCD_vDisplayString+0x35a>
    5cce:	22 cf       	rjmp	.-444    	; 0x5b14 <LCD_vDisplayString+0x19e>
    {
        LCD_vDisplayChar(A_u8Str[i]);
        _delay_us(10);
    }
}
    5cd0:	e6 96       	adiw	r28, 0x36	; 54
    5cd2:	0f b6       	in	r0, 0x3f	; 63
    5cd4:	f8 94       	cli
    5cd6:	de bf       	out	0x3e, r29	; 62
    5cd8:	0f be       	out	0x3f, r0	; 63
    5cda:	cd bf       	out	0x3d, r28	; 61
    5cdc:	cf 91       	pop	r28
    5cde:	df 91       	pop	r29
    5ce0:	08 95       	ret

00005ce2 <LCD_vDisplayChar>:
void LCD_vDisplayChar(u8 A_u8Char)
{
    5ce2:	df 93       	push	r29
    5ce4:	cf 93       	push	r28
    5ce6:	0f 92       	push	r0
    5ce8:	cd b7       	in	r28, 0x3d	; 61
    5cea:	de b7       	in	r29, 0x3e	; 62
    5cec:	89 83       	std	Y+1, r24	; 0x01

#if LCD_MODE == MODE_8_BIT
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	62 e0       	ldi	r22, 0x02	; 2
    5cf2:	41 e0       	ldi	r20, 0x01	; 1
    5cf4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
    5cfa:	61 e0       	ldi	r22, 0x01	; 1
    5cfc:	40 e0       	ldi	r20, 0x00	; 0
    5cfe:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    5d02:	80 e0       	ldi	r24, 0x00	; 0
    5d04:	60 e0       	ldi	r22, 0x00	; 0
    5d06:	41 e0       	ldi	r20, 0x01	; 1
    5d08:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPortVal(LCD_DATA_PORT, A_u8Char);
    5d0c:	83 e0       	ldi	r24, 0x03	; 3
    5d0e:	69 81       	ldd	r22, Y+1	; 0x01
    5d10:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <DIO_vSetPortVal>
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
    5d14:	80 e0       	ldi	r24, 0x00	; 0
    5d16:	62 e0       	ldi	r22, 0x02	; 2
    5d18:	40 e0       	ldi	r20, 0x00	; 0
    5d1a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    DIO_vSetPortVal(LCD_DATA_PORT, ((A_u8Char << 4) & 0xF0));
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
#endif
}
    5d1e:	0f 90       	pop	r0
    5d20:	cf 91       	pop	r28
    5d22:	df 91       	pop	r29
    5d24:	08 95       	ret

00005d26 <LCD_vDisplayNumInteger>:
void LCD_vDisplayNumInteger(u32 A_u32Num)
{
    5d26:	df 93       	push	r29
    5d28:	cf 93       	push	r28
    5d2a:	cd b7       	in	r28, 0x3d	; 61
    5d2c:	de b7       	in	r29, 0x3e	; 62
    5d2e:	68 97       	sbiw	r28, 0x18	; 24
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	6d 8b       	std	Y+21, r22	; 0x15
    5d3c:	7e 8b       	std	Y+22, r23	; 0x16
    5d3e:	8f 8b       	std	Y+23, r24	; 0x17
    5d40:	98 8f       	std	Y+24, r25	; 0x18
    u8 L_u8Str[20];
    sprintf(L_u8Str, "%i", A_u32Num);
    5d42:	8d b7       	in	r24, 0x3d	; 61
    5d44:	9e b7       	in	r25, 0x3e	; 62
    5d46:	08 97       	sbiw	r24, 0x08	; 8
    5d48:	0f b6       	in	r0, 0x3f	; 63
    5d4a:	f8 94       	cli
    5d4c:	9e bf       	out	0x3e, r25	; 62
    5d4e:	0f be       	out	0x3f, r0	; 63
    5d50:	8d bf       	out	0x3d, r24	; 61
    5d52:	ed b7       	in	r30, 0x3d	; 61
    5d54:	fe b7       	in	r31, 0x3e	; 62
    5d56:	31 96       	adiw	r30, 0x01	; 1
    5d58:	ce 01       	movw	r24, r28
    5d5a:	01 96       	adiw	r24, 0x01	; 1
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	80 83       	st	Z, r24
    5d60:	80 e6       	ldi	r24, 0x60	; 96
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	93 83       	std	Z+3, r25	; 0x03
    5d66:	82 83       	std	Z+2, r24	; 0x02
    5d68:	8d 89       	ldd	r24, Y+21	; 0x15
    5d6a:	9e 89       	ldd	r25, Y+22	; 0x16
    5d6c:	af 89       	ldd	r26, Y+23	; 0x17
    5d6e:	b8 8d       	ldd	r27, Y+24	; 0x18
    5d70:	84 83       	std	Z+4, r24	; 0x04
    5d72:	95 83       	std	Z+5, r25	; 0x05
    5d74:	a6 83       	std	Z+6, r26	; 0x06
    5d76:	b7 83       	std	Z+7, r27	; 0x07
    5d78:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sprintf>
    5d7c:	8d b7       	in	r24, 0x3d	; 61
    5d7e:	9e b7       	in	r25, 0x3e	; 62
    5d80:	08 96       	adiw	r24, 0x08	; 8
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	9e bf       	out	0x3e, r25	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	8d bf       	out	0x3d, r24	; 61
    LCD_vDisplayString(L_u8Str);
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	01 96       	adiw	r24, 0x01	; 1
    5d90:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
}
    5d94:	68 96       	adiw	r28, 0x18	; 24
    5d96:	0f b6       	in	r0, 0x3f	; 63
    5d98:	f8 94       	cli
    5d9a:	de bf       	out	0x3e, r29	; 62
    5d9c:	0f be       	out	0x3f, r0	; 63
    5d9e:	cd bf       	out	0x3d, r28	; 61
    5da0:	cf 91       	pop	r28
    5da2:	df 91       	pop	r29
    5da4:	08 95       	ret

00005da6 <LCD_vDisplayNumFloat>:
void LCD_vDisplayNumFloat(f32 A_f32Num)
{
    5da6:	df 93       	push	r29
    5da8:	cf 93       	push	r28
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
    5dae:	68 97       	sbiw	r28, 0x18	; 24
    5db0:	0f b6       	in	r0, 0x3f	; 63
    5db2:	f8 94       	cli
    5db4:	de bf       	out	0x3e, r29	; 62
    5db6:	0f be       	out	0x3f, r0	; 63
    5db8:	cd bf       	out	0x3d, r28	; 61
    5dba:	6d 8b       	std	Y+21, r22	; 0x15
    5dbc:	7e 8b       	std	Y+22, r23	; 0x16
    5dbe:	8f 8b       	std	Y+23, r24	; 0x17
    5dc0:	98 8f       	std	Y+24, r25	; 0x18
    u8 L_u8Str[20];
    sprintf(L_u8Str, "%f", A_f32Num);
    5dc2:	8d b7       	in	r24, 0x3d	; 61
    5dc4:	9e b7       	in	r25, 0x3e	; 62
    5dc6:	08 97       	sbiw	r24, 0x08	; 8
    5dc8:	0f b6       	in	r0, 0x3f	; 63
    5dca:	f8 94       	cli
    5dcc:	9e bf       	out	0x3e, r25	; 62
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	8d bf       	out	0x3d, r24	; 61
    5dd2:	ed b7       	in	r30, 0x3d	; 61
    5dd4:	fe b7       	in	r31, 0x3e	; 62
    5dd6:	31 96       	adiw	r30, 0x01	; 1
    5dd8:	ce 01       	movw	r24, r28
    5dda:	01 96       	adiw	r24, 0x01	; 1
    5ddc:	91 83       	std	Z+1, r25	; 0x01
    5dde:	80 83       	st	Z, r24
    5de0:	83 e6       	ldi	r24, 0x63	; 99
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	93 83       	std	Z+3, r25	; 0x03
    5de6:	82 83       	std	Z+2, r24	; 0x02
    5de8:	8d 89       	ldd	r24, Y+21	; 0x15
    5dea:	9e 89       	ldd	r25, Y+22	; 0x16
    5dec:	af 89       	ldd	r26, Y+23	; 0x17
    5dee:	b8 8d       	ldd	r27, Y+24	; 0x18
    5df0:	84 83       	std	Z+4, r24	; 0x04
    5df2:	95 83       	std	Z+5, r25	; 0x05
    5df4:	a6 83       	std	Z+6, r26	; 0x06
    5df6:	b7 83       	std	Z+7, r27	; 0x07
    5df8:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <sprintf>
    5dfc:	8d b7       	in	r24, 0x3d	; 61
    5dfe:	9e b7       	in	r25, 0x3e	; 62
    5e00:	08 96       	adiw	r24, 0x08	; 8
    5e02:	0f b6       	in	r0, 0x3f	; 63
    5e04:	f8 94       	cli
    5e06:	9e bf       	out	0x3e, r25	; 62
    5e08:	0f be       	out	0x3f, r0	; 63
    5e0a:	8d bf       	out	0x3d, r24	; 61
    LCD_vDisplayString(L_u8Str);
    5e0c:	ce 01       	movw	r24, r28
    5e0e:	01 96       	adiw	r24, 0x01	; 1
    5e10:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
}
    5e14:	68 96       	adiw	r28, 0x18	; 24
    5e16:	0f b6       	in	r0, 0x3f	; 63
    5e18:	f8 94       	cli
    5e1a:	de bf       	out	0x3e, r29	; 62
    5e1c:	0f be       	out	0x3f, r0	; 63
    5e1e:	cd bf       	out	0x3d, r28	; 61
    5e20:	cf 91       	pop	r28
    5e22:	df 91       	pop	r29
    5e24:	08 95       	ret

00005e26 <LCD_vClearDisplay>:
void LCD_vClearDisplay()
{
    5e26:	df 93       	push	r29
    5e28:	cf 93       	push	r28
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
    5e2e:	2e 97       	sbiw	r28, 0x0e	; 14
    5e30:	0f b6       	in	r0, 0x3f	; 63
    5e32:	f8 94       	cli
    5e34:	de bf       	out	0x3e, r29	; 62
    5e36:	0f be       	out	0x3f, r0	; 63
    5e38:	cd bf       	out	0x3d, r28	; 61
    LCD_vWriteCommand(CLEAR);
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    5e40:	80 e0       	ldi	r24, 0x00	; 0
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	a0 e0       	ldi	r26, 0x00	; 0
    5e46:	b0 e4       	ldi	r27, 0x40	; 64
    5e48:	8b 87       	std	Y+11, r24	; 0x0b
    5e4a:	9c 87       	std	Y+12, r25	; 0x0c
    5e4c:	ad 87       	std	Y+13, r26	; 0x0d
    5e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e58:	20 e0       	ldi	r18, 0x00	; 0
    5e5a:	30 e0       	ldi	r19, 0x00	; 0
    5e5c:	4a ef       	ldi	r20, 0xFA	; 250
    5e5e:	54 e4       	ldi	r21, 0x44	; 68
    5e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e64:	dc 01       	movw	r26, r24
    5e66:	cb 01       	movw	r24, r22
    5e68:	8f 83       	std	Y+7, r24	; 0x07
    5e6a:	98 87       	std	Y+8, r25	; 0x08
    5e6c:	a9 87       	std	Y+9, r26	; 0x09
    5e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e70:	6f 81       	ldd	r22, Y+7	; 0x07
    5e72:	78 85       	ldd	r23, Y+8	; 0x08
    5e74:	89 85       	ldd	r24, Y+9	; 0x09
    5e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e78:	20 e0       	ldi	r18, 0x00	; 0
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	40 e8       	ldi	r20, 0x80	; 128
    5e7e:	5f e3       	ldi	r21, 0x3F	; 63
    5e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e84:	88 23       	and	r24, r24
    5e86:	2c f4       	brge	.+10     	; 0x5e92 <LCD_vClearDisplay+0x6c>
		__ticks = 1;
    5e88:	81 e0       	ldi	r24, 0x01	; 1
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	9e 83       	std	Y+6, r25	; 0x06
    5e8e:	8d 83       	std	Y+5, r24	; 0x05
    5e90:	3f c0       	rjmp	.+126    	; 0x5f10 <LCD_vClearDisplay+0xea>
	else if (__tmp > 65535)
    5e92:	6f 81       	ldd	r22, Y+7	; 0x07
    5e94:	78 85       	ldd	r23, Y+8	; 0x08
    5e96:	89 85       	ldd	r24, Y+9	; 0x09
    5e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e9a:	20 e0       	ldi	r18, 0x00	; 0
    5e9c:	3f ef       	ldi	r19, 0xFF	; 255
    5e9e:	4f e7       	ldi	r20, 0x7F	; 127
    5ea0:	57 e4       	ldi	r21, 0x47	; 71
    5ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ea6:	18 16       	cp	r1, r24
    5ea8:	4c f5       	brge	.+82     	; 0x5efc <LCD_vClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    5eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    5eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5eb2:	20 e0       	ldi	r18, 0x00	; 0
    5eb4:	30 e0       	ldi	r19, 0x00	; 0
    5eb6:	40 e2       	ldi	r20, 0x20	; 32
    5eb8:	51 e4       	ldi	r21, 0x41	; 65
    5eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	cb 01       	movw	r24, r22
    5ec2:	bc 01       	movw	r22, r24
    5ec4:	cd 01       	movw	r24, r26
    5ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	9e 83       	std	Y+6, r25	; 0x06
    5ed0:	8d 83       	std	Y+5, r24	; 0x05
    5ed2:	0f c0       	rjmp	.+30     	; 0x5ef2 <LCD_vClearDisplay+0xcc>
    5ed4:	88 ec       	ldi	r24, 0xC8	; 200
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	9c 83       	std	Y+4, r25	; 0x04
    5eda:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5edc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ede:	9c 81       	ldd	r25, Y+4	; 0x04
    5ee0:	01 97       	sbiw	r24, 0x01	; 1
    5ee2:	f1 f7       	brne	.-4      	; 0x5ee0 <LCD_vClearDisplay+0xba>
    5ee4:	9c 83       	std	Y+4, r25	; 0x04
    5ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eea:	9e 81       	ldd	r25, Y+6	; 0x06
    5eec:	01 97       	sbiw	r24, 0x01	; 1
    5eee:	9e 83       	std	Y+6, r25	; 0x06
    5ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ef6:	00 97       	sbiw	r24, 0x00	; 0
    5ef8:	69 f7       	brne	.-38     	; 0x5ed4 <LCD_vClearDisplay+0xae>
    5efa:	14 c0       	rjmp	.+40     	; 0x5f24 <LCD_vClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5efc:	6f 81       	ldd	r22, Y+7	; 0x07
    5efe:	78 85       	ldd	r23, Y+8	; 0x08
    5f00:	89 85       	ldd	r24, Y+9	; 0x09
    5f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f08:	dc 01       	movw	r26, r24
    5f0a:	cb 01       	movw	r24, r22
    5f0c:	9e 83       	std	Y+6, r25	; 0x06
    5f0e:	8d 83       	std	Y+5, r24	; 0x05
    5f10:	8d 81       	ldd	r24, Y+5	; 0x05
    5f12:	9e 81       	ldd	r25, Y+6	; 0x06
    5f14:	9a 83       	std	Y+2, r25	; 0x02
    5f16:	89 83       	std	Y+1, r24	; 0x01
    5f18:	89 81       	ldd	r24, Y+1	; 0x01
    5f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1c:	01 97       	sbiw	r24, 0x01	; 1
    5f1e:	f1 f7       	brne	.-4      	; 0x5f1c <LCD_vClearDisplay+0xf6>
    5f20:	9a 83       	std	Y+2, r25	; 0x02
    5f22:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
};
    5f24:	2e 96       	adiw	r28, 0x0e	; 14
    5f26:	0f b6       	in	r0, 0x3f	; 63
    5f28:	f8 94       	cli
    5f2a:	de bf       	out	0x3e, r29	; 62
    5f2c:	0f be       	out	0x3f, r0	; 63
    5f2e:	cd bf       	out	0x3d, r28	; 61
    5f30:	cf 91       	pop	r28
    5f32:	df 91       	pop	r29
    5f34:	08 95       	ret

00005f36 <LCD_vSetPostion>:
void LCD_vSetPostion(u8 A_u8Row, u8 A_u8Column)
{
    5f36:	df 93       	push	r29
    5f38:	cf 93       	push	r28
    5f3a:	00 d0       	rcall	.+0      	; 0x5f3c <LCD_vSetPostion+0x6>
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <LCD_vSetPostion+0x8>
    5f3e:	cd b7       	in	r28, 0x3d	; 61
    5f40:	de b7       	in	r29, 0x3e	; 62
    5f42:	89 83       	std	Y+1, r24	; 0x01
    5f44:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8Row)
    5f46:	89 81       	ldd	r24, Y+1	; 0x01
    5f48:	28 2f       	mov	r18, r24
    5f4a:	30 e0       	ldi	r19, 0x00	; 0
    5f4c:	3c 83       	std	Y+4, r19	; 0x04
    5f4e:	2b 83       	std	Y+3, r18	; 0x03
    5f50:	8b 81       	ldd	r24, Y+3	; 0x03
    5f52:	9c 81       	ldd	r25, Y+4	; 0x04
    5f54:	00 97       	sbiw	r24, 0x00	; 0
    5f56:	31 f0       	breq	.+12     	; 0x5f64 <LCD_vSetPostion+0x2e>
    5f58:	2b 81       	ldd	r18, Y+3	; 0x03
    5f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    5f5c:	21 30       	cpi	r18, 0x01	; 1
    5f5e:	31 05       	cpc	r19, r1
    5f60:	31 f0       	breq	.+12     	; 0x5f6e <LCD_vSetPostion+0x38>
    5f62:	09 c0       	rjmp	.+18     	; 0x5f76 <LCD_vSetPostion+0x40>
    {
    case ROW0:
        LCD_vWriteCommand(ROW_0_ADD + A_u8Column);
    5f64:	8a 81       	ldd	r24, Y+2	; 0x02
    5f66:	80 58       	subi	r24, 0x80	; 128
    5f68:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    5f6c:	04 c0       	rjmp	.+8      	; 0x5f76 <LCD_vSetPostion+0x40>
        break;
    case ROW1:
        LCD_vWriteCommand(ROW_1_ADD + A_u8Column);
    5f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f70:	80 54       	subi	r24, 0x40	; 64
    5f72:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
        break;
    default:
        break;
    }
};
    5f76:	0f 90       	pop	r0
    5f78:	0f 90       	pop	r0
    5f7a:	0f 90       	pop	r0
    5f7c:	0f 90       	pop	r0
    5f7e:	cf 91       	pop	r28
    5f80:	df 91       	pop	r29
    5f82:	08 95       	ret

00005f84 <LCD_vShiftRight>:
void LCD_vShiftRight(u32 A_u8NoCells)
{
    5f84:	df 93       	push	r29
    5f86:	cf 93       	push	r28
    5f88:	00 d0       	rcall	.+0      	; 0x5f8a <LCD_vShiftRight+0x6>
    5f8a:	00 d0       	rcall	.+0      	; 0x5f8c <LCD_vShiftRight+0x8>
    5f8c:	cd b7       	in	r28, 0x3d	; 61
    5f8e:	de b7       	in	r29, 0x3e	; 62
    5f90:	69 83       	std	Y+1, r22	; 0x01
    5f92:	7a 83       	std	Y+2, r23	; 0x02
    5f94:	8b 83       	std	Y+3, r24	; 0x03
    5f96:	9c 83       	std	Y+4, r25	; 0x04
    5f98:	0e c0       	rjmp	.+28     	; 0x5fb6 <LCD_vShiftRight+0x32>
    while (A_u8NoCells > 0)
    {
        LCD_vWriteCommand(SHIFT_RIGHT);
    5f9a:	8c e1       	ldi	r24, 0x1C	; 28
    5f9c:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
        A_u8NoCells--;
    5fa0:	89 81       	ldd	r24, Y+1	; 0x01
    5fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    5fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    5fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    5fa8:	01 97       	sbiw	r24, 0x01	; 1
    5faa:	a1 09       	sbc	r26, r1
    5fac:	b1 09       	sbc	r27, r1
    5fae:	89 83       	std	Y+1, r24	; 0x01
    5fb0:	9a 83       	std	Y+2, r25	; 0x02
    5fb2:	ab 83       	std	Y+3, r26	; 0x03
    5fb4:	bc 83       	std	Y+4, r27	; 0x04
        break;
    }
};
void LCD_vShiftRight(u32 A_u8NoCells)
{
    while (A_u8NoCells > 0)
    5fb6:	89 81       	ldd	r24, Y+1	; 0x01
    5fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fba:	ab 81       	ldd	r26, Y+3	; 0x03
    5fbc:	bc 81       	ldd	r27, Y+4	; 0x04
    5fbe:	00 97       	sbiw	r24, 0x00	; 0
    5fc0:	a1 05       	cpc	r26, r1
    5fc2:	b1 05       	cpc	r27, r1
    5fc4:	51 f7       	brne	.-44     	; 0x5f9a <LCD_vShiftRight+0x16>
    {
        LCD_vWriteCommand(SHIFT_RIGHT);
        A_u8NoCells--;
    }
}
    5fc6:	0f 90       	pop	r0
    5fc8:	0f 90       	pop	r0
    5fca:	0f 90       	pop	r0
    5fcc:	0f 90       	pop	r0
    5fce:	cf 91       	pop	r28
    5fd0:	df 91       	pop	r29
    5fd2:	08 95       	ret

00005fd4 <LCD_vShiftLeft>:
void LCD_vShiftLeft(u32 A_u8NoCells)
{
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	00 d0       	rcall	.+0      	; 0x5fda <LCD_vShiftLeft+0x6>
    5fda:	00 d0       	rcall	.+0      	; 0x5fdc <LCD_vShiftLeft+0x8>
    5fdc:	cd b7       	in	r28, 0x3d	; 61
    5fde:	de b7       	in	r29, 0x3e	; 62
    5fe0:	69 83       	std	Y+1, r22	; 0x01
    5fe2:	7a 83       	std	Y+2, r23	; 0x02
    5fe4:	8b 83       	std	Y+3, r24	; 0x03
    5fe6:	9c 83       	std	Y+4, r25	; 0x04
    5fe8:	0e c0       	rjmp	.+28     	; 0x6006 <LCD_vShiftLeft+0x32>
    while (A_u8NoCells > 0)
    {
        LCD_vWriteCommand(SHIFT_LEFT);
    5fea:	88 e1       	ldi	r24, 0x18	; 24
    5fec:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
        A_u8NoCells--;
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff4:	ab 81       	ldd	r26, Y+3	; 0x03
    5ff6:	bc 81       	ldd	r27, Y+4	; 0x04
    5ff8:	01 97       	sbiw	r24, 0x01	; 1
    5ffa:	a1 09       	sbc	r26, r1
    5ffc:	b1 09       	sbc	r27, r1
    5ffe:	89 83       	std	Y+1, r24	; 0x01
    6000:	9a 83       	std	Y+2, r25	; 0x02
    6002:	ab 83       	std	Y+3, r26	; 0x03
    6004:	bc 83       	std	Y+4, r27	; 0x04
        A_u8NoCells--;
    }
}
void LCD_vShiftLeft(u32 A_u8NoCells)
{
    while (A_u8NoCells > 0)
    6006:	89 81       	ldd	r24, Y+1	; 0x01
    6008:	9a 81       	ldd	r25, Y+2	; 0x02
    600a:	ab 81       	ldd	r26, Y+3	; 0x03
    600c:	bc 81       	ldd	r27, Y+4	; 0x04
    600e:	00 97       	sbiw	r24, 0x00	; 0
    6010:	a1 05       	cpc	r26, r1
    6012:	b1 05       	cpc	r27, r1
    6014:	51 f7       	brne	.-44     	; 0x5fea <LCD_vShiftLeft+0x16>
    {
        LCD_vWriteCommand(SHIFT_LEFT);
        A_u8NoCells--;
    }
}
    6016:	0f 90       	pop	r0
    6018:	0f 90       	pop	r0
    601a:	0f 90       	pop	r0
    601c:	0f 90       	pop	r0
    601e:	cf 91       	pop	r28
    6020:	df 91       	pop	r29
    6022:	08 95       	ret

00006024 <LCD_vReturnHome>:
void LCD_vReturnHome()
{
    6024:	df 93       	push	r29
    6026:	cf 93       	push	r28
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	2e 97       	sbiw	r28, 0x0e	; 14
    602e:	0f b6       	in	r0, 0x3f	; 63
    6030:	f8 94       	cli
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	0f be       	out	0x3f, r0	; 63
    6036:	cd bf       	out	0x3d, r28	; 61
    LCD_vWriteCommand(RETURN_HOME);
    6038:	82 e0       	ldi	r24, 0x02	; 2
    603a:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    603e:	80 e0       	ldi	r24, 0x00	; 0
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	a0 e0       	ldi	r26, 0x00	; 0
    6044:	b0 e4       	ldi	r27, 0x40	; 64
    6046:	8b 87       	std	Y+11, r24	; 0x0b
    6048:	9c 87       	std	Y+12, r25	; 0x0c
    604a:	ad 87       	std	Y+13, r26	; 0x0d
    604c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    604e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6050:	7c 85       	ldd	r23, Y+12	; 0x0c
    6052:	8d 85       	ldd	r24, Y+13	; 0x0d
    6054:	9e 85       	ldd	r25, Y+14	; 0x0e
    6056:	20 e0       	ldi	r18, 0x00	; 0
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	4a ef       	ldi	r20, 0xFA	; 250
    605c:	54 e4       	ldi	r21, 0x44	; 68
    605e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6062:	dc 01       	movw	r26, r24
    6064:	cb 01       	movw	r24, r22
    6066:	8f 83       	std	Y+7, r24	; 0x07
    6068:	98 87       	std	Y+8, r25	; 0x08
    606a:	a9 87       	std	Y+9, r26	; 0x09
    606c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    606e:	6f 81       	ldd	r22, Y+7	; 0x07
    6070:	78 85       	ldd	r23, Y+8	; 0x08
    6072:	89 85       	ldd	r24, Y+9	; 0x09
    6074:	9a 85       	ldd	r25, Y+10	; 0x0a
    6076:	20 e0       	ldi	r18, 0x00	; 0
    6078:	30 e0       	ldi	r19, 0x00	; 0
    607a:	40 e8       	ldi	r20, 0x80	; 128
    607c:	5f e3       	ldi	r21, 0x3F	; 63
    607e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6082:	88 23       	and	r24, r24
    6084:	2c f4       	brge	.+10     	; 0x6090 <LCD_vReturnHome+0x6c>
		__ticks = 1;
    6086:	81 e0       	ldi	r24, 0x01	; 1
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	9e 83       	std	Y+6, r25	; 0x06
    608c:	8d 83       	std	Y+5, r24	; 0x05
    608e:	3f c0       	rjmp	.+126    	; 0x610e <LCD_vReturnHome+0xea>
	else if (__tmp > 65535)
    6090:	6f 81       	ldd	r22, Y+7	; 0x07
    6092:	78 85       	ldd	r23, Y+8	; 0x08
    6094:	89 85       	ldd	r24, Y+9	; 0x09
    6096:	9a 85       	ldd	r25, Y+10	; 0x0a
    6098:	20 e0       	ldi	r18, 0x00	; 0
    609a:	3f ef       	ldi	r19, 0xFF	; 255
    609c:	4f e7       	ldi	r20, 0x7F	; 127
    609e:	57 e4       	ldi	r21, 0x47	; 71
    60a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60a4:	18 16       	cp	r1, r24
    60a6:	4c f5       	brge	.+82     	; 0x60fa <LCD_vReturnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    60aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    60ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    60ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    60b0:	20 e0       	ldi	r18, 0x00	; 0
    60b2:	30 e0       	ldi	r19, 0x00	; 0
    60b4:	40 e2       	ldi	r20, 0x20	; 32
    60b6:	51 e4       	ldi	r21, 0x41	; 65
    60b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60bc:	dc 01       	movw	r26, r24
    60be:	cb 01       	movw	r24, r22
    60c0:	bc 01       	movw	r22, r24
    60c2:	cd 01       	movw	r24, r26
    60c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60c8:	dc 01       	movw	r26, r24
    60ca:	cb 01       	movw	r24, r22
    60cc:	9e 83       	std	Y+6, r25	; 0x06
    60ce:	8d 83       	std	Y+5, r24	; 0x05
    60d0:	0f c0       	rjmp	.+30     	; 0x60f0 <LCD_vReturnHome+0xcc>
    60d2:	88 ec       	ldi	r24, 0xC8	; 200
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	9c 83       	std	Y+4, r25	; 0x04
    60d8:	8b 83       	std	Y+3, r24	; 0x03
    60da:	8b 81       	ldd	r24, Y+3	; 0x03
    60dc:	9c 81       	ldd	r25, Y+4	; 0x04
    60de:	01 97       	sbiw	r24, 0x01	; 1
    60e0:	f1 f7       	brne	.-4      	; 0x60de <LCD_vReturnHome+0xba>
    60e2:	9c 83       	std	Y+4, r25	; 0x04
    60e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60e6:	8d 81       	ldd	r24, Y+5	; 0x05
    60e8:	9e 81       	ldd	r25, Y+6	; 0x06
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    60ec:	9e 83       	std	Y+6, r25	; 0x06
    60ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60f0:	8d 81       	ldd	r24, Y+5	; 0x05
    60f2:	9e 81       	ldd	r25, Y+6	; 0x06
    60f4:	00 97       	sbiw	r24, 0x00	; 0
    60f6:	69 f7       	brne	.-38     	; 0x60d2 <LCD_vReturnHome+0xae>
    60f8:	14 c0       	rjmp	.+40     	; 0x6122 <LCD_vReturnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60fa:	6f 81       	ldd	r22, Y+7	; 0x07
    60fc:	78 85       	ldd	r23, Y+8	; 0x08
    60fe:	89 85       	ldd	r24, Y+9	; 0x09
    6100:	9a 85       	ldd	r25, Y+10	; 0x0a
    6102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6106:	dc 01       	movw	r26, r24
    6108:	cb 01       	movw	r24, r22
    610a:	9e 83       	std	Y+6, r25	; 0x06
    610c:	8d 83       	std	Y+5, r24	; 0x05
    610e:	8d 81       	ldd	r24, Y+5	; 0x05
    6110:	9e 81       	ldd	r25, Y+6	; 0x06
    6112:	9a 83       	std	Y+2, r25	; 0x02
    6114:	89 83       	std	Y+1, r24	; 0x01
    6116:	89 81       	ldd	r24, Y+1	; 0x01
    6118:	9a 81       	ldd	r25, Y+2	; 0x02
    611a:	01 97       	sbiw	r24, 0x01	; 1
    611c:	f1 f7       	brne	.-4      	; 0x611a <LCD_vReturnHome+0xf6>
    611e:	9a 83       	std	Y+2, r25	; 0x02
    6120:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    6122:	2e 96       	adiw	r28, 0x0e	; 14
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	cf 91       	pop	r28
    6130:	df 91       	pop	r29
    6132:	08 95       	ret

00006134 <LCD_vWriteSpecialChar>:
void LCD_vWriteSpecialChar(u8 *A_SpecialChar, u8 A_BlockNo, u8 A_u8Row, u8 A_u8Column)
{
    6134:	df 93       	push	r29
    6136:	cf 93       	push	r28
    6138:	cd b7       	in	r28, 0x3d	; 61
    613a:	de b7       	in	r29, 0x3e	; 62
    613c:	27 97       	sbiw	r28, 0x07	; 7
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	f8 94       	cli
    6142:	de bf       	out	0x3e, r29	; 62
    6144:	0f be       	out	0x3f, r0	; 63
    6146:	cd bf       	out	0x3d, r28	; 61
    6148:	9c 83       	std	Y+4, r25	; 0x04
    614a:	8b 83       	std	Y+3, r24	; 0x03
    614c:	6d 83       	std	Y+5, r22	; 0x05
    614e:	4e 83       	std	Y+6, r20	; 0x06
    6150:	2f 83       	std	Y+7, r18	; 0x07
    u8 L_u8CGRAMAdrress = 0;
    6152:	1a 82       	std	Y+2, r1	; 0x02
    /*Write Inside CGRAM*/
    /*Address = BLOCKNO * 8  ;*/
    /*Send Command (Address + 64) //64 0100 0000 */
    L_u8CGRAMAdrress = (A_BlockNo * 8) + CG_RAM_ADDRESS;
    6154:	8d 81       	ldd	r24, Y+5	; 0x05
    6156:	88 2f       	mov	r24, r24
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	08 96       	adiw	r24, 0x08	; 8
    615c:	88 0f       	add	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	88 0f       	add	r24, r24
    6162:	99 1f       	adc	r25, r25
    6164:	88 0f       	add	r24, r24
    6166:	99 1f       	adc	r25, r25
    6168:	8a 83       	std	Y+2, r24	; 0x02
    LCD_vWriteCommand(L_u8CGRAMAdrress);
    616a:	8a 81       	ldd	r24, Y+2	; 0x02
    616c:	0e 94 99 2c 	call	0x5932	; 0x5932 <LCD_vWriteCommand>
    /*LOOP on arary of special char*/
    for (u8 k = 0; k < 8; k++)
    6170:	19 82       	std	Y+1, r1	; 0x01
    6172:	0e c0       	rjmp	.+28     	; 0x6190 <LCD_vWriteSpecialChar+0x5c>
    {
        LCD_vDisplayChar(A_SpecialChar[k]);
    6174:	89 81       	ldd	r24, Y+1	; 0x01
    6176:	28 2f       	mov	r18, r24
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	8b 81       	ldd	r24, Y+3	; 0x03
    617c:	9c 81       	ldd	r25, Y+4	; 0x04
    617e:	fc 01       	movw	r30, r24
    6180:	e2 0f       	add	r30, r18
    6182:	f3 1f       	adc	r31, r19
    6184:	80 81       	ld	r24, Z
    6186:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <LCD_vDisplayChar>
    /*Address = BLOCKNO * 8  ;*/
    /*Send Command (Address + 64) //64 0100 0000 */
    L_u8CGRAMAdrress = (A_BlockNo * 8) + CG_RAM_ADDRESS;
    LCD_vWriteCommand(L_u8CGRAMAdrress);
    /*LOOP on arary of special char*/
    for (u8 k = 0; k < 8; k++)
    618a:	89 81       	ldd	r24, Y+1	; 0x01
    618c:	8f 5f       	subi	r24, 0xFF	; 255
    618e:	89 83       	std	Y+1, r24	; 0x01
    6190:	89 81       	ldd	r24, Y+1	; 0x01
    6192:	88 30       	cpi	r24, 0x08	; 8
    6194:	78 f3       	brcs	.-34     	; 0x6174 <LCD_vWriteSpecialChar+0x40>
    {
        LCD_vDisplayChar(A_SpecialChar[k]);
    }

    /*Set Location To DDRAM*/
    LCD_vSetPostion(A_u8Row, A_u8Column);
    6196:	8e 81       	ldd	r24, Y+6	; 0x06
    6198:	6f 81       	ldd	r22, Y+7	; 0x07
    619a:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <LCD_vSetPostion>
    /*Send The location of Block to display */
    LCD_vDisplayChar(A_BlockNo);
    619e:	8d 81       	ldd	r24, Y+5	; 0x05
    61a0:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <LCD_vDisplayChar>
}
    61a4:	27 96       	adiw	r28, 0x07	; 7
    61a6:	0f b6       	in	r0, 0x3f	; 63
    61a8:	f8 94       	cli
    61aa:	de bf       	out	0x3e, r29	; 62
    61ac:	0f be       	out	0x3f, r0	; 63
    61ae:	cd bf       	out	0x3d, r28	; 61
    61b0:	cf 91       	pop	r28
    61b2:	df 91       	pop	r29
    61b4:	08 95       	ret

000061b6 <KP_vInit>:
#include "KEYPAD_pri.h"
#include "KEYPAD_cfg.h"
#include "KEYPAD_int.h"
#include <avr/delay.h>
void KP_vInit()
{
    61b6:	df 93       	push	r29
    61b8:	cf 93       	push	r28
    61ba:	cd b7       	in	r28, 0x3d	; 61
    61bc:	de b7       	in	r29, 0x3e	; 62
    61be:	28 97       	sbiw	r28, 0x08	; 8
    61c0:	0f b6       	in	r0, 0x3f	; 63
    61c2:	f8 94       	cli
    61c4:	de bf       	out	0x3e, r29	; 62
    61c6:	0f be       	out	0x3f, r0	; 63
    61c8:	cd bf       	out	0x3d, r28	; 61
    // SET ROWS AS INPUTS
    for (u32 PIN = ROW_START_PIN; PIN <= ROW_END_PIN; PIN++)
    61ca:	84 e0       	ldi	r24, 0x04	; 4
    61cc:	90 e0       	ldi	r25, 0x00	; 0
    61ce:	a0 e0       	ldi	r26, 0x00	; 0
    61d0:	b0 e0       	ldi	r27, 0x00	; 0
    61d2:	8d 83       	std	Y+5, r24	; 0x05
    61d4:	9e 83       	std	Y+6, r25	; 0x06
    61d6:	af 83       	std	Y+7, r26	; 0x07
    61d8:	b8 87       	std	Y+8, r27	; 0x08
    61da:	17 c0       	rjmp	.+46     	; 0x620a <KP_vInit+0x54>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
    61dc:	9d 81       	ldd	r25, Y+5	; 0x05
    61de:	83 e0       	ldi	r24, 0x03	; 3
    61e0:	69 2f       	mov	r22, r25
    61e2:	40 e0       	ldi	r20, 0x00	; 0
    61e4:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    61e8:	9d 81       	ldd	r25, Y+5	; 0x05
    61ea:	83 e0       	ldi	r24, 0x03	; 3
    61ec:	69 2f       	mov	r22, r25
    61ee:	41 e0       	ldi	r20, 0x01	; 1
    61f0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
#include "KEYPAD_int.h"
#include <avr/delay.h>
void KP_vInit()
{
    // SET ROWS AS INPUTS
    for (u32 PIN = ROW_START_PIN; PIN <= ROW_END_PIN; PIN++)
    61f4:	8d 81       	ldd	r24, Y+5	; 0x05
    61f6:	9e 81       	ldd	r25, Y+6	; 0x06
    61f8:	af 81       	ldd	r26, Y+7	; 0x07
    61fa:	b8 85       	ldd	r27, Y+8	; 0x08
    61fc:	01 96       	adiw	r24, 0x01	; 1
    61fe:	a1 1d       	adc	r26, r1
    6200:	b1 1d       	adc	r27, r1
    6202:	8d 83       	std	Y+5, r24	; 0x05
    6204:	9e 83       	std	Y+6, r25	; 0x06
    6206:	af 83       	std	Y+7, r26	; 0x07
    6208:	b8 87       	std	Y+8, r27	; 0x08
    620a:	8d 81       	ldd	r24, Y+5	; 0x05
    620c:	9e 81       	ldd	r25, Y+6	; 0x06
    620e:	af 81       	ldd	r26, Y+7	; 0x07
    6210:	b8 85       	ldd	r27, Y+8	; 0x08
    6212:	88 30       	cpi	r24, 0x08	; 8
    6214:	91 05       	cpc	r25, r1
    6216:	a1 05       	cpc	r26, r1
    6218:	b1 05       	cpc	r27, r1
    621a:	00 f3       	brcs	.-64     	; 0x61dc <KP_vInit+0x26>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
    // SET COLUMS AS OUTPUTS
    for (u32 PIN = COLUMN_START_PIN; PIN <= COLUMN_END_PIN; PIN++)
    621c:	19 82       	std	Y+1, r1	; 0x01
    621e:	1a 82       	std	Y+2, r1	; 0x02
    6220:	1b 82       	std	Y+3, r1	; 0x03
    6222:	1c 82       	std	Y+4, r1	; 0x04
    6224:	17 c0       	rjmp	.+46     	; 0x6254 <KP_vInit+0x9e>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_OUTPUT);
    6226:	99 81       	ldd	r25, Y+1	; 0x01
    6228:	83 e0       	ldi	r24, 0x03	; 3
    622a:	69 2f       	mov	r22, r25
    622c:	41 e0       	ldi	r20, 0x01	; 1
    622e:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    6232:	99 81       	ldd	r25, Y+1	; 0x01
    6234:	83 e0       	ldi	r24, 0x03	; 3
    6236:	69 2f       	mov	r22, r25
    6238:	41 e0       	ldi	r20, 0x01	; 1
    623a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
    // SET COLUMS AS OUTPUTS
    for (u32 PIN = COLUMN_START_PIN; PIN <= COLUMN_END_PIN; PIN++)
    623e:	89 81       	ldd	r24, Y+1	; 0x01
    6240:	9a 81       	ldd	r25, Y+2	; 0x02
    6242:	ab 81       	ldd	r26, Y+3	; 0x03
    6244:	bc 81       	ldd	r27, Y+4	; 0x04
    6246:	01 96       	adiw	r24, 0x01	; 1
    6248:	a1 1d       	adc	r26, r1
    624a:	b1 1d       	adc	r27, r1
    624c:	89 83       	std	Y+1, r24	; 0x01
    624e:	9a 83       	std	Y+2, r25	; 0x02
    6250:	ab 83       	std	Y+3, r26	; 0x03
    6252:	bc 83       	std	Y+4, r27	; 0x04
    6254:	89 81       	ldd	r24, Y+1	; 0x01
    6256:	9a 81       	ldd	r25, Y+2	; 0x02
    6258:	ab 81       	ldd	r26, Y+3	; 0x03
    625a:	bc 81       	ldd	r27, Y+4	; 0x04
    625c:	84 30       	cpi	r24, 0x04	; 4
    625e:	91 05       	cpc	r25, r1
    6260:	a1 05       	cpc	r26, r1
    6262:	b1 05       	cpc	r27, r1
    6264:	00 f3       	brcs	.-64     	; 0x6226 <KP_vInit+0x70>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_OUTPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
}
    6266:	28 96       	adiw	r28, 0x08	; 8
    6268:	0f b6       	in	r0, 0x3f	; 63
    626a:	f8 94       	cli
    626c:	de bf       	out	0x3e, r29	; 62
    626e:	0f be       	out	0x3f, r0	; 63
    6270:	cd bf       	out	0x3d, r28	; 61
    6272:	cf 91       	pop	r28
    6274:	df 91       	pop	r29
    6276:	08 95       	ret

00006278 <KP_u8ReadKP>:
u8 KP_u8ReadKP()
{
    6278:	df 93       	push	r29
    627a:	cf 93       	push	r28
    627c:	cd b7       	in	r28, 0x3d	; 61
    627e:	de b7       	in	r29, 0x3e	; 62
    6280:	a0 97       	sbiw	r28, 0x20	; 32
    6282:	0f b6       	in	r0, 0x3f	; 63
    6284:	f8 94       	cli
    6286:	de bf       	out	0x3e, r29	; 62
    6288:	0f be       	out	0x3f, r0	; 63
    628a:	cd bf       	out	0x3d, r28	; 61
    u32 L_u8SaveRow = -1, L_u8SaveColumn = -1;
    628c:	8f ef       	ldi	r24, 0xFF	; 255
    628e:	9f ef       	ldi	r25, 0xFF	; 255
    6290:	af ef       	ldi	r26, 0xFF	; 255
    6292:	bf ef       	ldi	r27, 0xFF	; 255
    6294:	8d 8f       	std	Y+29, r24	; 0x1d
    6296:	9e 8f       	std	Y+30, r25	; 0x1e
    6298:	af 8f       	std	Y+31, r26	; 0x1f
    629a:	b8 a3       	std	Y+32, r27	; 0x20
    629c:	8f ef       	ldi	r24, 0xFF	; 255
    629e:	9f ef       	ldi	r25, 0xFF	; 255
    62a0:	af ef       	ldi	r26, 0xFF	; 255
    62a2:	bf ef       	ldi	r27, 0xFF	; 255
    62a4:	89 8f       	std	Y+25, r24	; 0x19
    62a6:	9a 8f       	std	Y+26, r25	; 0x1a
    62a8:	ab 8f       	std	Y+27, r26	; 0x1b
    62aa:	bc 8f       	std	Y+28, r27	; 0x1c
    u8 L_u8Value, L_u8Flag = 1;
    62ac:	81 e0       	ldi	r24, 0x01	; 1
    62ae:	8f 8b       	std	Y+23, r24	; 0x17
        {{'7', '8', '9', '-'},
         {'4', '5', '6', '+'},
         {'1', '2', '3', '*'},
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    62b0:	1b 8a       	std	Y+19, r1	; 0x13
    62b2:	1c 8a       	std	Y+20, r1	; 0x14
    62b4:	1d 8a       	std	Y+21, r1	; 0x15
    62b6:	1e 8a       	std	Y+22, r1	; 0x16
    62b8:	cb c0       	rjmp	.+406    	; 0x6450 <KP_u8ReadKP+0x1d8>
    {
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, LOW);
    62ba:	9b 89       	ldd	r25, Y+19	; 0x13
    62bc:	83 e0       	ldi	r24, 0x03	; 3
    62be:	69 2f       	mov	r22, r25
    62c0:	40 e0       	ldi	r20, 0x00	; 0
    62c2:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        for (u32 r = 0; r < 4; r++)
    62c6:	1f 86       	std	Y+15, r1	; 0x0f
    62c8:	18 8a       	std	Y+16, r1	; 0x10
    62ca:	19 8a       	std	Y+17, r1	; 0x11
    62cc:	1a 8a       	std	Y+18, r1	; 0x12
    62ce:	a2 c0       	rjmp	.+324    	; 0x6414 <KP_u8ReadKP+0x19c>
        {
            if (DIO_u8GetPinVal(KEYPAD_PORT, ROW_START_PIN + r) == 0)
    62d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    62d2:	98 2f       	mov	r25, r24
    62d4:	9c 5f       	subi	r25, 0xFC	; 252
    62d6:	83 e0       	ldi	r24, 0x03	; 3
    62d8:	69 2f       	mov	r22, r25
    62da:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    62de:	88 23       	and	r24, r24
    62e0:	09 f0       	breq	.+2      	; 0x62e4 <KP_u8ReadKP+0x6c>
    62e2:	8d c0       	rjmp	.+282    	; 0x63fe <KP_u8ReadKP+0x186>
            {
                while (DIO_u8GetPinVal(KEYPAD_PORT, ROW_START_PIN + r) == 0)
    62e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    62e6:	98 2f       	mov	r25, r24
    62e8:	9c 5f       	subi	r25, 0xFC	; 252
    62ea:	83 e0       	ldi	r24, 0x03	; 3
    62ec:	69 2f       	mov	r22, r25
    62ee:	0e 94 a8 14 	call	0x2950	; 0x2950 <DIO_u8GetPinVal>
    62f2:	88 23       	and	r24, r24
    62f4:	b9 f3       	breq	.-18     	; 0x62e4 <KP_u8ReadKP+0x6c>
                    ;
                L_u8SaveRow = r;
    62f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    62f8:	98 89       	ldd	r25, Y+16	; 0x10
    62fa:	a9 89       	ldd	r26, Y+17	; 0x11
    62fc:	ba 89       	ldd	r27, Y+18	; 0x12
    62fe:	8d 8f       	std	Y+29, r24	; 0x1d
    6300:	9e 8f       	std	Y+30, r25	; 0x1e
    6302:	af 8f       	std	Y+31, r26	; 0x1f
    6304:	b8 a3       	std	Y+32, r27	; 0x20
                L_u8SaveColumn = c;
    6306:	8b 89       	ldd	r24, Y+19	; 0x13
    6308:	9c 89       	ldd	r25, Y+20	; 0x14
    630a:	ad 89       	ldd	r26, Y+21	; 0x15
    630c:	be 89       	ldd	r27, Y+22	; 0x16
    630e:	89 8f       	std	Y+25, r24	; 0x19
    6310:	9a 8f       	std	Y+26, r25	; 0x1a
    6312:	ab 8f       	std	Y+27, r26	; 0x1b
    6314:	bc 8f       	std	Y+28, r27	; 0x1c
                L_u8Flag = 0;
    6316:	1f 8a       	std	Y+23, r1	; 0x17
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	a0 e7       	ldi	r26, 0x70	; 112
    631e:	b1 e4       	ldi	r27, 0x41	; 65
    6320:	8b 87       	std	Y+11, r24	; 0x0b
    6322:	9c 87       	std	Y+12, r25	; 0x0c
    6324:	ad 87       	std	Y+13, r26	; 0x0d
    6326:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6328:	6b 85       	ldd	r22, Y+11	; 0x0b
    632a:	7c 85       	ldd	r23, Y+12	; 0x0c
    632c:	8d 85       	ldd	r24, Y+13	; 0x0d
    632e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6330:	20 e0       	ldi	r18, 0x00	; 0
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	4a ef       	ldi	r20, 0xFA	; 250
    6336:	54 e4       	ldi	r21, 0x44	; 68
    6338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    633c:	dc 01       	movw	r26, r24
    633e:	cb 01       	movw	r24, r22
    6340:	8f 83       	std	Y+7, r24	; 0x07
    6342:	98 87       	std	Y+8, r25	; 0x08
    6344:	a9 87       	std	Y+9, r26	; 0x09
    6346:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6348:	6f 81       	ldd	r22, Y+7	; 0x07
    634a:	78 85       	ldd	r23, Y+8	; 0x08
    634c:	89 85       	ldd	r24, Y+9	; 0x09
    634e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6350:	20 e0       	ldi	r18, 0x00	; 0
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	40 e8       	ldi	r20, 0x80	; 128
    6356:	5f e3       	ldi	r21, 0x3F	; 63
    6358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    635c:	88 23       	and	r24, r24
    635e:	2c f4       	brge	.+10     	; 0x636a <KP_u8ReadKP+0xf2>
		__ticks = 1;
    6360:	81 e0       	ldi	r24, 0x01	; 1
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	9e 83       	std	Y+6, r25	; 0x06
    6366:	8d 83       	std	Y+5, r24	; 0x05
    6368:	3f c0       	rjmp	.+126    	; 0x63e8 <KP_u8ReadKP+0x170>
	else if (__tmp > 65535)
    636a:	6f 81       	ldd	r22, Y+7	; 0x07
    636c:	78 85       	ldd	r23, Y+8	; 0x08
    636e:	89 85       	ldd	r24, Y+9	; 0x09
    6370:	9a 85       	ldd	r25, Y+10	; 0x0a
    6372:	20 e0       	ldi	r18, 0x00	; 0
    6374:	3f ef       	ldi	r19, 0xFF	; 255
    6376:	4f e7       	ldi	r20, 0x7F	; 127
    6378:	57 e4       	ldi	r21, 0x47	; 71
    637a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    637e:	18 16       	cp	r1, r24
    6380:	4c f5       	brge	.+82     	; 0x63d4 <KP_u8ReadKP+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6382:	6b 85       	ldd	r22, Y+11	; 0x0b
    6384:	7c 85       	ldd	r23, Y+12	; 0x0c
    6386:	8d 85       	ldd	r24, Y+13	; 0x0d
    6388:	9e 85       	ldd	r25, Y+14	; 0x0e
    638a:	20 e0       	ldi	r18, 0x00	; 0
    638c:	30 e0       	ldi	r19, 0x00	; 0
    638e:	40 e2       	ldi	r20, 0x20	; 32
    6390:	51 e4       	ldi	r21, 0x41	; 65
    6392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6396:	dc 01       	movw	r26, r24
    6398:	cb 01       	movw	r24, r22
    639a:	bc 01       	movw	r22, r24
    639c:	cd 01       	movw	r24, r26
    639e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63a2:	dc 01       	movw	r26, r24
    63a4:	cb 01       	movw	r24, r22
    63a6:	9e 83       	std	Y+6, r25	; 0x06
    63a8:	8d 83       	std	Y+5, r24	; 0x05
    63aa:	0f c0       	rjmp	.+30     	; 0x63ca <KP_u8ReadKP+0x152>
    63ac:	88 ec       	ldi	r24, 0xC8	; 200
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	9c 83       	std	Y+4, r25	; 0x04
    63b2:	8b 83       	std	Y+3, r24	; 0x03
    63b4:	8b 81       	ldd	r24, Y+3	; 0x03
    63b6:	9c 81       	ldd	r25, Y+4	; 0x04
    63b8:	01 97       	sbiw	r24, 0x01	; 1
    63ba:	f1 f7       	brne	.-4      	; 0x63b8 <KP_u8ReadKP+0x140>
    63bc:	9c 83       	std	Y+4, r25	; 0x04
    63be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63c0:	8d 81       	ldd	r24, Y+5	; 0x05
    63c2:	9e 81       	ldd	r25, Y+6	; 0x06
    63c4:	01 97       	sbiw	r24, 0x01	; 1
    63c6:	9e 83       	std	Y+6, r25	; 0x06
    63c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63ca:	8d 81       	ldd	r24, Y+5	; 0x05
    63cc:	9e 81       	ldd	r25, Y+6	; 0x06
    63ce:	00 97       	sbiw	r24, 0x00	; 0
    63d0:	69 f7       	brne	.-38     	; 0x63ac <KP_u8ReadKP+0x134>
    63d2:	2a c0       	rjmp	.+84     	; 0x6428 <KP_u8ReadKP+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d4:	6f 81       	ldd	r22, Y+7	; 0x07
    63d6:	78 85       	ldd	r23, Y+8	; 0x08
    63d8:	89 85       	ldd	r24, Y+9	; 0x09
    63da:	9a 85       	ldd	r25, Y+10	; 0x0a
    63dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63e0:	dc 01       	movw	r26, r24
    63e2:	cb 01       	movw	r24, r22
    63e4:	9e 83       	std	Y+6, r25	; 0x06
    63e6:	8d 83       	std	Y+5, r24	; 0x05
    63e8:	8d 81       	ldd	r24, Y+5	; 0x05
    63ea:	9e 81       	ldd	r25, Y+6	; 0x06
    63ec:	9a 83       	std	Y+2, r25	; 0x02
    63ee:	89 83       	std	Y+1, r24	; 0x01
    63f0:	89 81       	ldd	r24, Y+1	; 0x01
    63f2:	9a 81       	ldd	r25, Y+2	; 0x02
    63f4:	01 97       	sbiw	r24, 0x01	; 1
    63f6:	f1 f7       	brne	.-4      	; 0x63f4 <KP_u8ReadKP+0x17c>
    63f8:	9a 83       	std	Y+2, r25	; 0x02
    63fa:	89 83       	std	Y+1, r24	; 0x01
    63fc:	15 c0       	rjmp	.+42     	; 0x6428 <KP_u8ReadKP+0x1b0>
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    {
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, LOW);
        for (u32 r = 0; r < 4; r++)
    63fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    6400:	98 89       	ldd	r25, Y+16	; 0x10
    6402:	a9 89       	ldd	r26, Y+17	; 0x11
    6404:	ba 89       	ldd	r27, Y+18	; 0x12
    6406:	01 96       	adiw	r24, 0x01	; 1
    6408:	a1 1d       	adc	r26, r1
    640a:	b1 1d       	adc	r27, r1
    640c:	8f 87       	std	Y+15, r24	; 0x0f
    640e:	98 8b       	std	Y+16, r25	; 0x10
    6410:	a9 8b       	std	Y+17, r26	; 0x11
    6412:	ba 8b       	std	Y+18, r27	; 0x12
    6414:	8f 85       	ldd	r24, Y+15	; 0x0f
    6416:	98 89       	ldd	r25, Y+16	; 0x10
    6418:	a9 89       	ldd	r26, Y+17	; 0x11
    641a:	ba 89       	ldd	r27, Y+18	; 0x12
    641c:	84 30       	cpi	r24, 0x04	; 4
    641e:	91 05       	cpc	r25, r1
    6420:	a1 05       	cpc	r26, r1
    6422:	b1 05       	cpc	r27, r1
    6424:	08 f4       	brcc	.+2      	; 0x6428 <KP_u8ReadKP+0x1b0>
    6426:	54 cf       	rjmp	.-344    	; 0x62d0 <KP_u8ReadKP+0x58>
                L_u8Flag = 0;
                _delay_ms(15);
                break;
            }
        }
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, HIGH);
    6428:	9b 89       	ldd	r25, Y+19	; 0x13
    642a:	83 e0       	ldi	r24, 0x03	; 3
    642c:	69 2f       	mov	r22, r25
    642e:	41 e0       	ldi	r20, 0x01	; 1
    6430:	0e 94 70 13 	call	0x26e0	; 0x26e0 <DIO_vSetPinVal>
        if (L_u8Flag == 0)
    6434:	8f 89       	ldd	r24, Y+23	; 0x17
    6436:	88 23       	and	r24, r24
    6438:	a9 f0       	breq	.+42     	; 0x6464 <KP_u8ReadKP+0x1ec>
        {{'7', '8', '9', '-'},
         {'4', '5', '6', '+'},
         {'1', '2', '3', '*'},
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    643a:	8b 89       	ldd	r24, Y+19	; 0x13
    643c:	9c 89       	ldd	r25, Y+20	; 0x14
    643e:	ad 89       	ldd	r26, Y+21	; 0x15
    6440:	be 89       	ldd	r27, Y+22	; 0x16
    6442:	01 96       	adiw	r24, 0x01	; 1
    6444:	a1 1d       	adc	r26, r1
    6446:	b1 1d       	adc	r27, r1
    6448:	8b 8b       	std	Y+19, r24	; 0x13
    644a:	9c 8b       	std	Y+20, r25	; 0x14
    644c:	ad 8b       	std	Y+21, r26	; 0x15
    644e:	be 8b       	std	Y+22, r27	; 0x16
    6450:	8b 89       	ldd	r24, Y+19	; 0x13
    6452:	9c 89       	ldd	r25, Y+20	; 0x14
    6454:	ad 89       	ldd	r26, Y+21	; 0x15
    6456:	be 89       	ldd	r27, Y+22	; 0x16
    6458:	84 30       	cpi	r24, 0x04	; 4
    645a:	91 05       	cpc	r25, r1
    645c:	a1 05       	cpc	r26, r1
    645e:	b1 05       	cpc	r27, r1
    6460:	08 f4       	brcc	.+2      	; 0x6464 <KP_u8ReadKP+0x1ec>
    6462:	2b cf       	rjmp	.-426    	; 0x62ba <KP_u8ReadKP+0x42>
        {
            break;
        }
    }

    if (L_u8SaveRow == -1 && L_u8SaveColumn == -1)
    6464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6468:	af 8d       	ldd	r26, Y+31	; 0x1f
    646a:	b8 a1       	ldd	r27, Y+32	; 0x20
    646c:	8f 3f       	cpi	r24, 0xFF	; 255
    646e:	2f ef       	ldi	r18, 0xFF	; 255
    6470:	92 07       	cpc	r25, r18
    6472:	2f ef       	ldi	r18, 0xFF	; 255
    6474:	a2 07       	cpc	r26, r18
    6476:	2f ef       	ldi	r18, 0xFF	; 255
    6478:	b2 07       	cpc	r27, r18
    647a:	79 f4       	brne	.+30     	; 0x649a <KP_u8ReadKP+0x222>
    647c:	89 8d       	ldd	r24, Y+25	; 0x19
    647e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6480:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6482:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6484:	8f 3f       	cpi	r24, 0xFF	; 255
    6486:	2f ef       	ldi	r18, 0xFF	; 255
    6488:	92 07       	cpc	r25, r18
    648a:	2f ef       	ldi	r18, 0xFF	; 255
    648c:	a2 07       	cpc	r26, r18
    648e:	2f ef       	ldi	r18, 0xFF	; 255
    6490:	b2 07       	cpc	r27, r18
    6492:	19 f4       	brne	.+6      	; 0x649a <KP_u8ReadKP+0x222>
    {
        L_u8Value = NOT_PRESSED;
    6494:	81 e4       	ldi	r24, 0x41	; 65
    6496:	88 8f       	std	Y+24, r24	; 0x18
    6498:	13 c0       	rjmp	.+38     	; 0x64c0 <KP_u8ReadKP+0x248>
    }
    else
    {
        L_u8Value = L_u8KeyPad[L_u8SaveRow][L_u8SaveColumn];
    649a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    649c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    649e:	af 8d       	ldd	r26, Y+31	; 0x1f
    64a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    64a2:	29 8d       	ldd	r18, Y+25	; 0x19
    64a4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    64a6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    64a8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    64aa:	88 0f       	add	r24, r24
    64ac:	99 1f       	adc	r25, r25
    64ae:	88 0f       	add	r24, r24
    64b0:	99 1f       	adc	r25, r25
    64b2:	82 0f       	add	r24, r18
    64b4:	93 1f       	adc	r25, r19
    64b6:	fc 01       	movw	r30, r24
    64b8:	e3 53       	subi	r30, 0x33	; 51
    64ba:	fe 4f       	sbci	r31, 0xFE	; 254
    64bc:	80 81       	ld	r24, Z
    64be:	88 8f       	std	Y+24, r24	; 0x18
    }

    return L_u8Value;
    64c0:	88 8d       	ldd	r24, Y+24	; 0x18
}
    64c2:	a0 96       	adiw	r28, 0x20	; 32
    64c4:	0f b6       	in	r0, 0x3f	; 63
    64c6:	f8 94       	cli
    64c8:	de bf       	out	0x3e, r29	; 62
    64ca:	0f be       	out	0x3f, r0	; 63
    64cc:	cd bf       	out	0x3d, r28	; 61
    64ce:	cf 91       	pop	r28
    64d0:	df 91       	pop	r29
    64d2:	08 95       	ret

000064d4 <EEPROM_Init>:
#include "../../MCAL/I2C/I2C_int.h"

#include "EEPROM_cfg.h"
#include "EEPROM_int.h"
void EEPROM_Init()
{
    64d4:	df 93       	push	r29
    64d6:	cf 93       	push	r28
    64d8:	cd b7       	in	r28, 0x3d	; 61
    64da:	de b7       	in	r29, 0x3e	; 62
	I2C_vMasterInit(0);
    64dc:	80 e0       	ldi	r24, 0x00	; 0
    64de:	0e 94 0b 10 	call	0x2016	; 0x2016 <I2C_vMasterInit>
}
    64e2:	cf 91       	pop	r28
    64e4:	df 91       	pop	r29
    64e6:	08 95       	ret

000064e8 <EEPROM_sendDataByte>:
*************************************************
Note: The address you pass to the function is ranged from 0 to 1023
*************************************************
 */
void EEPROM_sendDataByte(u8 DataByte, u16 Address)
{
    64e8:	df 93       	push	r29
    64ea:	cf 93       	push	r28
    64ec:	00 d0       	rcall	.+0      	; 0x64ee <EEPROM_sendDataByte+0x6>
    64ee:	00 d0       	rcall	.+0      	; 0x64f0 <EEPROM_sendDataByte+0x8>
    64f0:	cd b7       	in	r28, 0x3d	; 61
    64f2:	de b7       	in	r29, 0x3e	; 62
    64f4:	8a 83       	std	Y+2, r24	; 0x02
    64f6:	7c 83       	std	Y+4, r23	; 0x04
    64f8:	6b 83       	std	Y+3, r22	; 0x03

	I2C_ErrStatus status;
	status = I2C_SendStartCondition();
    64fa:	0e 94 4c 10 	call	0x2098	; 0x2098 <I2C_SendStartCondition>
    64fe:	89 83       	std	Y+1, r24	; 0x01

	/* Send the fixed address then A2 pin then the most 2 bit of the 10 bit address */
	status = I2C_SendSlaveAddressWithWrite(0b01010000 | A2 << 2 | Address >> 8);
    6500:	8b 81       	ldd	r24, Y+3	; 0x03
    6502:	9c 81       	ldd	r25, Y+4	; 0x04
    6504:	89 2f       	mov	r24, r25
    6506:	99 27       	eor	r25, r25
    6508:	80 65       	ori	r24, 0x50	; 80
    650a:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_SendSlaveAddressWithWrite>
    650e:	89 83       	std	Y+1, r24	; 0x01

	/* send the rest of the address */
	status = I2C_MasterWriteDataByte((u8)Address);
    6510:	8b 81       	ldd	r24, Y+3	; 0x03
    6512:	0e 94 8c 10 	call	0x2118	; 0x2118 <I2C_MasterWriteDataByte>
    6516:	89 83       	std	Y+1, r24	; 0x01

	/* Send the data */
	status = I2C_MasterWriteDataByte(DataByte);
    6518:	8a 81       	ldd	r24, Y+2	; 0x02
    651a:	0e 94 8c 10 	call	0x2118	; 0x2118 <I2C_MasterWriteDataByte>
    651e:	89 83       	std	Y+1, r24	; 0x01

	I2C_SendStopCondition();
    6520:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_SendStopCondition>
};
    6524:	0f 90       	pop	r0
    6526:	0f 90       	pop	r0
    6528:	0f 90       	pop	r0
    652a:	0f 90       	pop	r0
    652c:	cf 91       	pop	r28
    652e:	df 91       	pop	r29
    6530:	08 95       	ret

00006532 <EEPROM_readDataByte>:
u8 EEPROM_readDataByte(u16 Address)
{
    6532:	df 93       	push	r29
    6534:	cf 93       	push	r28
    6536:	00 d0       	rcall	.+0      	; 0x6538 <EEPROM_readDataByte+0x6>
    6538:	00 d0       	rcall	.+0      	; 0x653a <EEPROM_readDataByte+0x8>
    653a:	cd b7       	in	r28, 0x3d	; 61
    653c:	de b7       	in	r29, 0x3e	; 62
    653e:	9c 83       	std	Y+4, r25	; 0x04
    6540:	8b 83       	std	Y+3, r24	; 0x03
	I2C_ErrStatus status;
	u8 DataByte;
	status = I2C_SendStartCondition();
    6542:	0e 94 4c 10 	call	0x2098	; 0x2098 <I2C_SendStartCondition>
    6546:	89 83       	std	Y+1, r24	; 0x01
	/* Send the fixed addres then A2 pin then the most 2 bit of the 10 bit address */
	status = I2C_SendSlaveAddressWithWrite(0b01010000 | A2 << 2 | Address >> 8);
    6548:	8b 81       	ldd	r24, Y+3	; 0x03
    654a:	9c 81       	ldd	r25, Y+4	; 0x04
    654c:	89 2f       	mov	r24, r25
    654e:	99 27       	eor	r25, r25
    6550:	80 65       	ori	r24, 0x50	; 80
    6552:	0e 94 13 11 	call	0x2226	; 0x2226 <I2C_SendSlaveAddressWithWrite>
    6556:	89 83       	std	Y+1, r24	; 0x01
	/* send the rest of the address */
	status = I2C_MasterWriteDataByte((u8)Address);
    6558:	8b 81       	ldd	r24, Y+3	; 0x03
    655a:	0e 94 8c 10 	call	0x2118	; 0x2118 <I2C_MasterWriteDataByte>
    655e:	89 83       	std	Y+1, r24	; 0x01
	/* Repeated Start */
	status = I2C_SendRepeatedStart();
    6560:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <I2C_SendRepeatedStart>
    6564:	89 83       	std	Y+1, r24	; 0x01
	/* Slave address read*/
	status = I2C_SendSlaveAddressWithRead(0b01010000 | A2 << 2 | Address >> 8);
    6566:	8b 81       	ldd	r24, Y+3	; 0x03
    6568:	9c 81       	ldd	r25, Y+4	; 0x04
    656a:	89 2f       	mov	r24, r25
    656c:	99 27       	eor	r25, r25
    656e:	80 65       	ori	r24, 0x50	; 80
    6570:	0e 94 41 11 	call	0x2282	; 0x2282 <I2C_SendSlaveAddressWithRead>
    6574:	89 83       	std	Y+1, r24	; 0x01
	/* get the data */
	status = I2C_MasterReadDataByteACK(&DataByte);
    6576:	ce 01       	movw	r24, r28
    6578:	02 96       	adiw	r24, 0x02	; 2
    657a:	0e 94 de 10 	call	0x21bc	; 0x21bc <I2C_MasterReadDataByteACK>
    657e:	89 83       	std	Y+1, r24	; 0x01
	I2C_SendStopCondition();
    6580:	0e 94 6f 11 	call	0x22de	; 0x22de <I2C_SendStopCondition>
	return DataByte;
    6584:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6586:	0f 90       	pop	r0
    6588:	0f 90       	pop	r0
    658a:	0f 90       	pop	r0
    658c:	0f 90       	pop	r0
    658e:	cf 91       	pop	r28
    6590:	df 91       	pop	r29
    6592:	08 95       	ret

00006594 <DCM_vInit>:
#include "DCM_cfg.h"
#include "DCM_int.h"
#include "../TRANSISTORS/TRANSISTORS_int.h"

DCM_vInit()
{
    6594:	df 93       	push	r29
    6596:	cf 93       	push	r28
    6598:	cd b7       	in	r28, 0x3d	; 61
    659a:	de b7       	in	r29, 0x3e	; 62
    TRANSISTOR_vInit(TRANS1);
    659c:	81 e0       	ldi	r24, 0x01	; 1
    659e:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <TRANSISTOR_vInit>
    TRANSISTOR_vInit(TRANS2);
    65a2:	82 e0       	ldi	r24, 0x02	; 2
    65a4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <TRANSISTOR_vInit>
}
    65a8:	cf 91       	pop	r28
    65aa:	df 91       	pop	r29
    65ac:	08 95       	ret

000065ae <DCM_vSetDirection>:
DCM_vSetDirection(u8 A_u8Direction)
{
    65ae:	df 93       	push	r29
    65b0:	cf 93       	push	r28
    65b2:	00 d0       	rcall	.+0      	; 0x65b4 <DCM_vSetDirection+0x6>
    65b4:	0f 92       	push	r0
    65b6:	cd b7       	in	r28, 0x3d	; 61
    65b8:	de b7       	in	r29, 0x3e	; 62
    65ba:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8Direction)
    65bc:	89 81       	ldd	r24, Y+1	; 0x01
    65be:	28 2f       	mov	r18, r24
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	3b 83       	std	Y+3, r19	; 0x03
    65c4:	2a 83       	std	Y+2, r18	; 0x02
    65c6:	8a 81       	ldd	r24, Y+2	; 0x02
    65c8:	9b 81       	ldd	r25, Y+3	; 0x03
    65ca:	81 30       	cpi	r24, 0x01	; 1
    65cc:	91 05       	cpc	r25, r1
    65ce:	81 f0       	breq	.+32     	; 0x65f0 <DCM_vSetDirection+0x42>
    65d0:	2a 81       	ldd	r18, Y+2	; 0x02
    65d2:	3b 81       	ldd	r19, Y+3	; 0x03
    65d4:	22 30       	cpi	r18, 0x02	; 2
    65d6:	31 05       	cpc	r19, r1
    65d8:	91 f0       	breq	.+36     	; 0x65fe <DCM_vSetDirection+0x50>
    65da:	8a 81       	ldd	r24, Y+2	; 0x02
    65dc:	9b 81       	ldd	r25, Y+3	; 0x03
    65de:	00 97       	sbiw	r24, 0x00	; 0
    65e0:	a1 f4       	brne	.+40     	; 0x660a <DCM_vSetDirection+0x5c>
    {
    case CLOCKWISE:
        TRANSISTOR_vTurnOn(TRANS1);
    65e2:	81 e0       	ldi	r24, 0x01	; 1
    65e4:	0e 94 33 17 	call	0x2e66	; 0x2e66 <TRANSISTOR_vTurnOn>
        TRANSISTOR_vTurnOff(TRANS2);
    65e8:	82 e0       	ldi	r24, 0x02	; 2
    65ea:	0e 94 76 17 	call	0x2eec	; 0x2eec <TRANSISTOR_vTurnOff>
    65ee:	0d c0       	rjmp	.+26     	; 0x660a <DCM_vSetDirection+0x5c>

        break;
    case ANTI_CLOCKWISE:
        TRANSISTOR_vTurnOff(TRANS1);
    65f0:	81 e0       	ldi	r24, 0x01	; 1
    65f2:	0e 94 76 17 	call	0x2eec	; 0x2eec <TRANSISTOR_vTurnOff>
        TRANSISTOR_vTurnOn(TRANS2);
    65f6:	82 e0       	ldi	r24, 0x02	; 2
    65f8:	0e 94 33 17 	call	0x2e66	; 0x2e66 <TRANSISTOR_vTurnOn>
    65fc:	06 c0       	rjmp	.+12     	; 0x660a <DCM_vSetDirection+0x5c>
        break;
    case STOP:
        TRANSISTOR_vTurnOff(TRANS1);
    65fe:	81 e0       	ldi	r24, 0x01	; 1
    6600:	0e 94 76 17 	call	0x2eec	; 0x2eec <TRANSISTOR_vTurnOff>
        TRANSISTOR_vTurnOff(TRANS2);
    6604:	82 e0       	ldi	r24, 0x02	; 2
    6606:	0e 94 76 17 	call	0x2eec	; 0x2eec <TRANSISTOR_vTurnOff>
        break;
    default:
        break;
    }
}
    660a:	0f 90       	pop	r0
    660c:	0f 90       	pop	r0
    660e:	0f 90       	pop	r0
    6610:	cf 91       	pop	r28
    6612:	df 91       	pop	r29
    6614:	08 95       	ret

00006616 <TASK_1>:

#include "../HAL/LCD/LCD_int.h"
#include "../HAL/EEPROM/EEPROM_int.h"
#include <avr/delay.h>
void TASK_1()
{
    6616:	df 93       	push	r29
    6618:	cf 93       	push	r28
    661a:	cd b7       	in	r28, 0x3d	; 61
    661c:	de b7       	in	r29, 0x3e	; 62
	DIO_vTogPinVal(PORTA_ID, PIN3_ID);
    661e:	80 e0       	ldi	r24, 0x00	; 0
    6620:	63 e0       	ldi	r22, 0x03	; 3
    6622:	0e 94 2b 14 	call	0x2856	; 0x2856 <DIO_vTogPinVal>
}
    6626:	cf 91       	pop	r28
    6628:	df 91       	pop	r29
    662a:	08 95       	ret

0000662c <TASK_2>:
void TASK_2()
{
    662c:	df 93       	push	r29
    662e:	cf 93       	push	r28
    6630:	cd b7       	in	r28, 0x3d	; 61
    6632:	de b7       	in	r29, 0x3e	; 62
	DIO_vTogPinVal(PORTA_ID, PIN4_ID);
    6634:	80 e0       	ldi	r24, 0x00	; 0
    6636:	64 e0       	ldi	r22, 0x04	; 4
    6638:	0e 94 2b 14 	call	0x2856	; 0x2856 <DIO_vTogPinVal>
}
    663c:	cf 91       	pop	r28
    663e:	df 91       	pop	r29
    6640:	08 95       	ret

00006642 <TASK_3>:
void TASK_3()
{
    6642:	df 93       	push	r29
    6644:	cf 93       	push	r28
    6646:	cd b7       	in	r28, 0x3d	; 61
    6648:	de b7       	in	r29, 0x3e	; 62
	DIO_vTogPinVal(PORTA_ID, PIN5_ID);
    664a:	80 e0       	ldi	r24, 0x00	; 0
    664c:	65 e0       	ldi	r22, 0x05	; 5
    664e:	0e 94 2b 14 	call	0x2856	; 0x2856 <DIO_vTogPinVal>
}
    6652:	cf 91       	pop	r28
    6654:	df 91       	pop	r29
    6656:	08 95       	ret

00006658 <main>:
int main()
{
    6658:	df 93       	push	r29
    665a:	cf 93       	push	r28
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(PORTA_ID, PIN3_ID, DIR_OUTPUT);
    6660:	80 e0       	ldi	r24, 0x00	; 0
    6662:	63 e0       	ldi	r22, 0x03	; 3
    6664:	41 e0       	ldi	r20, 0x01	; 1
    6666:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
	DIO_vSetPinDir(PORTA_ID, PIN4_ID, DIR_OUTPUT);
    666a:	80 e0       	ldi	r24, 0x00	; 0
    666c:	64 e0       	ldi	r22, 0x04	; 4
    666e:	41 e0       	ldi	r20, 0x01	; 1
    6670:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>
	DIO_vSetPinDir(PORTA_ID, PIN5_ID, DIR_OUTPUT);
    6674:	80 e0       	ldi	r24, 0x00	; 0
    6676:	65 e0       	ldi	r22, 0x05	; 5
    6678:	41 e0       	ldi	r20, 0x01	; 1
    667a:	0e 94 b5 12 	call	0x256a	; 0x256a <DIO_vSetPinDir>

	RTOS_vStartSchedular();
    667e:	0e 94 75 07 	call	0xeea	; 0xeea <RTOS_vStartSchedular>
	RTOS_vInit();
    6682:	0e 94 7f 07 	call	0xefe	; 0xefe <RTOS_vInit>
	RTOS_vCreateTask(0, 1, TASK_1);
    6686:	2b e0       	ldi	r18, 0x0B	; 11
    6688:	33 e3       	ldi	r19, 0x33	; 51
    668a:	80 e0       	ldi	r24, 0x00	; 0
    668c:	61 e0       	ldi	r22, 0x01	; 1
    668e:	70 e0       	ldi	r23, 0x00	; 0
    6690:	a9 01       	movw	r20, r18
    6692:	0e 94 8f 07 	call	0xf1e	; 0xf1e <RTOS_vCreateTask>
	RTOS_vCreateTask(1, 2, TASK_2);
    6696:	26 e1       	ldi	r18, 0x16	; 22
    6698:	33 e3       	ldi	r19, 0x33	; 51
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	62 e0       	ldi	r22, 0x02	; 2
    669e:	70 e0       	ldi	r23, 0x00	; 0
    66a0:	a9 01       	movw	r20, r18
    66a2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <RTOS_vCreateTask>
	RTOS_vCreateTask(2, 3, TASK_3);
    66a6:	21 e2       	ldi	r18, 0x21	; 33
    66a8:	33 e3       	ldi	r19, 0x33	; 51
    66aa:	82 e0       	ldi	r24, 0x02	; 2
    66ac:	63 e0       	ldi	r22, 0x03	; 3
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	a9 01       	movw	r20, r18
    66b2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <RTOS_vCreateTask>
    66b6:	ff cf       	rjmp	.-2      	; 0x66b6 <main+0x5e>

000066b8 <mainICU>:
volatile u16 G_u16Cov = 0;
void ICU_HW();
void TIM1_OVF();

int mainICU()
{
    66b8:	ef 92       	push	r14
    66ba:	ff 92       	push	r15
    66bc:	0f 93       	push	r16
    66be:	1f 93       	push	r17
    66c0:	df 93       	push	r29
    66c2:	cf 93       	push	r28
    66c4:	cd b7       	in	r28, 0x3d	; 61
    66c6:	de b7       	in	r29, 0x3e	; 62
	/* INIT LCD */
	LCD_vInit();
    66c8:	0e 94 c3 29 	call	0x5386	; 0x5386 <LCD_vInit>
	LCD_vDisplayString("Start");
    66cc:	86 e6       	ldi	r24, 0x66	; 102
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>

	/* Enable Global Interrupt */
	GIE_vSetGlobalInterrupt();
    66d4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <GIE_vSetGlobalInterrupt>
	/* SWT PWM to 25 Duty Cycle This Sets OCR0 to 64 */
	TIMER_vPWMSignal(TIMER0, 35);
    66d8:	80 e0       	ldi	r24, 0x00	; 0
    66da:	40 e0       	ldi	r20, 0x00	; 0
    66dc:	50 e0       	ldi	r21, 0x00	; 0
    66de:	6c e0       	ldi	r22, 0x0C	; 12
    66e0:	72 e4       	ldi	r23, 0x42	; 66
    66e2:	0e 94 c2 0b 	call	0x1784	; 0x1784 <TIMER_vPWMSignal>
	/* Init Timer 0 */
	TIMER_vInit(TIMER0);
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	0e 94 c2 09 	call	0x1384	; 0x1384 <TIMER_vInit>
	/* ******************************* */

	/* Enanle ICU TIMER 1 */
	TIMER_vsetCallBackFunctionIcuTIMER1(&ICU_HW);
    66ec:	8c ee       	ldi	r24, 0xEC	; 236
    66ee:	93 e3       	ldi	r25, 0x33	; 51
    66f0:	0e 94 35 0c 	call	0x186a	; 0x186a <TIMER_vsetCallBackFunctionIcuTIMER1>
	TIMER_vsetCallBackFunctionOvfTIMER1(&TIM1_OVF);
    66f4:	81 e9       	ldi	r24, 0x91	; 145
    66f6:	94 e3       	ldi	r25, 0x34	; 52
    66f8:	0e 94 23 0c 	call	0x1846	; 0x1846 <TIMER_vsetCallBackFunctionOvfTIMER1>
	TIMER_vCongfigureICU();
    66fc:	0e 94 47 0c 	call	0x188e	; 0x188e <TIMER_vCongfigureICU>
	TIMER_vSetTriggeringICU(RISING);
    6700:	80 e0       	ldi	r24, 0x00	; 0
    6702:	0e 94 a7 0c 	call	0x194e	; 0x194e <TIMER_vSetTriggeringICU>

	while (1)
	{
		if (Flag == 1)
    6706:	80 91 22 02 	lds	r24, 0x0222
    670a:	81 30       	cpi	r24, 0x01	; 1
    670c:	e1 f7       	brne	.-8      	; 0x6706 <mainICU+0x4e>
		{
			DutyCycle = (TimeOn * 1.0 / PeriodTime) * 100;
    670e:	80 91 27 02 	lds	r24, 0x0227
    6712:	90 91 28 02 	lds	r25, 0x0228
    6716:	cc 01       	movw	r24, r24
    6718:	a0 e0       	ldi	r26, 0x00	; 0
    671a:	b0 e0       	ldi	r27, 0x00	; 0
    671c:	bc 01       	movw	r22, r24
    671e:	cd 01       	movw	r24, r26
    6720:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    6724:	7b 01       	movw	r14, r22
    6726:	8c 01       	movw	r16, r24
    6728:	80 91 23 02 	lds	r24, 0x0223
    672c:	90 91 24 02 	lds	r25, 0x0224
    6730:	cc 01       	movw	r24, r24
    6732:	a0 e0       	ldi	r26, 0x00	; 0
    6734:	b0 e0       	ldi	r27, 0x00	; 0
    6736:	bc 01       	movw	r22, r24
    6738:	cd 01       	movw	r24, r26
    673a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    673e:	9b 01       	movw	r18, r22
    6740:	ac 01       	movw	r20, r24
    6742:	c8 01       	movw	r24, r16
    6744:	b7 01       	movw	r22, r14
    6746:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    674a:	dc 01       	movw	r26, r24
    674c:	cb 01       	movw	r24, r22
    674e:	bc 01       	movw	r22, r24
    6750:	cd 01       	movw	r24, r26
    6752:	20 e0       	ldi	r18, 0x00	; 0
    6754:	30 e0       	ldi	r19, 0x00	; 0
    6756:	48 ec       	ldi	r20, 0xC8	; 200
    6758:	52 e4       	ldi	r21, 0x42	; 66
    675a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    675e:	dc 01       	movw	r26, r24
    6760:	cb 01       	movw	r24, r22
    6762:	bc 01       	movw	r22, r24
    6764:	cd 01       	movw	r24, r26
    6766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    676a:	dc 01       	movw	r26, r24
    676c:	cb 01       	movw	r24, r22
    676e:	90 93 26 02 	sts	0x0226, r25
    6772:	80 93 25 02 	sts	0x0225, r24
			LCD_vSetPostion(ROW0, COLUMN0);
    6776:	80 e0       	ldi	r24, 0x00	; 0
    6778:	60 e0       	ldi	r22, 0x00	; 0
    677a:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <LCD_vSetPostion>
			LCD_vDisplayString("TimePeriod:");
    677e:	8c e6       	ldi	r24, 0x6C	; 108
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
			LCD_vDisplayNumInteger(PeriodTime);
    6786:	80 91 23 02 	lds	r24, 0x0223
    678a:	90 91 24 02 	lds	r25, 0x0224
    678e:	cc 01       	movw	r24, r24
    6790:	a0 e0       	ldi	r26, 0x00	; 0
    6792:	b0 e0       	ldi	r27, 0x00	; 0
    6794:	bc 01       	movw	r22, r24
    6796:	cd 01       	movw	r24, r26
    6798:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <LCD_vDisplayNumInteger>
			LCD_vDisplayString("us");
    679c:	88 e7       	ldi	r24, 0x78	; 120
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
			LCD_vSetPostion(ROW1, COLUMN0);
    67a4:	81 e0       	ldi	r24, 0x01	; 1
    67a6:	60 e0       	ldi	r22, 0x00	; 0
    67a8:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <LCD_vSetPostion>
			LCD_vDisplayString("DutyCycle : ");
    67ac:	8b e7       	ldi	r24, 0x7B	; 123
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
			LCD_vDisplayNumInteger(DutyCycle);
    67b4:	80 91 25 02 	lds	r24, 0x0225
    67b8:	90 91 26 02 	lds	r25, 0x0226
    67bc:	cc 01       	movw	r24, r24
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	bc 01       	movw	r22, r24
    67c4:	cd 01       	movw	r24, r26
    67c6:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <LCD_vDisplayNumInteger>
			LCD_vDisplayString("%");
    67ca:	88 e8       	ldi	r24, 0x88	; 136
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	0e 94 bb 2c 	call	0x5976	; 0x5976 <LCD_vDisplayString>
			Flag = 0;
    67d2:	10 92 22 02 	sts	0x0222, r1
    67d6:	97 cf       	rjmp	.-210    	; 0x6706 <mainICU+0x4e>

000067d8 <ICU_HW>:
		}
	}
	return 0;
}
void ICU_HW(void)
{
    67d8:	df 93       	push	r29
    67da:	cf 93       	push	r28
    67dc:	cd b7       	in	r28, 0x3d	; 61
    67de:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	counter++;
    67e0:	80 91 2b 02 	lds	r24, 0x022B
    67e4:	8f 5f       	subi	r24, 0xFF	; 255
    67e6:	80 93 2b 02 	sts	0x022B, r24
	if (counter == 2)
    67ea:	80 91 2b 02 	lds	r24, 0x022B
    67ee:	82 30       	cpi	r24, 0x02	; 2
    67f0:	e1 f4       	brne	.+56     	; 0x682a <ICU_HW+0x52>
	{
		G_u32Counts_Read1 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    67f2:	0e 94 18 0c 	call	0x1830	; 0x1830 <TIMER_u16GetICU>
    67f6:	9c 01       	movw	r18, r24
    67f8:	40 e0       	ldi	r20, 0x00	; 0
    67fa:	50 e0       	ldi	r21, 0x00	; 0
    67fc:	80 91 29 02 	lds	r24, 0x0229
    6800:	90 91 2a 02 	lds	r25, 0x022A
    6804:	cc 01       	movw	r24, r24
    6806:	a0 e0       	ldi	r26, 0x00	; 0
    6808:	b0 e0       	ldi	r27, 0x00	; 0
    680a:	dc 01       	movw	r26, r24
    680c:	99 27       	eor	r25, r25
    680e:	88 27       	eor	r24, r24
    6810:	82 0f       	add	r24, r18
    6812:	93 1f       	adc	r25, r19
    6814:	a4 1f       	adc	r26, r20
    6816:	b5 1f       	adc	r27, r21
    6818:	80 93 16 02 	sts	0x0216, r24
    681c:	90 93 17 02 	sts	0x0217, r25
    6820:	a0 93 18 02 	sts	0x0218, r26
    6824:	b0 93 19 02 	sts	0x0219, r27
    6828:	79 c0       	rjmp	.+242    	; 0x691c <ICU_HW+0x144>
	}
	else if (counter == 3)
    682a:	80 91 2b 02 	lds	r24, 0x022B
    682e:	83 30       	cpi	r24, 0x03	; 3
    6830:	c1 f5       	brne	.+112    	; 0x68a2 <ICU_HW+0xca>
	{
		G_u32Counts_Read2 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    6832:	0e 94 18 0c 	call	0x1830	; 0x1830 <TIMER_u16GetICU>
    6836:	9c 01       	movw	r18, r24
    6838:	40 e0       	ldi	r20, 0x00	; 0
    683a:	50 e0       	ldi	r21, 0x00	; 0
    683c:	80 91 29 02 	lds	r24, 0x0229
    6840:	90 91 2a 02 	lds	r25, 0x022A
    6844:	cc 01       	movw	r24, r24
    6846:	a0 e0       	ldi	r26, 0x00	; 0
    6848:	b0 e0       	ldi	r27, 0x00	; 0
    684a:	dc 01       	movw	r26, r24
    684c:	99 27       	eor	r25, r25
    684e:	88 27       	eor	r24, r24
    6850:	82 0f       	add	r24, r18
    6852:	93 1f       	adc	r25, r19
    6854:	a4 1f       	adc	r26, r20
    6856:	b5 1f       	adc	r27, r21
    6858:	80 93 1a 02 	sts	0x021A, r24
    685c:	90 93 1b 02 	sts	0x021B, r25
    6860:	a0 93 1c 02 	sts	0x021C, r26
    6864:	b0 93 1d 02 	sts	0x021D, r27
		PeriodTime = G_u32Counts_Read2 - G_u32Counts_Read1;
    6868:	80 91 1a 02 	lds	r24, 0x021A
    686c:	90 91 1b 02 	lds	r25, 0x021B
    6870:	a0 91 1c 02 	lds	r26, 0x021C
    6874:	b0 91 1d 02 	lds	r27, 0x021D
    6878:	9c 01       	movw	r18, r24
    687a:	80 91 16 02 	lds	r24, 0x0216
    687e:	90 91 17 02 	lds	r25, 0x0217
    6882:	a0 91 18 02 	lds	r26, 0x0218
    6886:	b0 91 19 02 	lds	r27, 0x0219
    688a:	a9 01       	movw	r20, r18
    688c:	48 1b       	sub	r20, r24
    688e:	59 0b       	sbc	r21, r25
    6890:	ca 01       	movw	r24, r20
    6892:	90 93 24 02 	sts	0x0224, r25
    6896:	80 93 23 02 	sts	0x0223, r24
		/* SET TRTIGGER TO Falling EDGE */
		TIMER_vSetTriggeringICU(FALLING);
    689a:	81 e0       	ldi	r24, 0x01	; 1
    689c:	0e 94 a7 0c 	call	0x194e	; 0x194e <TIMER_vSetTriggeringICU>
    68a0:	3d c0       	rjmp	.+122    	; 0x691c <ICU_HW+0x144>
	}
	else if (counter == 4)
    68a2:	80 91 2b 02 	lds	r24, 0x022B
    68a6:	84 30       	cpi	r24, 0x04	; 4
    68a8:	c9 f5       	brne	.+114    	; 0x691c <ICU_HW+0x144>
	{
		G_u32Counts_Read3 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    68aa:	0e 94 18 0c 	call	0x1830	; 0x1830 <TIMER_u16GetICU>
    68ae:	9c 01       	movw	r18, r24
    68b0:	40 e0       	ldi	r20, 0x00	; 0
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	80 91 29 02 	lds	r24, 0x0229
    68b8:	90 91 2a 02 	lds	r25, 0x022A
    68bc:	cc 01       	movw	r24, r24
    68be:	a0 e0       	ldi	r26, 0x00	; 0
    68c0:	b0 e0       	ldi	r27, 0x00	; 0
    68c2:	dc 01       	movw	r26, r24
    68c4:	99 27       	eor	r25, r25
    68c6:	88 27       	eor	r24, r24
    68c8:	82 0f       	add	r24, r18
    68ca:	93 1f       	adc	r25, r19
    68cc:	a4 1f       	adc	r26, r20
    68ce:	b5 1f       	adc	r27, r21
    68d0:	80 93 1e 02 	sts	0x021E, r24
    68d4:	90 93 1f 02 	sts	0x021F, r25
    68d8:	a0 93 20 02 	sts	0x0220, r26
    68dc:	b0 93 21 02 	sts	0x0221, r27
		TimeOn = G_u32Counts_Read3 - G_u32Counts_Read2;
    68e0:	80 91 1e 02 	lds	r24, 0x021E
    68e4:	90 91 1f 02 	lds	r25, 0x021F
    68e8:	a0 91 20 02 	lds	r26, 0x0220
    68ec:	b0 91 21 02 	lds	r27, 0x0221
    68f0:	9c 01       	movw	r18, r24
    68f2:	80 91 1a 02 	lds	r24, 0x021A
    68f6:	90 91 1b 02 	lds	r25, 0x021B
    68fa:	a0 91 1c 02 	lds	r26, 0x021C
    68fe:	b0 91 1d 02 	lds	r27, 0x021D
    6902:	a9 01       	movw	r20, r18
    6904:	48 1b       	sub	r20, r24
    6906:	59 0b       	sbc	r21, r25
    6908:	ca 01       	movw	r24, r20
    690a:	90 93 28 02 	sts	0x0228, r25
    690e:	80 93 27 02 	sts	0x0227, r24
		TIMER_vDisableIntICU();
    6912:	0e 94 99 0c 	call	0x1932	; 0x1932 <TIMER_vDisableIntICU>
		Flag = 1;
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	80 93 22 02 	sts	0x0222, r24
	}
	else
	{
		// DO Nothing
	}
}
    691c:	cf 91       	pop	r28
    691e:	df 91       	pop	r29
    6920:	08 95       	ret

00006922 <TIM1_OVF>:
void TIM1_OVF()
{
    6922:	df 93       	push	r29
    6924:	cf 93       	push	r28
    6926:	cd b7       	in	r28, 0x3d	; 61
    6928:	de b7       	in	r29, 0x3e	; 62
	G_u16Cov++;
    692a:	80 91 29 02 	lds	r24, 0x0229
    692e:	90 91 2a 02 	lds	r25, 0x022A
    6932:	01 96       	adiw	r24, 0x01	; 1
    6934:	90 93 2a 02 	sts	0x022A, r25
    6938:	80 93 29 02 	sts	0x0229, r24
}
    693c:	cf 91       	pop	r28
    693e:	df 91       	pop	r29
    6940:	08 95       	ret

00006942 <__udivmodsi4>:
    6942:	a1 e2       	ldi	r26, 0x21	; 33
    6944:	1a 2e       	mov	r1, r26
    6946:	aa 1b       	sub	r26, r26
    6948:	bb 1b       	sub	r27, r27
    694a:	fd 01       	movw	r30, r26
    694c:	0d c0       	rjmp	.+26     	; 0x6968 <__udivmodsi4_ep>

0000694e <__udivmodsi4_loop>:
    694e:	aa 1f       	adc	r26, r26
    6950:	bb 1f       	adc	r27, r27
    6952:	ee 1f       	adc	r30, r30
    6954:	ff 1f       	adc	r31, r31
    6956:	a2 17       	cp	r26, r18
    6958:	b3 07       	cpc	r27, r19
    695a:	e4 07       	cpc	r30, r20
    695c:	f5 07       	cpc	r31, r21
    695e:	20 f0       	brcs	.+8      	; 0x6968 <__udivmodsi4_ep>
    6960:	a2 1b       	sub	r26, r18
    6962:	b3 0b       	sbc	r27, r19
    6964:	e4 0b       	sbc	r30, r20
    6966:	f5 0b       	sbc	r31, r21

00006968 <__udivmodsi4_ep>:
    6968:	66 1f       	adc	r22, r22
    696a:	77 1f       	adc	r23, r23
    696c:	88 1f       	adc	r24, r24
    696e:	99 1f       	adc	r25, r25
    6970:	1a 94       	dec	r1
    6972:	69 f7       	brne	.-38     	; 0x694e <__udivmodsi4_loop>
    6974:	60 95       	com	r22
    6976:	70 95       	com	r23
    6978:	80 95       	com	r24
    697a:	90 95       	com	r25
    697c:	9b 01       	movw	r18, r22
    697e:	ac 01       	movw	r20, r24
    6980:	bd 01       	movw	r22, r26
    6982:	cf 01       	movw	r24, r30
    6984:	08 95       	ret

00006986 <__prologue_saves__>:
    6986:	2f 92       	push	r2
    6988:	3f 92       	push	r3
    698a:	4f 92       	push	r4
    698c:	5f 92       	push	r5
    698e:	6f 92       	push	r6
    6990:	7f 92       	push	r7
    6992:	8f 92       	push	r8
    6994:	9f 92       	push	r9
    6996:	af 92       	push	r10
    6998:	bf 92       	push	r11
    699a:	cf 92       	push	r12
    699c:	df 92       	push	r13
    699e:	ef 92       	push	r14
    69a0:	ff 92       	push	r15
    69a2:	0f 93       	push	r16
    69a4:	1f 93       	push	r17
    69a6:	cf 93       	push	r28
    69a8:	df 93       	push	r29
    69aa:	cd b7       	in	r28, 0x3d	; 61
    69ac:	de b7       	in	r29, 0x3e	; 62
    69ae:	ca 1b       	sub	r28, r26
    69b0:	db 0b       	sbc	r29, r27
    69b2:	0f b6       	in	r0, 0x3f	; 63
    69b4:	f8 94       	cli
    69b6:	de bf       	out	0x3e, r29	; 62
    69b8:	0f be       	out	0x3f, r0	; 63
    69ba:	cd bf       	out	0x3d, r28	; 61
    69bc:	09 94       	ijmp

000069be <__epilogue_restores__>:
    69be:	2a 88       	ldd	r2, Y+18	; 0x12
    69c0:	39 88       	ldd	r3, Y+17	; 0x11
    69c2:	48 88       	ldd	r4, Y+16	; 0x10
    69c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    69c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    69c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    69ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    69cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    69ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    69d0:	b9 84       	ldd	r11, Y+9	; 0x09
    69d2:	c8 84       	ldd	r12, Y+8	; 0x08
    69d4:	df 80       	ldd	r13, Y+7	; 0x07
    69d6:	ee 80       	ldd	r14, Y+6	; 0x06
    69d8:	fd 80       	ldd	r15, Y+5	; 0x05
    69da:	0c 81       	ldd	r16, Y+4	; 0x04
    69dc:	1b 81       	ldd	r17, Y+3	; 0x03
    69de:	aa 81       	ldd	r26, Y+2	; 0x02
    69e0:	b9 81       	ldd	r27, Y+1	; 0x01
    69e2:	ce 0f       	add	r28, r30
    69e4:	d1 1d       	adc	r29, r1
    69e6:	0f b6       	in	r0, 0x3f	; 63
    69e8:	f8 94       	cli
    69ea:	de bf       	out	0x3e, r29	; 62
    69ec:	0f be       	out	0x3f, r0	; 63
    69ee:	cd bf       	out	0x3d, r28	; 61
    69f0:	ed 01       	movw	r28, r26
    69f2:	08 95       	ret

000069f4 <sprintf>:
    69f4:	ae e0       	ldi	r26, 0x0E	; 14
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	e0 e0       	ldi	r30, 0x00	; 0
    69fa:	f5 e3       	ldi	r31, 0x35	; 53
    69fc:	0c 94 d1 34 	jmp	0x69a2	; 0x69a2 <__prologue_saves__+0x1c>
    6a00:	0d 89       	ldd	r16, Y+21	; 0x15
    6a02:	1e 89       	ldd	r17, Y+22	; 0x16
    6a04:	86 e0       	ldi	r24, 0x06	; 6
    6a06:	8c 83       	std	Y+4, r24	; 0x04
    6a08:	1a 83       	std	Y+2, r17	; 0x02
    6a0a:	09 83       	std	Y+1, r16	; 0x01
    6a0c:	8f ef       	ldi	r24, 0xFF	; 255
    6a0e:	9f e7       	ldi	r25, 0x7F	; 127
    6a10:	9e 83       	std	Y+6, r25	; 0x06
    6a12:	8d 83       	std	Y+5, r24	; 0x05
    6a14:	9e 01       	movw	r18, r28
    6a16:	27 5e       	subi	r18, 0xE7	; 231
    6a18:	3f 4f       	sbci	r19, 0xFF	; 255
    6a1a:	ce 01       	movw	r24, r28
    6a1c:	01 96       	adiw	r24, 0x01	; 1
    6a1e:	6f 89       	ldd	r22, Y+23	; 0x17
    6a20:	78 8d       	ldd	r23, Y+24	; 0x18
    6a22:	a9 01       	movw	r20, r18
    6a24:	0e 94 3e 35 	call	0x6a7c	; 0x6a7c <vfprintf>
    6a28:	2f 81       	ldd	r18, Y+7	; 0x07
    6a2a:	38 85       	ldd	r19, Y+8	; 0x08
    6a2c:	02 0f       	add	r16, r18
    6a2e:	13 1f       	adc	r17, r19
    6a30:	f8 01       	movw	r30, r16
    6a32:	10 82       	st	Z, r1
    6a34:	2e 96       	adiw	r28, 0x0e	; 14
    6a36:	e4 e0       	ldi	r30, 0x04	; 4
    6a38:	0c 94 ed 34 	jmp	0x69da	; 0x69da <__epilogue_restores__+0x1c>

00006a3c <round>:
    6a3c:	cd d2       	rcall	.+1434   	; 0x6fd8 <__fp_splitA>
    6a3e:	e0 f0       	brcs	.+56     	; 0x6a78 <round+0x3c>
    6a40:	9e 37       	cpi	r25, 0x7E	; 126
    6a42:	d8 f0       	brcs	.+54     	; 0x6a7a <round+0x3e>
    6a44:	96 39       	cpi	r25, 0x96	; 150
    6a46:	b8 f4       	brcc	.+46     	; 0x6a76 <round+0x3a>
    6a48:	9e 38       	cpi	r25, 0x8E	; 142
    6a4a:	48 f4       	brcc	.+18     	; 0x6a5e <round+0x22>
    6a4c:	67 2f       	mov	r22, r23
    6a4e:	78 2f       	mov	r23, r24
    6a50:	88 27       	eor	r24, r24
    6a52:	98 5f       	subi	r25, 0xF8	; 248
    6a54:	f9 cf       	rjmp	.-14     	; 0x6a48 <round+0xc>
    6a56:	86 95       	lsr	r24
    6a58:	77 95       	ror	r23
    6a5a:	67 95       	ror	r22
    6a5c:	93 95       	inc	r25
    6a5e:	95 39       	cpi	r25, 0x95	; 149
    6a60:	d0 f3       	brcs	.-12     	; 0x6a56 <round+0x1a>
    6a62:	b6 2f       	mov	r27, r22
    6a64:	b1 70       	andi	r27, 0x01	; 1
    6a66:	6b 0f       	add	r22, r27
    6a68:	71 1d       	adc	r23, r1
    6a6a:	81 1d       	adc	r24, r1
    6a6c:	20 f4       	brcc	.+8      	; 0x6a76 <round+0x3a>
    6a6e:	87 95       	ror	r24
    6a70:	77 95       	ror	r23
    6a72:	67 95       	ror	r22
    6a74:	93 95       	inc	r25
    6a76:	7f c2       	rjmp	.+1278   	; 0x6f76 <__fp_mintl>
    6a78:	99 c2       	rjmp	.+1330   	; 0x6fac <__fp_mpack>
    6a7a:	c9 c2       	rjmp	.+1426   	; 0x700e <__fp_szero>

00006a7c <vfprintf>:
    6a7c:	ab e0       	ldi	r26, 0x0B	; 11
    6a7e:	b0 e0       	ldi	r27, 0x00	; 0
    6a80:	e4 e4       	ldi	r30, 0x44	; 68
    6a82:	f5 e3       	ldi	r31, 0x35	; 53
    6a84:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__prologue_saves__>
    6a88:	3c 01       	movw	r6, r24
    6a8a:	2b 01       	movw	r4, r22
    6a8c:	5a 01       	movw	r10, r20
    6a8e:	fc 01       	movw	r30, r24
    6a90:	17 82       	std	Z+7, r1	; 0x07
    6a92:	16 82       	std	Z+6, r1	; 0x06
    6a94:	83 81       	ldd	r24, Z+3	; 0x03
    6a96:	81 fd       	sbrc	r24, 1
    6a98:	03 c0       	rjmp	.+6      	; 0x6aa0 <vfprintf+0x24>
    6a9a:	6f ef       	ldi	r22, 0xFF	; 255
    6a9c:	7f ef       	ldi	r23, 0xFF	; 255
    6a9e:	c6 c1       	rjmp	.+908    	; 0x6e2c <vfprintf+0x3b0>
    6aa0:	9a e0       	ldi	r25, 0x0A	; 10
    6aa2:	89 2e       	mov	r8, r25
    6aa4:	1e 01       	movw	r2, r28
    6aa6:	08 94       	sec
    6aa8:	21 1c       	adc	r2, r1
    6aaa:	31 1c       	adc	r3, r1
    6aac:	f3 01       	movw	r30, r6
    6aae:	23 81       	ldd	r18, Z+3	; 0x03
    6ab0:	f2 01       	movw	r30, r4
    6ab2:	23 fd       	sbrc	r18, 3
    6ab4:	85 91       	lpm	r24, Z+
    6ab6:	23 ff       	sbrs	r18, 3
    6ab8:	81 91       	ld	r24, Z+
    6aba:	2f 01       	movw	r4, r30
    6abc:	88 23       	and	r24, r24
    6abe:	09 f4       	brne	.+2      	; 0x6ac2 <vfprintf+0x46>
    6ac0:	b2 c1       	rjmp	.+868    	; 0x6e26 <vfprintf+0x3aa>
    6ac2:	85 32       	cpi	r24, 0x25	; 37
    6ac4:	39 f4       	brne	.+14     	; 0x6ad4 <vfprintf+0x58>
    6ac6:	23 fd       	sbrc	r18, 3
    6ac8:	85 91       	lpm	r24, Z+
    6aca:	23 ff       	sbrs	r18, 3
    6acc:	81 91       	ld	r24, Z+
    6ace:	2f 01       	movw	r4, r30
    6ad0:	85 32       	cpi	r24, 0x25	; 37
    6ad2:	29 f4       	brne	.+10     	; 0x6ade <vfprintf+0x62>
    6ad4:	90 e0       	ldi	r25, 0x00	; 0
    6ad6:	b3 01       	movw	r22, r6
    6ad8:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6adc:	e7 cf       	rjmp	.-50     	; 0x6aac <vfprintf+0x30>
    6ade:	98 2f       	mov	r25, r24
    6ae0:	ff 24       	eor	r15, r15
    6ae2:	ee 24       	eor	r14, r14
    6ae4:	99 24       	eor	r9, r9
    6ae6:	ff e1       	ldi	r31, 0x1F	; 31
    6ae8:	ff 15       	cp	r31, r15
    6aea:	d0 f0       	brcs	.+52     	; 0x6b20 <vfprintf+0xa4>
    6aec:	9b 32       	cpi	r25, 0x2B	; 43
    6aee:	69 f0       	breq	.+26     	; 0x6b0a <vfprintf+0x8e>
    6af0:	9c 32       	cpi	r25, 0x2C	; 44
    6af2:	28 f4       	brcc	.+10     	; 0x6afe <vfprintf+0x82>
    6af4:	90 32       	cpi	r25, 0x20	; 32
    6af6:	59 f0       	breq	.+22     	; 0x6b0e <vfprintf+0x92>
    6af8:	93 32       	cpi	r25, 0x23	; 35
    6afa:	91 f4       	brne	.+36     	; 0x6b20 <vfprintf+0xa4>
    6afc:	0e c0       	rjmp	.+28     	; 0x6b1a <vfprintf+0x9e>
    6afe:	9d 32       	cpi	r25, 0x2D	; 45
    6b00:	49 f0       	breq	.+18     	; 0x6b14 <vfprintf+0x98>
    6b02:	90 33       	cpi	r25, 0x30	; 48
    6b04:	69 f4       	brne	.+26     	; 0x6b20 <vfprintf+0xa4>
    6b06:	41 e0       	ldi	r20, 0x01	; 1
    6b08:	24 c0       	rjmp	.+72     	; 0x6b52 <vfprintf+0xd6>
    6b0a:	52 e0       	ldi	r21, 0x02	; 2
    6b0c:	f5 2a       	or	r15, r21
    6b0e:	84 e0       	ldi	r24, 0x04	; 4
    6b10:	f8 2a       	or	r15, r24
    6b12:	28 c0       	rjmp	.+80     	; 0x6b64 <vfprintf+0xe8>
    6b14:	98 e0       	ldi	r25, 0x08	; 8
    6b16:	f9 2a       	or	r15, r25
    6b18:	25 c0       	rjmp	.+74     	; 0x6b64 <vfprintf+0xe8>
    6b1a:	e0 e1       	ldi	r30, 0x10	; 16
    6b1c:	fe 2a       	or	r15, r30
    6b1e:	22 c0       	rjmp	.+68     	; 0x6b64 <vfprintf+0xe8>
    6b20:	f7 fc       	sbrc	r15, 7
    6b22:	29 c0       	rjmp	.+82     	; 0x6b76 <vfprintf+0xfa>
    6b24:	89 2f       	mov	r24, r25
    6b26:	80 53       	subi	r24, 0x30	; 48
    6b28:	8a 30       	cpi	r24, 0x0A	; 10
    6b2a:	70 f4       	brcc	.+28     	; 0x6b48 <vfprintf+0xcc>
    6b2c:	f6 fe       	sbrs	r15, 6
    6b2e:	05 c0       	rjmp	.+10     	; 0x6b3a <vfprintf+0xbe>
    6b30:	98 9c       	mul	r9, r8
    6b32:	90 2c       	mov	r9, r0
    6b34:	11 24       	eor	r1, r1
    6b36:	98 0e       	add	r9, r24
    6b38:	15 c0       	rjmp	.+42     	; 0x6b64 <vfprintf+0xe8>
    6b3a:	e8 9c       	mul	r14, r8
    6b3c:	e0 2c       	mov	r14, r0
    6b3e:	11 24       	eor	r1, r1
    6b40:	e8 0e       	add	r14, r24
    6b42:	f0 e2       	ldi	r31, 0x20	; 32
    6b44:	ff 2a       	or	r15, r31
    6b46:	0e c0       	rjmp	.+28     	; 0x6b64 <vfprintf+0xe8>
    6b48:	9e 32       	cpi	r25, 0x2E	; 46
    6b4a:	29 f4       	brne	.+10     	; 0x6b56 <vfprintf+0xda>
    6b4c:	f6 fc       	sbrc	r15, 6
    6b4e:	6b c1       	rjmp	.+726    	; 0x6e26 <vfprintf+0x3aa>
    6b50:	40 e4       	ldi	r20, 0x40	; 64
    6b52:	f4 2a       	or	r15, r20
    6b54:	07 c0       	rjmp	.+14     	; 0x6b64 <vfprintf+0xe8>
    6b56:	9c 36       	cpi	r25, 0x6C	; 108
    6b58:	19 f4       	brne	.+6      	; 0x6b60 <vfprintf+0xe4>
    6b5a:	50 e8       	ldi	r21, 0x80	; 128
    6b5c:	f5 2a       	or	r15, r21
    6b5e:	02 c0       	rjmp	.+4      	; 0x6b64 <vfprintf+0xe8>
    6b60:	98 36       	cpi	r25, 0x68	; 104
    6b62:	49 f4       	brne	.+18     	; 0x6b76 <vfprintf+0xfa>
    6b64:	f2 01       	movw	r30, r4
    6b66:	23 fd       	sbrc	r18, 3
    6b68:	95 91       	lpm	r25, Z+
    6b6a:	23 ff       	sbrs	r18, 3
    6b6c:	91 91       	ld	r25, Z+
    6b6e:	2f 01       	movw	r4, r30
    6b70:	99 23       	and	r25, r25
    6b72:	09 f0       	breq	.+2      	; 0x6b76 <vfprintf+0xfa>
    6b74:	b8 cf       	rjmp	.-144    	; 0x6ae6 <vfprintf+0x6a>
    6b76:	89 2f       	mov	r24, r25
    6b78:	85 54       	subi	r24, 0x45	; 69
    6b7a:	83 30       	cpi	r24, 0x03	; 3
    6b7c:	18 f0       	brcs	.+6      	; 0x6b84 <vfprintf+0x108>
    6b7e:	80 52       	subi	r24, 0x20	; 32
    6b80:	83 30       	cpi	r24, 0x03	; 3
    6b82:	38 f4       	brcc	.+14     	; 0x6b92 <vfprintf+0x116>
    6b84:	44 e0       	ldi	r20, 0x04	; 4
    6b86:	50 e0       	ldi	r21, 0x00	; 0
    6b88:	a4 0e       	add	r10, r20
    6b8a:	b5 1e       	adc	r11, r21
    6b8c:	5f e3       	ldi	r21, 0x3F	; 63
    6b8e:	59 83       	std	Y+1, r21	; 0x01
    6b90:	0f c0       	rjmp	.+30     	; 0x6bb0 <vfprintf+0x134>
    6b92:	93 36       	cpi	r25, 0x63	; 99
    6b94:	31 f0       	breq	.+12     	; 0x6ba2 <vfprintf+0x126>
    6b96:	93 37       	cpi	r25, 0x73	; 115
    6b98:	79 f0       	breq	.+30     	; 0x6bb8 <vfprintf+0x13c>
    6b9a:	93 35       	cpi	r25, 0x53	; 83
    6b9c:	09 f0       	breq	.+2      	; 0x6ba0 <vfprintf+0x124>
    6b9e:	56 c0       	rjmp	.+172    	; 0x6c4c <vfprintf+0x1d0>
    6ba0:	20 c0       	rjmp	.+64     	; 0x6be2 <vfprintf+0x166>
    6ba2:	f5 01       	movw	r30, r10
    6ba4:	80 81       	ld	r24, Z
    6ba6:	89 83       	std	Y+1, r24	; 0x01
    6ba8:	42 e0       	ldi	r20, 0x02	; 2
    6baa:	50 e0       	ldi	r21, 0x00	; 0
    6bac:	a4 0e       	add	r10, r20
    6bae:	b5 1e       	adc	r11, r21
    6bb0:	61 01       	movw	r12, r2
    6bb2:	01 e0       	ldi	r16, 0x01	; 1
    6bb4:	10 e0       	ldi	r17, 0x00	; 0
    6bb6:	12 c0       	rjmp	.+36     	; 0x6bdc <vfprintf+0x160>
    6bb8:	f5 01       	movw	r30, r10
    6bba:	c0 80       	ld	r12, Z
    6bbc:	d1 80       	ldd	r13, Z+1	; 0x01
    6bbe:	f6 fc       	sbrc	r15, 6
    6bc0:	03 c0       	rjmp	.+6      	; 0x6bc8 <vfprintf+0x14c>
    6bc2:	6f ef       	ldi	r22, 0xFF	; 255
    6bc4:	7f ef       	ldi	r23, 0xFF	; 255
    6bc6:	02 c0       	rjmp	.+4      	; 0x6bcc <vfprintf+0x150>
    6bc8:	69 2d       	mov	r22, r9
    6bca:	70 e0       	ldi	r23, 0x00	; 0
    6bcc:	42 e0       	ldi	r20, 0x02	; 2
    6bce:	50 e0       	ldi	r21, 0x00	; 0
    6bd0:	a4 0e       	add	r10, r20
    6bd2:	b5 1e       	adc	r11, r21
    6bd4:	c6 01       	movw	r24, r12
    6bd6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <strnlen>
    6bda:	8c 01       	movw	r16, r24
    6bdc:	5f e7       	ldi	r21, 0x7F	; 127
    6bde:	f5 22       	and	r15, r21
    6be0:	14 c0       	rjmp	.+40     	; 0x6c0a <vfprintf+0x18e>
    6be2:	f5 01       	movw	r30, r10
    6be4:	c0 80       	ld	r12, Z
    6be6:	d1 80       	ldd	r13, Z+1	; 0x01
    6be8:	f6 fc       	sbrc	r15, 6
    6bea:	03 c0       	rjmp	.+6      	; 0x6bf2 <vfprintf+0x176>
    6bec:	6f ef       	ldi	r22, 0xFF	; 255
    6bee:	7f ef       	ldi	r23, 0xFF	; 255
    6bf0:	02 c0       	rjmp	.+4      	; 0x6bf6 <vfprintf+0x17a>
    6bf2:	69 2d       	mov	r22, r9
    6bf4:	70 e0       	ldi	r23, 0x00	; 0
    6bf6:	42 e0       	ldi	r20, 0x02	; 2
    6bf8:	50 e0       	ldi	r21, 0x00	; 0
    6bfa:	a4 0e       	add	r10, r20
    6bfc:	b5 1e       	adc	r11, r21
    6bfe:	c6 01       	movw	r24, r12
    6c00:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <strnlen_P>
    6c04:	8c 01       	movw	r16, r24
    6c06:	50 e8       	ldi	r21, 0x80	; 128
    6c08:	f5 2a       	or	r15, r21
    6c0a:	f3 fe       	sbrs	r15, 3
    6c0c:	07 c0       	rjmp	.+14     	; 0x6c1c <vfprintf+0x1a0>
    6c0e:	1a c0       	rjmp	.+52     	; 0x6c44 <vfprintf+0x1c8>
    6c10:	80 e2       	ldi	r24, 0x20	; 32
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	b3 01       	movw	r22, r6
    6c16:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6c1a:	ea 94       	dec	r14
    6c1c:	8e 2d       	mov	r24, r14
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	08 17       	cp	r16, r24
    6c22:	19 07       	cpc	r17, r25
    6c24:	a8 f3       	brcs	.-22     	; 0x6c10 <vfprintf+0x194>
    6c26:	0e c0       	rjmp	.+28     	; 0x6c44 <vfprintf+0x1c8>
    6c28:	f6 01       	movw	r30, r12
    6c2a:	f7 fc       	sbrc	r15, 7
    6c2c:	85 91       	lpm	r24, Z+
    6c2e:	f7 fe       	sbrs	r15, 7
    6c30:	81 91       	ld	r24, Z+
    6c32:	6f 01       	movw	r12, r30
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	b3 01       	movw	r22, r6
    6c38:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6c3c:	e1 10       	cpse	r14, r1
    6c3e:	ea 94       	dec	r14
    6c40:	01 50       	subi	r16, 0x01	; 1
    6c42:	10 40       	sbci	r17, 0x00	; 0
    6c44:	01 15       	cp	r16, r1
    6c46:	11 05       	cpc	r17, r1
    6c48:	79 f7       	brne	.-34     	; 0x6c28 <vfprintf+0x1ac>
    6c4a:	ea c0       	rjmp	.+468    	; 0x6e20 <vfprintf+0x3a4>
    6c4c:	94 36       	cpi	r25, 0x64	; 100
    6c4e:	11 f0       	breq	.+4      	; 0x6c54 <vfprintf+0x1d8>
    6c50:	99 36       	cpi	r25, 0x69	; 105
    6c52:	69 f5       	brne	.+90     	; 0x6cae <vfprintf+0x232>
    6c54:	f7 fe       	sbrs	r15, 7
    6c56:	08 c0       	rjmp	.+16     	; 0x6c68 <vfprintf+0x1ec>
    6c58:	f5 01       	movw	r30, r10
    6c5a:	20 81       	ld	r18, Z
    6c5c:	31 81       	ldd	r19, Z+1	; 0x01
    6c5e:	42 81       	ldd	r20, Z+2	; 0x02
    6c60:	53 81       	ldd	r21, Z+3	; 0x03
    6c62:	84 e0       	ldi	r24, 0x04	; 4
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	0a c0       	rjmp	.+20     	; 0x6c7c <vfprintf+0x200>
    6c68:	f5 01       	movw	r30, r10
    6c6a:	80 81       	ld	r24, Z
    6c6c:	91 81       	ldd	r25, Z+1	; 0x01
    6c6e:	9c 01       	movw	r18, r24
    6c70:	44 27       	eor	r20, r20
    6c72:	37 fd       	sbrc	r19, 7
    6c74:	40 95       	com	r20
    6c76:	54 2f       	mov	r21, r20
    6c78:	82 e0       	ldi	r24, 0x02	; 2
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	a8 0e       	add	r10, r24
    6c7e:	b9 1e       	adc	r11, r25
    6c80:	9f e6       	ldi	r25, 0x6F	; 111
    6c82:	f9 22       	and	r15, r25
    6c84:	57 ff       	sbrs	r21, 7
    6c86:	09 c0       	rjmp	.+18     	; 0x6c9a <vfprintf+0x21e>
    6c88:	50 95       	com	r21
    6c8a:	40 95       	com	r20
    6c8c:	30 95       	com	r19
    6c8e:	21 95       	neg	r18
    6c90:	3f 4f       	sbci	r19, 0xFF	; 255
    6c92:	4f 4f       	sbci	r20, 0xFF	; 255
    6c94:	5f 4f       	sbci	r21, 0xFF	; 255
    6c96:	e0 e8       	ldi	r30, 0x80	; 128
    6c98:	fe 2a       	or	r15, r30
    6c9a:	ca 01       	movw	r24, r20
    6c9c:	b9 01       	movw	r22, r18
    6c9e:	a1 01       	movw	r20, r2
    6ca0:	2a e0       	ldi	r18, 0x0A	; 10
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	0e 94 5d 37 	call	0x6eba	; 0x6eba <__ultoa_invert>
    6ca8:	d8 2e       	mov	r13, r24
    6caa:	d2 18       	sub	r13, r2
    6cac:	40 c0       	rjmp	.+128    	; 0x6d2e <vfprintf+0x2b2>
    6cae:	95 37       	cpi	r25, 0x75	; 117
    6cb0:	29 f4       	brne	.+10     	; 0x6cbc <vfprintf+0x240>
    6cb2:	1f 2d       	mov	r17, r15
    6cb4:	1f 7e       	andi	r17, 0xEF	; 239
    6cb6:	2a e0       	ldi	r18, 0x0A	; 10
    6cb8:	30 e0       	ldi	r19, 0x00	; 0
    6cba:	1d c0       	rjmp	.+58     	; 0x6cf6 <vfprintf+0x27a>
    6cbc:	1f 2d       	mov	r17, r15
    6cbe:	19 7f       	andi	r17, 0xF9	; 249
    6cc0:	9f 36       	cpi	r25, 0x6F	; 111
    6cc2:	61 f0       	breq	.+24     	; 0x6cdc <vfprintf+0x260>
    6cc4:	90 37       	cpi	r25, 0x70	; 112
    6cc6:	20 f4       	brcc	.+8      	; 0x6cd0 <vfprintf+0x254>
    6cc8:	98 35       	cpi	r25, 0x58	; 88
    6cca:	09 f0       	breq	.+2      	; 0x6cce <vfprintf+0x252>
    6ccc:	ac c0       	rjmp	.+344    	; 0x6e26 <vfprintf+0x3aa>
    6cce:	0f c0       	rjmp	.+30     	; 0x6cee <vfprintf+0x272>
    6cd0:	90 37       	cpi	r25, 0x70	; 112
    6cd2:	39 f0       	breq	.+14     	; 0x6ce2 <vfprintf+0x266>
    6cd4:	98 37       	cpi	r25, 0x78	; 120
    6cd6:	09 f0       	breq	.+2      	; 0x6cda <vfprintf+0x25e>
    6cd8:	a6 c0       	rjmp	.+332    	; 0x6e26 <vfprintf+0x3aa>
    6cda:	04 c0       	rjmp	.+8      	; 0x6ce4 <vfprintf+0x268>
    6cdc:	28 e0       	ldi	r18, 0x08	; 8
    6cde:	30 e0       	ldi	r19, 0x00	; 0
    6ce0:	0a c0       	rjmp	.+20     	; 0x6cf6 <vfprintf+0x27a>
    6ce2:	10 61       	ori	r17, 0x10	; 16
    6ce4:	14 fd       	sbrc	r17, 4
    6ce6:	14 60       	ori	r17, 0x04	; 4
    6ce8:	20 e1       	ldi	r18, 0x10	; 16
    6cea:	30 e0       	ldi	r19, 0x00	; 0
    6cec:	04 c0       	rjmp	.+8      	; 0x6cf6 <vfprintf+0x27a>
    6cee:	14 fd       	sbrc	r17, 4
    6cf0:	16 60       	ori	r17, 0x06	; 6
    6cf2:	20 e1       	ldi	r18, 0x10	; 16
    6cf4:	32 e0       	ldi	r19, 0x02	; 2
    6cf6:	17 ff       	sbrs	r17, 7
    6cf8:	08 c0       	rjmp	.+16     	; 0x6d0a <vfprintf+0x28e>
    6cfa:	f5 01       	movw	r30, r10
    6cfc:	60 81       	ld	r22, Z
    6cfe:	71 81       	ldd	r23, Z+1	; 0x01
    6d00:	82 81       	ldd	r24, Z+2	; 0x02
    6d02:	93 81       	ldd	r25, Z+3	; 0x03
    6d04:	44 e0       	ldi	r20, 0x04	; 4
    6d06:	50 e0       	ldi	r21, 0x00	; 0
    6d08:	08 c0       	rjmp	.+16     	; 0x6d1a <vfprintf+0x29e>
    6d0a:	f5 01       	movw	r30, r10
    6d0c:	80 81       	ld	r24, Z
    6d0e:	91 81       	ldd	r25, Z+1	; 0x01
    6d10:	bc 01       	movw	r22, r24
    6d12:	80 e0       	ldi	r24, 0x00	; 0
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	42 e0       	ldi	r20, 0x02	; 2
    6d18:	50 e0       	ldi	r21, 0x00	; 0
    6d1a:	a4 0e       	add	r10, r20
    6d1c:	b5 1e       	adc	r11, r21
    6d1e:	a1 01       	movw	r20, r2
    6d20:	0e 94 5d 37 	call	0x6eba	; 0x6eba <__ultoa_invert>
    6d24:	d8 2e       	mov	r13, r24
    6d26:	d2 18       	sub	r13, r2
    6d28:	8f e7       	ldi	r24, 0x7F	; 127
    6d2a:	f8 2e       	mov	r15, r24
    6d2c:	f1 22       	and	r15, r17
    6d2e:	f6 fe       	sbrs	r15, 6
    6d30:	0b c0       	rjmp	.+22     	; 0x6d48 <vfprintf+0x2cc>
    6d32:	5e ef       	ldi	r21, 0xFE	; 254
    6d34:	f5 22       	and	r15, r21
    6d36:	d9 14       	cp	r13, r9
    6d38:	38 f4       	brcc	.+14     	; 0x6d48 <vfprintf+0x2cc>
    6d3a:	f4 fe       	sbrs	r15, 4
    6d3c:	07 c0       	rjmp	.+14     	; 0x6d4c <vfprintf+0x2d0>
    6d3e:	f2 fc       	sbrc	r15, 2
    6d40:	05 c0       	rjmp	.+10     	; 0x6d4c <vfprintf+0x2d0>
    6d42:	8f ee       	ldi	r24, 0xEF	; 239
    6d44:	f8 22       	and	r15, r24
    6d46:	02 c0       	rjmp	.+4      	; 0x6d4c <vfprintf+0x2d0>
    6d48:	1d 2d       	mov	r17, r13
    6d4a:	01 c0       	rjmp	.+2      	; 0x6d4e <vfprintf+0x2d2>
    6d4c:	19 2d       	mov	r17, r9
    6d4e:	f4 fe       	sbrs	r15, 4
    6d50:	0d c0       	rjmp	.+26     	; 0x6d6c <vfprintf+0x2f0>
    6d52:	fe 01       	movw	r30, r28
    6d54:	ed 0d       	add	r30, r13
    6d56:	f1 1d       	adc	r31, r1
    6d58:	80 81       	ld	r24, Z
    6d5a:	80 33       	cpi	r24, 0x30	; 48
    6d5c:	19 f4       	brne	.+6      	; 0x6d64 <vfprintf+0x2e8>
    6d5e:	99 ee       	ldi	r25, 0xE9	; 233
    6d60:	f9 22       	and	r15, r25
    6d62:	08 c0       	rjmp	.+16     	; 0x6d74 <vfprintf+0x2f8>
    6d64:	1f 5f       	subi	r17, 0xFF	; 255
    6d66:	f2 fe       	sbrs	r15, 2
    6d68:	05 c0       	rjmp	.+10     	; 0x6d74 <vfprintf+0x2f8>
    6d6a:	03 c0       	rjmp	.+6      	; 0x6d72 <vfprintf+0x2f6>
    6d6c:	8f 2d       	mov	r24, r15
    6d6e:	86 78       	andi	r24, 0x86	; 134
    6d70:	09 f0       	breq	.+2      	; 0x6d74 <vfprintf+0x2f8>
    6d72:	1f 5f       	subi	r17, 0xFF	; 255
    6d74:	0f 2d       	mov	r16, r15
    6d76:	f3 fc       	sbrc	r15, 3
    6d78:	14 c0       	rjmp	.+40     	; 0x6da2 <vfprintf+0x326>
    6d7a:	f0 fe       	sbrs	r15, 0
    6d7c:	0f c0       	rjmp	.+30     	; 0x6d9c <vfprintf+0x320>
    6d7e:	1e 15       	cp	r17, r14
    6d80:	10 f0       	brcs	.+4      	; 0x6d86 <vfprintf+0x30a>
    6d82:	9d 2c       	mov	r9, r13
    6d84:	0b c0       	rjmp	.+22     	; 0x6d9c <vfprintf+0x320>
    6d86:	9d 2c       	mov	r9, r13
    6d88:	9e 0c       	add	r9, r14
    6d8a:	91 1a       	sub	r9, r17
    6d8c:	1e 2d       	mov	r17, r14
    6d8e:	06 c0       	rjmp	.+12     	; 0x6d9c <vfprintf+0x320>
    6d90:	80 e2       	ldi	r24, 0x20	; 32
    6d92:	90 e0       	ldi	r25, 0x00	; 0
    6d94:	b3 01       	movw	r22, r6
    6d96:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6d9a:	1f 5f       	subi	r17, 0xFF	; 255
    6d9c:	1e 15       	cp	r17, r14
    6d9e:	c0 f3       	brcs	.-16     	; 0x6d90 <vfprintf+0x314>
    6da0:	04 c0       	rjmp	.+8      	; 0x6daa <vfprintf+0x32e>
    6da2:	1e 15       	cp	r17, r14
    6da4:	10 f4       	brcc	.+4      	; 0x6daa <vfprintf+0x32e>
    6da6:	e1 1a       	sub	r14, r17
    6da8:	01 c0       	rjmp	.+2      	; 0x6dac <vfprintf+0x330>
    6daa:	ee 24       	eor	r14, r14
    6dac:	04 ff       	sbrs	r16, 4
    6dae:	0f c0       	rjmp	.+30     	; 0x6dce <vfprintf+0x352>
    6db0:	80 e3       	ldi	r24, 0x30	; 48
    6db2:	90 e0       	ldi	r25, 0x00	; 0
    6db4:	b3 01       	movw	r22, r6
    6db6:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6dba:	02 ff       	sbrs	r16, 2
    6dbc:	1d c0       	rjmp	.+58     	; 0x6df8 <vfprintf+0x37c>
    6dbe:	01 fd       	sbrc	r16, 1
    6dc0:	03 c0       	rjmp	.+6      	; 0x6dc8 <vfprintf+0x34c>
    6dc2:	88 e7       	ldi	r24, 0x78	; 120
    6dc4:	90 e0       	ldi	r25, 0x00	; 0
    6dc6:	0e c0       	rjmp	.+28     	; 0x6de4 <vfprintf+0x368>
    6dc8:	88 e5       	ldi	r24, 0x58	; 88
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	0b c0       	rjmp	.+22     	; 0x6de4 <vfprintf+0x368>
    6dce:	80 2f       	mov	r24, r16
    6dd0:	86 78       	andi	r24, 0x86	; 134
    6dd2:	91 f0       	breq	.+36     	; 0x6df8 <vfprintf+0x37c>
    6dd4:	01 ff       	sbrs	r16, 1
    6dd6:	02 c0       	rjmp	.+4      	; 0x6ddc <vfprintf+0x360>
    6dd8:	8b e2       	ldi	r24, 0x2B	; 43
    6dda:	01 c0       	rjmp	.+2      	; 0x6dde <vfprintf+0x362>
    6ddc:	80 e2       	ldi	r24, 0x20	; 32
    6dde:	f7 fc       	sbrc	r15, 7
    6de0:	8d e2       	ldi	r24, 0x2D	; 45
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	b3 01       	movw	r22, r6
    6de6:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6dea:	06 c0       	rjmp	.+12     	; 0x6df8 <vfprintf+0x37c>
    6dec:	80 e3       	ldi	r24, 0x30	; 48
    6dee:	90 e0       	ldi	r25, 0x00	; 0
    6df0:	b3 01       	movw	r22, r6
    6df2:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6df6:	9a 94       	dec	r9
    6df8:	d9 14       	cp	r13, r9
    6dfa:	c0 f3       	brcs	.-16     	; 0x6dec <vfprintf+0x370>
    6dfc:	da 94       	dec	r13
    6dfe:	f1 01       	movw	r30, r2
    6e00:	ed 0d       	add	r30, r13
    6e02:	f1 1d       	adc	r31, r1
    6e04:	80 81       	ld	r24, Z
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	b3 01       	movw	r22, r6
    6e0a:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6e0e:	dd 20       	and	r13, r13
    6e10:	a9 f7       	brne	.-22     	; 0x6dfc <vfprintf+0x380>
    6e12:	06 c0       	rjmp	.+12     	; 0x6e20 <vfprintf+0x3a4>
    6e14:	80 e2       	ldi	r24, 0x20	; 32
    6e16:	90 e0       	ldi	r25, 0x00	; 0
    6e18:	b3 01       	movw	r22, r6
    6e1a:	0e 94 31 37 	call	0x6e62	; 0x6e62 <fputc>
    6e1e:	ea 94       	dec	r14
    6e20:	ee 20       	and	r14, r14
    6e22:	c1 f7       	brne	.-16     	; 0x6e14 <vfprintf+0x398>
    6e24:	43 ce       	rjmp	.-890    	; 0x6aac <vfprintf+0x30>
    6e26:	f3 01       	movw	r30, r6
    6e28:	66 81       	ldd	r22, Z+6	; 0x06
    6e2a:	77 81       	ldd	r23, Z+7	; 0x07
    6e2c:	cb 01       	movw	r24, r22
    6e2e:	2b 96       	adiw	r28, 0x0b	; 11
    6e30:	e2 e1       	ldi	r30, 0x12	; 18
    6e32:	0c 94 df 34 	jmp	0x69be	; 0x69be <__epilogue_restores__>

00006e36 <strnlen_P>:
    6e36:	fc 01       	movw	r30, r24
    6e38:	05 90       	lpm	r0, Z+
    6e3a:	61 50       	subi	r22, 0x01	; 1
    6e3c:	70 40       	sbci	r23, 0x00	; 0
    6e3e:	01 10       	cpse	r0, r1
    6e40:	d8 f7       	brcc	.-10     	; 0x6e38 <strnlen_P+0x2>
    6e42:	80 95       	com	r24
    6e44:	90 95       	com	r25
    6e46:	8e 0f       	add	r24, r30
    6e48:	9f 1f       	adc	r25, r31
    6e4a:	08 95       	ret

00006e4c <strnlen>:
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	61 50       	subi	r22, 0x01	; 1
    6e50:	70 40       	sbci	r23, 0x00	; 0
    6e52:	01 90       	ld	r0, Z+
    6e54:	01 10       	cpse	r0, r1
    6e56:	d8 f7       	brcc	.-10     	; 0x6e4e <strnlen+0x2>
    6e58:	80 95       	com	r24
    6e5a:	90 95       	com	r25
    6e5c:	8e 0f       	add	r24, r30
    6e5e:	9f 1f       	adc	r25, r31
    6e60:	08 95       	ret

00006e62 <fputc>:
    6e62:	0f 93       	push	r16
    6e64:	1f 93       	push	r17
    6e66:	cf 93       	push	r28
    6e68:	df 93       	push	r29
    6e6a:	8c 01       	movw	r16, r24
    6e6c:	eb 01       	movw	r28, r22
    6e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    6e70:	81 ff       	sbrs	r24, 1
    6e72:	1b c0       	rjmp	.+54     	; 0x6eaa <fputc+0x48>
    6e74:	82 ff       	sbrs	r24, 2
    6e76:	0d c0       	rjmp	.+26     	; 0x6e92 <fputc+0x30>
    6e78:	2e 81       	ldd	r18, Y+6	; 0x06
    6e7a:	3f 81       	ldd	r19, Y+7	; 0x07
    6e7c:	8c 81       	ldd	r24, Y+4	; 0x04
    6e7e:	9d 81       	ldd	r25, Y+5	; 0x05
    6e80:	28 17       	cp	r18, r24
    6e82:	39 07       	cpc	r19, r25
    6e84:	64 f4       	brge	.+24     	; 0x6e9e <fputc+0x3c>
    6e86:	e8 81       	ld	r30, Y
    6e88:	f9 81       	ldd	r31, Y+1	; 0x01
    6e8a:	01 93       	st	Z+, r16
    6e8c:	f9 83       	std	Y+1, r31	; 0x01
    6e8e:	e8 83       	st	Y, r30
    6e90:	06 c0       	rjmp	.+12     	; 0x6e9e <fputc+0x3c>
    6e92:	e8 85       	ldd	r30, Y+8	; 0x08
    6e94:	f9 85       	ldd	r31, Y+9	; 0x09
    6e96:	80 2f       	mov	r24, r16
    6e98:	09 95       	icall
    6e9a:	89 2b       	or	r24, r25
    6e9c:	31 f4       	brne	.+12     	; 0x6eaa <fputc+0x48>
    6e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    6ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    6ea2:	01 96       	adiw	r24, 0x01	; 1
    6ea4:	9f 83       	std	Y+7, r25	; 0x07
    6ea6:	8e 83       	std	Y+6, r24	; 0x06
    6ea8:	02 c0       	rjmp	.+4      	; 0x6eae <fputc+0x4c>
    6eaa:	0f ef       	ldi	r16, 0xFF	; 255
    6eac:	1f ef       	ldi	r17, 0xFF	; 255
    6eae:	c8 01       	movw	r24, r16
    6eb0:	df 91       	pop	r29
    6eb2:	cf 91       	pop	r28
    6eb4:	1f 91       	pop	r17
    6eb6:	0f 91       	pop	r16
    6eb8:	08 95       	ret

00006eba <__ultoa_invert>:
    6eba:	fa 01       	movw	r30, r20
    6ebc:	aa 27       	eor	r26, r26
    6ebe:	28 30       	cpi	r18, 0x08	; 8
    6ec0:	51 f1       	breq	.+84     	; 0x6f16 <__ultoa_invert+0x5c>
    6ec2:	20 31       	cpi	r18, 0x10	; 16
    6ec4:	81 f1       	breq	.+96     	; 0x6f26 <__ultoa_invert+0x6c>
    6ec6:	e8 94       	clt
    6ec8:	6f 93       	push	r22
    6eca:	6e 7f       	andi	r22, 0xFE	; 254
    6ecc:	6e 5f       	subi	r22, 0xFE	; 254
    6ece:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed4:	af 4f       	sbci	r26, 0xFF	; 255
    6ed6:	b1 e0       	ldi	r27, 0x01	; 1
    6ed8:	3e d0       	rcall	.+124    	; 0x6f56 <__ultoa_invert+0x9c>
    6eda:	b4 e0       	ldi	r27, 0x04	; 4
    6edc:	3c d0       	rcall	.+120    	; 0x6f56 <__ultoa_invert+0x9c>
    6ede:	67 0f       	add	r22, r23
    6ee0:	78 1f       	adc	r23, r24
    6ee2:	89 1f       	adc	r24, r25
    6ee4:	9a 1f       	adc	r25, r26
    6ee6:	a1 1d       	adc	r26, r1
    6ee8:	68 0f       	add	r22, r24
    6eea:	79 1f       	adc	r23, r25
    6eec:	8a 1f       	adc	r24, r26
    6eee:	91 1d       	adc	r25, r1
    6ef0:	a1 1d       	adc	r26, r1
    6ef2:	6a 0f       	add	r22, r26
    6ef4:	71 1d       	adc	r23, r1
    6ef6:	81 1d       	adc	r24, r1
    6ef8:	91 1d       	adc	r25, r1
    6efa:	a1 1d       	adc	r26, r1
    6efc:	20 d0       	rcall	.+64     	; 0x6f3e <__ultoa_invert+0x84>
    6efe:	09 f4       	brne	.+2      	; 0x6f02 <__ultoa_invert+0x48>
    6f00:	68 94       	set
    6f02:	3f 91       	pop	r19
    6f04:	2a e0       	ldi	r18, 0x0A	; 10
    6f06:	26 9f       	mul	r18, r22
    6f08:	11 24       	eor	r1, r1
    6f0a:	30 19       	sub	r19, r0
    6f0c:	30 5d       	subi	r19, 0xD0	; 208
    6f0e:	31 93       	st	Z+, r19
    6f10:	de f6       	brtc	.-74     	; 0x6ec8 <__ultoa_invert+0xe>
    6f12:	cf 01       	movw	r24, r30
    6f14:	08 95       	ret
    6f16:	46 2f       	mov	r20, r22
    6f18:	47 70       	andi	r20, 0x07	; 7
    6f1a:	40 5d       	subi	r20, 0xD0	; 208
    6f1c:	41 93       	st	Z+, r20
    6f1e:	b3 e0       	ldi	r27, 0x03	; 3
    6f20:	0f d0       	rcall	.+30     	; 0x6f40 <__ultoa_invert+0x86>
    6f22:	c9 f7       	brne	.-14     	; 0x6f16 <__ultoa_invert+0x5c>
    6f24:	f6 cf       	rjmp	.-20     	; 0x6f12 <__ultoa_invert+0x58>
    6f26:	46 2f       	mov	r20, r22
    6f28:	4f 70       	andi	r20, 0x0F	; 15
    6f2a:	40 5d       	subi	r20, 0xD0	; 208
    6f2c:	4a 33       	cpi	r20, 0x3A	; 58
    6f2e:	18 f0       	brcs	.+6      	; 0x6f36 <__ultoa_invert+0x7c>
    6f30:	49 5d       	subi	r20, 0xD9	; 217
    6f32:	31 fd       	sbrc	r19, 1
    6f34:	40 52       	subi	r20, 0x20	; 32
    6f36:	41 93       	st	Z+, r20
    6f38:	02 d0       	rcall	.+4      	; 0x6f3e <__ultoa_invert+0x84>
    6f3a:	a9 f7       	brne	.-22     	; 0x6f26 <__ultoa_invert+0x6c>
    6f3c:	ea cf       	rjmp	.-44     	; 0x6f12 <__ultoa_invert+0x58>
    6f3e:	b4 e0       	ldi	r27, 0x04	; 4
    6f40:	a6 95       	lsr	r26
    6f42:	97 95       	ror	r25
    6f44:	87 95       	ror	r24
    6f46:	77 95       	ror	r23
    6f48:	67 95       	ror	r22
    6f4a:	ba 95       	dec	r27
    6f4c:	c9 f7       	brne	.-14     	; 0x6f40 <__ultoa_invert+0x86>
    6f4e:	00 97       	sbiw	r24, 0x00	; 0
    6f50:	61 05       	cpc	r22, r1
    6f52:	71 05       	cpc	r23, r1
    6f54:	08 95       	ret
    6f56:	9b 01       	movw	r18, r22
    6f58:	ac 01       	movw	r20, r24
    6f5a:	0a 2e       	mov	r0, r26
    6f5c:	06 94       	lsr	r0
    6f5e:	57 95       	ror	r21
    6f60:	47 95       	ror	r20
    6f62:	37 95       	ror	r19
    6f64:	27 95       	ror	r18
    6f66:	ba 95       	dec	r27
    6f68:	c9 f7       	brne	.-14     	; 0x6f5c <__ultoa_invert+0xa2>
    6f6a:	62 0f       	add	r22, r18
    6f6c:	73 1f       	adc	r23, r19
    6f6e:	84 1f       	adc	r24, r20
    6f70:	95 1f       	adc	r25, r21
    6f72:	a0 1d       	adc	r26, r0
    6f74:	08 95       	ret

00006f76 <__fp_mintl>:
    6f76:	88 23       	and	r24, r24
    6f78:	71 f4       	brne	.+28     	; 0x6f96 <__fp_mintl+0x20>
    6f7a:	77 23       	and	r23, r23
    6f7c:	21 f0       	breq	.+8      	; 0x6f86 <__fp_mintl+0x10>
    6f7e:	98 50       	subi	r25, 0x08	; 8
    6f80:	87 2b       	or	r24, r23
    6f82:	76 2f       	mov	r23, r22
    6f84:	07 c0       	rjmp	.+14     	; 0x6f94 <__fp_mintl+0x1e>
    6f86:	66 23       	and	r22, r22
    6f88:	11 f4       	brne	.+4      	; 0x6f8e <__fp_mintl+0x18>
    6f8a:	99 27       	eor	r25, r25
    6f8c:	0d c0       	rjmp	.+26     	; 0x6fa8 <__fp_mintl+0x32>
    6f8e:	90 51       	subi	r25, 0x10	; 16
    6f90:	86 2b       	or	r24, r22
    6f92:	70 e0       	ldi	r23, 0x00	; 0
    6f94:	60 e0       	ldi	r22, 0x00	; 0
    6f96:	2a f0       	brmi	.+10     	; 0x6fa2 <__fp_mintl+0x2c>
    6f98:	9a 95       	dec	r25
    6f9a:	66 0f       	add	r22, r22
    6f9c:	77 1f       	adc	r23, r23
    6f9e:	88 1f       	adc	r24, r24
    6fa0:	da f7       	brpl	.-10     	; 0x6f98 <__fp_mintl+0x22>
    6fa2:	88 0f       	add	r24, r24
    6fa4:	96 95       	lsr	r25
    6fa6:	87 95       	ror	r24
    6fa8:	97 f9       	bld	r25, 7
    6faa:	08 95       	ret

00006fac <__fp_mpack>:
    6fac:	9f 3f       	cpi	r25, 0xFF	; 255
    6fae:	31 f0       	breq	.+12     	; 0x6fbc <__fp_mpack_finite+0xc>

00006fb0 <__fp_mpack_finite>:
    6fb0:	91 50       	subi	r25, 0x01	; 1
    6fb2:	20 f4       	brcc	.+8      	; 0x6fbc <__fp_mpack_finite+0xc>
    6fb4:	87 95       	ror	r24
    6fb6:	77 95       	ror	r23
    6fb8:	67 95       	ror	r22
    6fba:	b7 95       	ror	r27
    6fbc:	88 0f       	add	r24, r24
    6fbe:	91 1d       	adc	r25, r1
    6fc0:	96 95       	lsr	r25
    6fc2:	87 95       	ror	r24
    6fc4:	97 f9       	bld	r25, 7
    6fc6:	08 95       	ret

00006fc8 <__fp_split3>:
    6fc8:	57 fd       	sbrc	r21, 7
    6fca:	90 58       	subi	r25, 0x80	; 128
    6fcc:	44 0f       	add	r20, r20
    6fce:	55 1f       	adc	r21, r21
    6fd0:	59 f0       	breq	.+22     	; 0x6fe8 <__fp_splitA+0x10>
    6fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    6fd4:	71 f0       	breq	.+28     	; 0x6ff2 <__fp_splitA+0x1a>
    6fd6:	47 95       	ror	r20

00006fd8 <__fp_splitA>:
    6fd8:	88 0f       	add	r24, r24
    6fda:	97 fb       	bst	r25, 7
    6fdc:	99 1f       	adc	r25, r25
    6fde:	61 f0       	breq	.+24     	; 0x6ff8 <__fp_splitA+0x20>
    6fe0:	9f 3f       	cpi	r25, 0xFF	; 255
    6fe2:	79 f0       	breq	.+30     	; 0x7002 <__fp_splitA+0x2a>
    6fe4:	87 95       	ror	r24
    6fe6:	08 95       	ret
    6fe8:	12 16       	cp	r1, r18
    6fea:	13 06       	cpc	r1, r19
    6fec:	14 06       	cpc	r1, r20
    6fee:	55 1f       	adc	r21, r21
    6ff0:	f2 cf       	rjmp	.-28     	; 0x6fd6 <__fp_split3+0xe>
    6ff2:	46 95       	lsr	r20
    6ff4:	f1 df       	rcall	.-30     	; 0x6fd8 <__fp_splitA>
    6ff6:	08 c0       	rjmp	.+16     	; 0x7008 <__fp_splitA+0x30>
    6ff8:	16 16       	cp	r1, r22
    6ffa:	17 06       	cpc	r1, r23
    6ffc:	18 06       	cpc	r1, r24
    6ffe:	99 1f       	adc	r25, r25
    7000:	f1 cf       	rjmp	.-30     	; 0x6fe4 <__fp_splitA+0xc>
    7002:	86 95       	lsr	r24
    7004:	71 05       	cpc	r23, r1
    7006:	61 05       	cpc	r22, r1
    7008:	08 94       	sec
    700a:	08 95       	ret

0000700c <__fp_zero>:
    700c:	e8 94       	clt

0000700e <__fp_szero>:
    700e:	bb 27       	eor	r27, r27
    7010:	66 27       	eor	r22, r22
    7012:	77 27       	eor	r23, r23
    7014:	cb 01       	movw	r24, r22
    7016:	97 f9       	bld	r25, 7
    7018:	08 95       	ret

0000701a <_exit>:
    701a:	f8 94       	cli

0000701c <__stop_program>:
    701c:	ff cf       	rjmp	.-2      	; 0x701c <__stop_program>
