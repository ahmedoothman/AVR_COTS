
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017e  00800060  000068e6  0000697a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  008001de  008001de  00006af8  2**0
                  ALLOC
  3 .stab         00006c54  00000000  00000000  00006af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002643  00000000  00000000  0000d74c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00013c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00014f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00015130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00015437  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015e51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_1>
       8:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_2>
       c:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_3>
      10:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <__vector_4>
      14:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__vector_5>
      18:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_9>
      28:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_10>
      2c:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_11>
      30:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_12>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_13>
      38:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_14>
      3c:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__vector_15>
      40:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f8 e6       	ldi	r31, 0x68	; 104
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <main>
      8a:	0c 94 71 34 	jmp	0x68e2	; 0x68e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 31 	jmp	0x624e	; 0x624e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 31 	jmp	0x6286	; 0x6286 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 31 	jmp	0x624e	; 0x624e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 31 	jmp	0x6286	; 0x6286 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 30 31 	jmp	0x6260	; 0x6260 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 37 31 	jmp	0x626e	; 0x626e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 53 31 	jmp	0x62a6	; 0x62a6 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 56       	subi	r30, 0x6E	; 110
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_vEnable>:
#include "WDT_int.h"
#include "WDT_cfg.h"
#include "WDT_pri.h"

void WDT_vEnable(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(WDTCR, WDE);
     ef2:	a1 e4       	ldi	r26, 0x41	; 65
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e1 e4       	ldi	r30, 0x41	; 65
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <WDT_vDisable>:
void WDT_vDisable(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
    /* In the same cycle WDE = 1 WDTDFE = 1 */
    WDTCR = 0b00011000;
     f0e:	e1 e4       	ldi	r30, 0x41	; 65
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	88 e1       	ldi	r24, 0x18	; 24
     f14:	80 83       	st	Z, r24
    /* Within the next four cycles */
    WDTCR = 0;
     f16:	e1 e4       	ldi	r30, 0x41	; 65
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	10 82       	st	Z, r1
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <WDT_vSetSleep>:
void WDT_vSetSleep(u8 Copy_SleepTime)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	89 83       	std	Y+1, r24	; 0x01
    WDTCR &= 0b11111000;
     f2e:	a1 e4       	ldi	r26, 0x41	; 65
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e1 e4       	ldi	r30, 0x41	; 65
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 7f       	andi	r24, 0xF8	; 248
     f3a:	8c 93       	st	X, r24
    WDTCR |= Copy_SleepTime;
     f3c:	a1 e4       	ldi	r26, 0x41	; 65
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e1 e4       	ldi	r30, 0x41	; 65
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	90 81       	ld	r25, Z
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	89 2b       	or	r24, r25
     f4a:	8c 93       	st	X, r24
}
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <UART_vInit>:
#include <avr/delay.h>

FUNC_PTR_Iu8_OV G_PTR_FUNC_RX;
static u8 G_u8DataSend;
void UART_vInit()
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
    /* Select The Baud Rate */
    UBRRL = UBBR_VALUE;
     f5c:	e9 e2       	ldi	r30, 0x29	; 41
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	83 e3       	ldi	r24, 0x33	; 51
     f62:	80 83       	st	Z, r24
    UBRRH = UBBR_VALUE >> 8;
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1

    /* Enable Writing to UCSRC By Setting URSEL IN Each write in the Register*/
    /* Disable Parity */
    UCSRC = (UCSRC & PARITY_MASK) | PARITY_MODE << 4 | (1 << URSEL);
     f6a:	a0 e4       	ldi	r26, 0x40	; 64
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e0 e4       	ldi	r30, 0x40	; 64
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8f 74       	andi	r24, 0x4F	; 79
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	8c 93       	st	X, r24
    /* Select 1 Stop Bit */
    UCSRC = (UCSRC & STOP_BIT_MASK) | STOP_BIT_MODE << 3 | (1 << URSEL);
     f7a:	a0 e4       	ldi	r26, 0x40	; 64
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e0 e4       	ldi	r30, 0x40	; 64
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	87 77       	andi	r24, 0x77	; 119
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	8c 93       	st	X, r24
    /* Set Data Format 8 bit */
    UCSRC = (UCSRC & FORMAT_MODE_MASK_UCSRC) | DATA_FORMAT_UCSRC << 1 | (1 << URSEL);
     f8a:	a0 e4       	ldi	r26, 0x40	; 64
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e4       	ldi	r30, 0x40	; 64
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	86 68       	ori	r24, 0x86	; 134
     f96:	8c 93       	st	X, r24
    UCSRB = (UCSRB & FORMAT_MODE_MASK_UCSRB) | DATA_FORMAT_UCSRB << 2;
     f98:	aa e2       	ldi	r26, 0x2A	; 42
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e2       	ldi	r30, 0x2A	; 42
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
    /* Set Async Sync Mode */
    // UCSRC = (UCSRC & ASYNC_SYNC_MASK) | ASYNC_SYNC_MODE << 6 | (1 << URSEL);
    /* Set RX Pin as input PORTD PIN0*/
    DIO_vSetPinDir(PORTD_ID, PIN0_ID, DIR_INPUT);
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* Set TX Pin as Output PORTD PIN1*/
    DIO_vSetPinDir(PORTD_ID, PIN1_ID, DIR_OUTPUT);
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	61 e0       	ldi	r22, 0x01	; 1
     fb4:	41 e0       	ldi	r20, 0x01	; 1
     fb6:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>

    /* Enable Transmitter & Receiver*/
    SET_BIT(UCSRB, RXEN);
     fba:	aa e2       	ldi	r26, 0x2A	; 42
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ea e2       	ldi	r30, 0x2A	; 42
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 61       	ori	r24, 0x10	; 16
     fc6:	8c 93       	st	X, r24
    SET_BIT(UCSRB, TXEN);
     fc8:	aa e2       	ldi	r26, 0x2A	; 42
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea e2       	ldi	r30, 0x2A	; 42
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	88 60       	ori	r24, 0x08	; 8
     fd4:	8c 93       	st	X, r24

    /* at the same clk cycle */
    // UCSRB |= (1 << RXEN) | (1 << TXEN);
    // UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
}
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <UART_vSendData>:
void UART_vSendData(u8 A_u8Data)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	89 83       	std	Y+1, r24	; 0x01
    /* Wait For Empty Transmit Buffer */
    while (!(UCSRA & (1 << UDRE)))
     fe8:	eb e2       	ldi	r30, 0x2B	; 43
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	80 72       	andi	r24, 0x20	; 32
     ff4:	90 70       	andi	r25, 0x00	; 0
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	b9 f3       	breq	.-18     	; 0xfe8 <UART_vSendData+0xc>
    {
        // wait
    }
    UDR = A_u8Data;
     ffa:	ec e2       	ldi	r30, 0x2C	; 44
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	80 83       	st	Z, r24
}
    1002:	0f 90       	pop	r0
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <UART_vSendDataAsync>:
void UART_vSendDataAsync(u8 A_u8Data)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vSetGlobalInterrupt();
    1016:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <GIE_vSetGlobalInterrupt>
    /* Enable UDR Empty interrupt */
    SET_BIT(UCSRB, UDRIE);
    101a:	aa e2       	ldi	r26, 0x2A	; 42
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e2       	ldi	r30, 0x2A	; 42
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 62       	ori	r24, 0x20	; 32
    1026:	8c 93       	st	X, r24
    /* Enable TX Transmit interrupt */
    // SET_BIT(UCSRB, TXCIE);
    /* Set The Data to global variables */
    G_u8DataSend = A_u8Data;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	80 93 de 01 	sts	0x01DE, r24
}
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <UART_vSendString>:
void UART_vSendString(u8 *A_u8DataStr)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <UART_vSendString+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <UART_vSendString+0x8>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <UART_vSendString+0xa>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
    1048:	19 82       	std	Y+1, r1	; 0x01
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	1b 82       	std	Y+3, r1	; 0x03
    104e:	1c 82       	std	Y+4, r1	; 0x04
    1050:	15 c0       	rjmp	.+42     	; 0x107c <UART_vSendString+0x46>
    {
        UART_vSendData(A_u8DataStr[i]);
    1052:	29 81       	ldd	r18, Y+1	; 0x01
    1054:	3a 81       	ldd	r19, Y+2	; 0x02
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	0e 94 ee 07 	call	0xfdc	; 0xfdc <UART_vSendData>
    G_u8DataSend = A_u8Data;
}
void UART_vSendString(u8 *A_u8DataStr)
{
    /* Send each char of string till the NULL */
    for (u32 i = 0; A_u8DataStr[i] != 0; i++)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	ab 81       	ldd	r26, Y+3	; 0x03
    106c:	bc 81       	ldd	r27, Y+4	; 0x04
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	a1 1d       	adc	r26, r1
    1072:	b1 1d       	adc	r27, r1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	ab 83       	std	Y+3, r26	; 0x03
    107a:	bc 83       	std	Y+4, r27	; 0x04
    107c:	29 81       	ldd	r18, Y+1	; 0x01
    107e:	3a 81       	ldd	r19, Y+2	; 0x02
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	80 81       	ld	r24, Z
    108c:	88 23       	and	r24, r24
    108e:	09 f7       	brne	.-62     	; 0x1052 <UART_vSendString+0x1c>
    {
        UART_vSendData(A_u8DataStr[i]);
    }
}
    1090:	26 96       	adiw	r28, 0x06	; 6
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <UART_u8GetData>:

u8 UART_u8GetData(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    /* Wait untill receive flag is finished */
    while ((UCSRA & (1 << RXC)) == 0)
    10aa:	eb e2       	ldi	r30, 0x2B	; 43
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 23       	and	r24, r24
    10b2:	dc f7       	brge	.-10     	; 0x10aa <UART_u8GetData+0x8>
    {
        // wait
    }
    return UDR;
    10b4:	ec e2       	ldi	r30, 0x2C	; 44
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <UART_vGetString>:
void UART_vGetString(u8 *A_u8Data)
{
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <UART_vGetString+0xa>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	9b 83       	std	Y+3, r25	; 0x03
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8CharCount = 0;
    10d4:	19 82       	std	Y+1, r1	; 0x01
    A_u8Data[L_u8CharCount] = UART_u8GetData();
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	8c 01       	movw	r16, r24
    10e2:	02 0f       	add	r16, r18
    10e4:	13 1f       	adc	r17, r19
    10e6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <UART_u8GetData>
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 83       	st	Z, r24
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <UART_vGetString+0x4e>
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
    {
        L_u8CharCount++;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	89 83       	std	Y+1, r24	; 0x01
        A_u8Data[L_u8CharCount] = UART_u8GetData();
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	8c 01       	movw	r16, r24
    1102:	02 0f       	add	r16, r18
    1104:	13 1f       	adc	r17, r19
    1106:	0e 94 51 08 	call	0x10a2	; 0x10a2 <UART_u8GetData>
    110a:	f8 01       	movw	r30, r16
    110c:	80 83       	st	Z, r24
}
void UART_vGetString(u8 *A_u8Data)
{
    u8 L_u8CharCount = 0;
    A_u8Data[L_u8CharCount] = UART_u8GetData();
    while (A_u8Data[L_u8CharCount] != ADR_NULL)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	9b 81       	ldd	r25, Y+3	; 0x03
    1118:	fc 01       	movw	r30, r24
    111a:	e2 0f       	add	r30, r18
    111c:	f3 1f       	adc	r31, r19
    111e:	80 81       	ld	r24, Z
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	21 f7       	brne	.-56     	; 0x10f0 <UART_vGetString+0x30>
    {
        L_u8CharCount++;
        A_u8Data[L_u8CharCount] = UART_u8GetData();
    }
    A_u8Data[L_u8CharCount] = '\0';
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	fc 01       	movw	r30, r24
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	10 82       	st	Z, r1
}
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <UART_u8GetDataAsync>:
void UART_u8GetDataAsync(FUNC_PTR_Iu8_OV A_Fptr)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <UART_u8GetDataAsync+0x6>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
    /* GLobal Interrupt Enable */
    GIE_vSetGlobalInterrupt();
    1158:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <GIE_vSetGlobalInterrupt>
    /* Enable RX interrupt */
    SET_BIT(UCSRB, RXCIE);
    115c:	aa e2       	ldi	r26, 0x2A	; 42
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e2       	ldi	r30, 0x2A	; 42
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	8c 93       	st	X, r24
    /* Register CallBack Function */
    G_PTR_FUNC_RX = A_Fptr;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	90 93 29 02 	sts	0x0229, r25
    1172:	80 93 28 02 	sts	0x0228, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <__vector_13>:
/* RX Complete Interrupt */
void __vector_13(void)
{
    1180:	1f 92       	push	r1
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    G_PTR_FUNC_RX(UDR);
    11aa:	e0 91 28 02 	lds	r30, 0x0228
    11ae:	f0 91 29 02 	lds	r31, 0x0229
    11b2:	ac e2       	ldi	r26, 0x2C	; 44
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	8c 91       	ld	r24, X
    11b8:	09 95       	icall
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_14>:
/* UDRE Data Register Empty */
void __vector_14(void)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	8f 93       	push	r24
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    UDR = G_u8DataSend;
    11f8:	ec e2       	ldi	r30, 0x2C	; 44
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 91 de 01 	lds	r24, 0x01DE
    1200:	80 83       	st	Z, r24
    // CLR_BIT(UCSRB, UDRIE);
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	8f 91       	pop	r24
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <__vector_15>:
/* TX Complete Interrupt */
void __vector_15(void)
{
    1216:	1f 92       	push	r1
    1218:	0f 92       	push	r0
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	0f 92       	push	r0
    121e:	11 24       	eor	r1, r1
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <TIMER_vInit>:
/*********************************************************/
/* INIT For all 3 timers, NOTE: Change your configuration*/
/*********************************************************/

void TIMER_vInit(u8 A_u8TIMERID)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <TIMER_vInit+0x6>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01

    switch (A_u8TIMERID)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3b 83       	std	Y+3, r19	; 0x03
    124c:	2a 83       	std	Y+2, r18	; 0x02
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	9b 81       	ldd	r25, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f1       	breq	.+116    	; 0x12cc <TIMER_vInit+0x96>
    1258:	2a 81       	ldd	r18, Y+2	; 0x02
    125a:	3b 81       	ldd	r19, Y+3	; 0x03
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	e9 f0       	breq	.+58     	; 0x129c <TIMER_vInit+0x66>
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f0       	breq	.+2      	; 0x126c <TIMER_vInit+0x36>
    126a:	54 c0       	rjmp	.+168    	; 0x1314 <TIMER_vInit+0xde>
    {
    case TIMER0:
        /* Timer Mode */
        TCCR0 = (TCCR0 & WAVE_GENERATION_MODE_MASK) | TIMER0_WAVE_GENERATION_MODE;
    126c:	a3 e5       	ldi	r26, 0x53	; 83
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e3 e5       	ldi	r30, 0x53	; 83
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 64       	ori	r24, 0x48	; 72
    1278:	8c 93       	st	X, r24
        /* Set OC0 pin State */
        TCCR0 = (TCCR0 & OCR_PIN_MASK_T0_T2) | (TIMER0_OCR_PIN_MODE << 4);
    127a:	a3 e5       	ldi	r26, 0x53	; 83
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e3 e5       	ldi	r30, 0x53	; 83
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7c       	andi	r24, 0xCF	; 207
    1286:	80 62       	ori	r24, 0x20	; 32
    1288:	8c 93       	st	X, r24
        /* set prescale */
        TCCR0 = (TCCR0 & CLOCK_SOURCE_MASK) | TIMER0_PRESCALE_MODE;
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 7f       	andi	r24, 0xF8	; 248
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	8c 93       	st	X, r24
    129a:	3c c0       	rjmp	.+120    	; 0x1314 <TIMER_vInit+0xde>

        break;
    case TIMER2:
        /* Timer Mode */
        TCCR2 = (TCCR2 & WAVE_GENERATION_MODE_MASK) | TIMER2_WAVE_GENERATION_MODE;
    129c:	a5 e4       	ldi	r26, 0x45	; 69
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e4       	ldi	r30, 0x45	; 69
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 64       	ori	r24, 0x48	; 72
    12a8:	8c 93       	st	X, r24
        /* Set OC0 pin State */
        TCCR2 = (TCCR2 & OCR_PIN_MASK_T0_T2) | (TIMER2_OCR_PIN_MODE << 4);
    12aa:	a5 e4       	ldi	r26, 0x45	; 69
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e4       	ldi	r30, 0x45	; 69
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 7c       	andi	r24, 0xCF	; 207
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	8c 93       	st	X, r24
        /* set prescale */
        TCCR2 = (TCCR2 & CLOCK_SOURCE_MASK) | TIMER2_PRESCALE_MODE;
    12ba:	a5 e4       	ldi	r26, 0x45	; 69
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e4       	ldi	r30, 0x45	; 69
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 7f       	andi	r24, 0xF8	; 248
    12c6:	82 60       	ori	r24, 0x02	; 2
    12c8:	8c 93       	st	X, r24
    12ca:	24 c0       	rjmp	.+72     	; 0x1314 <TIMER_vInit+0xde>

        break;
    case TIMER1:
        /* SET COMPARE OUTPUT MODE FOR PIN OC1A OC2B */
        TCCR1A = (TCCR1A & OCR_PIN_MASK_T3_A) | (TIMER1_OCRA_PIN_MODE << 6);
    12cc:	af e4       	ldi	r26, 0x4F	; 79
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e4       	ldi	r30, 0x4F	; 79
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 73       	andi	r24, 0x3F	; 63
    12d8:	8c 93       	st	X, r24
        TCCR1A = (TCCR1A & OCR_PIN_MASK_T3_B) | (TIMER1_OCRB_PIN_MODE << 4);
    12da:	af e4       	ldi	r26, 0x4F	; 79
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ef e4       	ldi	r30, 0x4F	; 79
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7c       	andi	r24, 0xCF	; 207
    12e6:	8c 93       	st	X, r24
        /* SET PRESCALE */
        TCCR1B = (TCCR1B & CLOCK_SOURCE_MASK) | TIMER1_PRESACLE_MODE;
    12e8:	ae e4       	ldi	r26, 0x4E	; 78
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ee e4       	ldi	r30, 0x4E	; 78
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	8c 93       	st	X, r24
        /* SET WAVE GENERATION MODE */
        TCCR1A = (TCCR1A & TCCR1A_WAVE_MODE_MASK) | TIMER1_WAVE_GENERATION_MODE_TCCR1A;
    12f8:	af e4       	ldi	r26, 0x4F	; 79
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ef e4       	ldi	r30, 0x4F	; 79
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8c 7f       	andi	r24, 0xFC	; 252
    1304:	8c 93       	st	X, r24
        TCCR1B = (TCCR1B & TCCR1B_WAVE_MODE_MASK) | TIMER1_WAVE_GENERATION_MODE_TCCR1B;
    1306:	ae e4       	ldi	r26, 0x4E	; 78
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ee e4       	ldi	r30, 0x4E	; 78
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	87 7e       	andi	r24, 0xE7	; 231
    1312:	8c 93       	st	X, r24
        break;

    default:
        break;
    }
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <TIMER_vSetPreLoad>:
/*********************************************************/
/* Set Preload For all 3 timers*/
/*********************************************************/
void TIMER_vSetPreLoad(u8 A_u8TIMERID, u16 A_u16PreloadValue)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <TIMER_vSetPreLoad+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <TIMER_vSetPreLoad+0x8>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	7b 83       	std	Y+3, r23	; 0x03
    1332:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8TIMERID)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3d 83       	std	Y+5, r19	; 0x05
    133c:	2c 83       	std	Y+4, r18	; 0x04
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	99 f0       	breq	.+38     	; 0x136e <TIMER_vSetPreLoad+0x4e>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	49 f0       	breq	.+18     	; 0x1364 <TIMER_vSetPreLoad+0x44>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	81 f4       	brne	.+32     	; 0x137a <TIMER_vSetPreLoad+0x5a>
    {
    case TIMER0:
        TCNT0 = (u8)A_u16PreloadValue;
    135a:	e2 e5       	ldi	r30, 0x52	; 82
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	0b c0       	rjmp	.+22     	; 0x137a <TIMER_vSetPreLoad+0x5a>
        break;
    case TIMER2:
        TCNT2 = (u8)A_u16PreloadValue;
    1364:	e4 e4       	ldi	r30, 0x44	; 68
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	06 c0       	rjmp	.+12     	; 0x137a <TIMER_vSetPreLoad+0x5a>
        break;
    case TIMER1:
        TCNTW = A_u16PreloadValue;
    136e:	ec e4       	ldi	r30, 0x4C	; 76
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	91 83       	std	Z+1, r25	; 0x01
    1378:	80 83       	st	Z, r24
        break;

    default:
        break;
    }
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <TIMER_vSetOcrValue>:
/*********************************************************/
/* Set OCR For all 3 timers , note don't use it with Timer1*/
/*********************************************************/
void TIMER_vSetOcrValue(u8 A_u8TIMERID, u16 A_u16OcrValue)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <TIMER_vSetOcrValue+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <TIMER_vSetOcrValue+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	7b 83       	std	Y+3, r23	; 0x03
    139c:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8TIMERID)
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3d 83       	std	Y+5, r19	; 0x05
    13a6:	2c 83       	std	Y+4, r18	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	99 f0       	breq	.+38     	; 0x13d8 <TIMER_vSetOcrValue+0x4e>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	49 f0       	breq	.+18     	; 0x13ce <TIMER_vSetOcrValue+0x44>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	81 f4       	brne	.+32     	; 0x13e4 <TIMER_vSetOcrValue+0x5a>
    {
    case TIMER0:
        OCR0 = (u8)A_u16OcrValue;
    13c4:	ec e5       	ldi	r30, 0x5C	; 92
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	0b c0       	rjmp	.+22     	; 0x13e4 <TIMER_vSetOcrValue+0x5a>
        break;
    case TIMER2:
        OCR2 = (u8)A_u16OcrValue;
    13ce:	e3 e4       	ldi	r30, 0x43	; 67
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <TIMER_vSetOcrValue+0x5a>
        break;
    case TIMER1:
        /* THERE IS A AND B*/
        OCR1AW = A_u16OcrValue;
    13d8:	ea e4       	ldi	r30, 0x4A	; 74
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
        break;

    default:
        break;
    }
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <TIMER_vSetOCR1AWValue>:
/*********************************************************/
/* Set OCR1A For Timer 1*/
/*********************************************************/
void TIMER_vSetOCR1AWValue(u16 A_u16OcrValue)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <TIMER_vSetOCR1AWValue+0x6>
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	9a 83       	std	Y+2, r25	; 0x02
    1400:	89 83       	std	Y+1, r24	; 0x01
    OCR1AW = A_u16OcrValue;
    1402:	ea e4       	ldi	r30, 0x4A	; 74
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TIMER_vSetOCR1BWValue>:
/*********************************************************/
/* Set OCR1B For Timer 1*/
/*********************************************************/
void TIMER_vSetOCR1BWValue(u16 A_u16OcrValue)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER_vSetOCR1BWValue+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
    OCR1BW = A_u16OcrValue;
    1426:	e8 e4       	ldi	r30, 0x48	; 72
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <TIMER_vSetICR1WValue>:
/*********************************************************/
/* Set ICR1W For Timer 1*/
/*********************************************************/
void TIMER_vSetICR1WValue(u16 A_u16OcrValue)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <TIMER_vSetICR1WValue+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    ICR1W = A_u16OcrValue;
    144a:	e6 e4       	ldi	r30, 0x46	; 70
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	91 83       	std	Z+1, r25	; 0x01
    1454:	80 83       	st	Z, r24
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <TIMER_vDelayMS>:
/********************************************************/
/* Generate Delays, ALL TIMERS */
/********************************************************/

void TIMER_vDelayMS(u8 A_u8TIMERID, f32 A_f32Delay, FUNC_PTR_IV_OV A_FPtr)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	a7 97       	sbiw	r28, 0x27	; 39
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	89 a3       	std	Y+33, r24	; 0x21
    1476:	4a a3       	std	Y+34, r20	; 0x22
    1478:	5b a3       	std	Y+35, r21	; 0x23
    147a:	6c a3       	std	Y+36, r22	; 0x24
    147c:	7d a3       	std	Y+37, r23	; 0x25
    147e:	3f a3       	std	Y+39, r19	; 0x27
    1480:	2e a3       	std	Y+38, r18	; 0x26
    GIE_vSetGlobalInterrupt();
    1482:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <GIE_vSetGlobalInterrupt>
    f32 L_f32OverFlowTime, L_f32DelayReq;
    f32 L_f32NumberOfOverflows, L_f32PreLoadFrac;
    u32 L_u32Counts, L_u32PreLoad, L_u32Ocr, L_u32TickTime;
    L_f32DelayReq = (A_f32Delay * 1.0) / 1000;
    1486:	6a a1       	ldd	r22, Y+34	; 0x22
    1488:	7b a1       	ldd	r23, Y+35	; 0x23
    148a:	8c a1       	ldd	r24, Y+36	; 0x24
    148c:	9d a1       	ldd	r25, Y+37	; 0x25
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	54 e4       	ldi	r21, 0x44	; 68
    1496:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	89 8f       	std	Y+25, r24	; 0x19
    14a0:	9a 8f       	std	Y+26, r25	; 0x1a
    14a2:	ab 8f       	std	Y+27, r26	; 0x1b
    14a4:	bc 8f       	std	Y+28, r27	; 0x1c
    switch (A_u8TIMERID)
    14a6:	89 a1       	ldd	r24, Y+33	; 0x21
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	61 f4       	brne	.+24     	; 0x14ca <TIMER_vDelayMS+0x6a>
    /********************* TIMER1 *******************/
    /************************************************/
    case TIMER1:
        /*You will need it*/
        /* Assign callback function */
        GLB_PTRF_TIM1_OVF = A_FPtr;
    14b2:	8e a1       	ldd	r24, Y+38	; 0x26
    14b4:	9f a1       	ldd	r25, Y+39	; 0x27
    14b6:	90 93 35 02 	sts	0x0235, r25
    14ba:	80 93 34 02 	sts	0x0234, r24
        /* Enable Timer Overflow Interrupt */
        GLB_PTRF_TIM1_CTC = A_FPtr;
    14be:	8e a1       	ldd	r24, Y+38	; 0x26
    14c0:	9f a1       	ldd	r25, Y+39	; 0x27
    14c2:	90 93 2d 02 	sts	0x022D, r25
    14c6:	80 93 2c 02 	sts	0x022C, r24
        break;

    default:
        break;
    }
}
    14ca:	a7 96       	adiw	r28, 0x27	; 39
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <TIMER_vPWMSignal>:
/********************************************************/
/* Generate PWM SIGNALS, ALL TIMERS */
/********************************************************/

void TIMER_vPWMSignal(u8 A_u8TIMERID, f32 A_f32DutyCycle)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	29 97       	sbiw	r28, 0x09	; 9
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	4c 83       	std	Y+4, r20	; 0x04
    14f4:	5d 83       	std	Y+5, r21	; 0x05
    14f6:	6e 83       	std	Y+6, r22	; 0x06
    14f8:	7f 83       	std	Y+7, r23	; 0x07
    u16 L_u16OcrValue;
    switch (A_u8TIMERID)
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	39 87       	std	Y+9, r19	; 0x09
    1502:	28 87       	std	Y+8, r18	; 0x08
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	99 85       	ldd	r25, Y+9	; 0x09
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	31 f0       	breq	.+12     	; 0x1518 <TIMER_vPWMSignal+0x3c>
    150c:	28 85       	ldd	r18, Y+8	; 0x08
    150e:	39 85       	ldd	r19, Y+9	; 0x09
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	59 f1       	breq	.+86     	; 0x156c <TIMER_vPWMSignal+0x90>
    1516:	53 c0       	rjmp	.+166    	; 0x15be <TIMER_vPWMSignal+0xe2>
    case TIMER0:
        /* *********************************** */
        /* SET OC0 as Output */
        /* *********************************** */

        DIO_vSetPinDir(PORTB_ID, PIN3_ID, DIR_OUTPUT);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	63 e0       	ldi	r22, 0x03	; 3
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        /* Check Modes */
        /* *********************************** */

#if TIMER0_WAVE_GENERATION_MODE == WAVE_GENERATION_MODE_PWM_FAST
#if TIMER0_OCR_PIN_MODE == CLEAR_COMPARE_MODE_NON_INVERTING
        L_u16OcrValue = (A_f32DutyCycle * 1.0 / 100) * TIMER0_RESOLUTION;
    1522:	6c 81       	ldd	r22, Y+4	; 0x04
    1524:	7d 81       	ldd	r23, Y+5	; 0x05
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	48 ec       	ldi	r20, 0xC8	; 200
    1530:	52 e4       	ldi	r21, 0x42	; 66
    1532:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	53 e4       	ldi	r21, 0x43	; 67
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
        TIMER_vSetOcrValue(TIMER0, L_u16OcrValue);
    155e:	29 81       	ldd	r18, Y+1	; 0x01
    1560:	3a 81       	ldd	r19, Y+2	; 0x02
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	b9 01       	movw	r22, r18
    1566:	0e 94 c5 09 	call	0x138a	; 0x138a <TIMER_vSetOcrValue>
    156a:	29 c0       	rjmp	.+82     	; 0x15be <TIMER_vPWMSignal+0xe2>
    /************************************************/
    case TIMER2:
        /* *********************************** */
        /* SET OC2 as Output */
        /* *********************************** */
        DIO_vSetPinDir(PORTD_ID, PIN7_ID, DIR_OUTPUT);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	67 e0       	ldi	r22, 0x07	; 7
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        /* *********************************** */
        /* Check Modes */
        /* *********************************** */
#if TIMER2_WAVE_GENERATION_MODE == WAVE_GENERATION_MODE_PWM_FAST
#if TIMER2_OCR_PIN_MODE == CLEAR_COMPARE_MODE_NON_INVERTING
        L_u16OcrValue = (A_f32DutyCycle * 1.0 / 100) * TIMER2_RESOLUTION;
    1576:	6c 81       	ldd	r22, Y+4	; 0x04
    1578:	7d 81       	ldd	r23, Y+5	; 0x05
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	48 ec       	ldi	r20, 0xC8	; 200
    1584:	52 e4       	ldi	r21, 0x42	; 66
    1586:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	bc 01       	movw	r22, r24
    1590:	cd 01       	movw	r24, r26
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	53 e4       	ldi	r21, 0x43	; 67
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
        TIMER_vSetOcrValue(TIMER2, L_u16OcrValue);
    15b2:	29 81       	ldd	r18, Y+1	; 0x01
    15b4:	3a 81       	ldd	r19, Y+2	; 0x02
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	b9 01       	movw	r22, r18
    15ba:	0e 94 c5 09 	call	0x138a	; 0x138a <TIMER_vSetOcrValue>
        break;

    default:
        break;
    }
}
    15be:	29 96       	adiw	r28, 0x09	; 9
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <TIMER_u16GetICU>:
/********************************************************/
/* Get ICU Value */
/********************************************************/
u16 TIMER_u16GetICU()
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    return ICR1W;
    15d8:	e6 e4       	ldi	r30, 0x46	; 70
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <TIMER_vsetCallBackFunctionOvfTIMER1>:
/********************************************************/
/* SET CallBack Function for overflow interrupt timer1 */
/********************************************************/
void TIMER_vsetCallBackFunctionOvfTIMER1(FUNC_PTR_IV_OV A_FPtr)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <TIMER_vsetCallBackFunctionOvfTIMER1+0x6>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    /* SET CALL BACK FUNCTION */
    GLB_PTRF_TIM1_OVF = A_FPtr;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	90 93 35 02 	sts	0x0235, r25
    15fc:	80 93 34 02 	sts	0x0234, r24
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <TIMER_vsetCallBackFunctionIcuTIMER1>:
/********************************************************/
/* SET CallBack Function for ICU interrupt timer1 */
/********************************************************/
void TIMER_vsetCallBackFunctionIcuTIMER1(FUNC_PTR_IV_OV A_FPtr)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <TIMER_vsetCallBackFunctionIcuTIMER1+0x6>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    GLB_PTRF_TIM1_ICU = A_FPtr;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	90 93 37 02 	sts	0x0237, r25
    1620:	80 93 36 02 	sts	0x0236, r24
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <TIMER_vCongfigureICU>:
/********************************************************************/
/* Configure ICU To be used , NOTE it is seperate from function init */
/*********************************************************************/
void TIMER_vCongfigureICU()
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    /* SELECT NORMAL MODE FROM CONFIGURATIONs */
    CLR_BIT(TCCR1A, WGM10);
    1636:	af e4       	ldi	r26, 0x4F	; 79
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ef e4       	ldi	r30, 0x4F	; 79
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8e 7f       	andi	r24, 0xFE	; 254
    1642:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, WGM11);
    1644:	af e4       	ldi	r26, 0x4F	; 79
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ef e4       	ldi	r30, 0x4F	; 79
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8d 7f       	andi	r24, 0xFD	; 253
    1650:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM12);
    1652:	ae e4       	ldi	r26, 0x4E	; 78
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ee e4       	ldi	r30, 0x4E	; 78
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, WGM13);
    1660:	ae e4       	ldi	r26, 0x4E	; 78
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ee e4       	ldi	r30, 0x4E	; 78
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7e       	andi	r24, 0xEF	; 239
    166c:	8c 93       	st	X, r24
    /* SET TRTIGGER TO RISING EDGE */
    SET_BIT(TCCR1B, ICES1);
    166e:	ae e4       	ldi	r26, 0x4E	; 78
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ee e4       	ldi	r30, 0x4E	; 78
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 64       	ori	r24, 0x40	; 64
    167a:	8c 93       	st	X, r24
    /* ENABLE INTERRUPT for ICU */
    SET_BIT(TIMSK, TICIE1);
    167c:	a9 e5       	ldi	r26, 0x59	; 89
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e9 e5       	ldi	r30, 0x59	; 89
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	8c 93       	st	X, r24
    /* Enable Overflow interrupt */
    SET_BIT(TIMSK, TOIE1);
    168a:	a9 e5       	ldi	r26, 0x59	; 89
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e9 e5       	ldi	r30, 0x59	; 89
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	84 60       	ori	r24, 0x04	; 4
    1696:	8c 93       	st	X, r24
    /* SET ICP AS INPUT PD6 */
    DIO_vSetPinDir(PORTD_ID, PIN6_ID, DIR_INPUT);
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	66 e0       	ldi	r22, 0x06	; 6
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET PRESCALE FROM CONFIGURATIONS to 8*/
    CLR_BIT(TCCR1B, CS10);
    16a2:	ae e4       	ldi	r26, 0x4E	; 78
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8e 7f       	andi	r24, 0xFE	; 254
    16ae:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS11);
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	82 60       	ori	r24, 0x02	; 2
    16bc:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, CS12);
    16be:	ae e4       	ldi	r26, 0x4E	; 78
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ee e4       	ldi	r30, 0x4E	; 78
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8b 7f       	andi	r24, 0xFB	; 251
    16ca:	8c 93       	st	X, r24
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <TIMER_vDisableIntICU>:
/********************************************************************/
/* Disable ICU Interrupt */
/*********************************************************************/
void TIMER_vDisableIntICU()
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    /* Disable INTERRUPT for ICU */
    CLR_BIT(TIMSK, TICIE1);
    16da:	a9 e5       	ldi	r26, 0x59	; 89
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e9 e5       	ldi	r30, 0x59	; 89
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 7d       	andi	r24, 0xDF	; 223
    16e6:	8c 93       	st	X, r24
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <TIMER_vSetTriggeringICU>:
/********************************************************************/
/* Set Triggering , Rising Or Falling for ICES1 for ICU*/
/*********************************************************************/
void TIMER_vSetTriggeringICU(u8 A_u8Triggering)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <TIMER_vSetTriggeringICU+0x6>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8Triggering)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3b 83       	std	Y+3, r19	; 0x03
    1704:	2a 83       	std	Y+2, r18	; 0x02
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	31 f0       	breq	.+12     	; 0x171a <TIMER_vSetTriggeringICU+0x2c>
    170e:	2a 81       	ldd	r18, Y+2	; 0x02
    1710:	3b 81       	ldd	r19, Y+3	; 0x03
    1712:	21 30       	cpi	r18, 0x01	; 1
    1714:	31 05       	cpc	r19, r1
    1716:	49 f0       	breq	.+18     	; 0x172a <TIMER_vSetTriggeringICU+0x3c>
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <TIMER_vSetTriggeringICU+0x4a>
    {
    case RISING:
        /* SET TRIGGERING TO RISING EDGE */
        SET_BIT(TCCR1B, ICES1);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 64       	ori	r24, 0x40	; 64
    1726:	8c 93       	st	X, r24
    1728:	07 c0       	rjmp	.+14     	; 0x1738 <TIMER_vSetTriggeringICU+0x4a>
        break;
    case FALLING:
        /* SET TRIGGERING TO FALLING EDGE */
        CLR_BIT(TCCR1B, ICES1);
    172a:	ae e4       	ldi	r26, 0x4E	; 78
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e4       	ldi	r30, 0x4E	; 78
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 7b       	andi	r24, 0xBF	; 191
    1736:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <__vector_10>:
/*********************************************************************/
/******************** ISR / TIMER0**************************/
/*********************************************************************/
/* TIMER0 COMP */
void __vector_10(void)
{
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    176e:	80 91 e3 01 	lds	r24, 0x01E3
    1772:	90 91 e4 01 	lds	r25, 0x01E4
    1776:	a0 91 e5 01 	lds	r26, 0x01E5
    177a:	b0 91 e6 01 	lds	r27, 0x01E6
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	a1 1d       	adc	r26, r1
    1782:	b1 1d       	adc	r27, r1
    1784:	80 93 e3 01 	sts	0x01E3, r24
    1788:	90 93 e4 01 	sts	0x01E4, r25
    178c:	a0 93 e5 01 	sts	0x01E5, r26
    1790:	b0 93 e6 01 	sts	0x01E6, r27
    if (L_u32Counter == G_u32Timer0Counts)
    1794:	20 91 e3 01 	lds	r18, 0x01E3
    1798:	30 91 e4 01 	lds	r19, 0x01E4
    179c:	40 91 e5 01 	lds	r20, 0x01E5
    17a0:	50 91 e6 01 	lds	r21, 0x01E6
    17a4:	80 91 f3 01 	lds	r24, 0x01F3
    17a8:	90 91 f4 01 	lds	r25, 0x01F4
    17ac:	a0 91 f5 01 	lds	r26, 0x01F5
    17b0:	b0 91 f6 01 	lds	r27, 0x01F6
    17b4:	28 17       	cp	r18, r24
    17b6:	39 07       	cpc	r19, r25
    17b8:	4a 07       	cpc	r20, r26
    17ba:	5b 07       	cpc	r21, r27
    17bc:	69 f4       	brne	.+26     	; 0x17d8 <__vector_10+0x94>
    {
        L_u32Counter = 0;
    17be:	10 92 e3 01 	sts	0x01E3, r1
    17c2:	10 92 e4 01 	sts	0x01E4, r1
    17c6:	10 92 e5 01 	sts	0x01E5, r1
    17ca:	10 92 e6 01 	sts	0x01E6, r1
        GLB_PTRF_TIM0_CTC();
    17ce:	e0 91 30 02 	lds	r30, 0x0230
    17d2:	f0 91 31 02 	lds	r31, 0x0231
    17d6:	09 95       	icall
    }
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	0f 90       	pop	r0
    17fa:	1f 90       	pop	r1
    17fc:	18 95       	reti

000017fe <__vector_11>:
/* TIMER0 OVF */
void __vector_11(void)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    1828:	80 91 e7 01 	lds	r24, 0x01E7
    182c:	90 91 e8 01 	lds	r25, 0x01E8
    1830:	a0 91 e9 01 	lds	r26, 0x01E9
    1834:	b0 91 ea 01 	lds	r27, 0x01EA
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	a1 1d       	adc	r26, r1
    183c:	b1 1d       	adc	r27, r1
    183e:	80 93 e7 01 	sts	0x01E7, r24
    1842:	90 93 e8 01 	sts	0x01E8, r25
    1846:	a0 93 e9 01 	sts	0x01E9, r26
    184a:	b0 93 ea 01 	sts	0x01EA, r27
    if (L_u32Counter == G_u32Timer0Counts)
    184e:	20 91 e7 01 	lds	r18, 0x01E7
    1852:	30 91 e8 01 	lds	r19, 0x01E8
    1856:	40 91 e9 01 	lds	r20, 0x01E9
    185a:	50 91 ea 01 	lds	r21, 0x01EA
    185e:	80 91 f3 01 	lds	r24, 0x01F3
    1862:	90 91 f4 01 	lds	r25, 0x01F4
    1866:	a0 91 f5 01 	lds	r26, 0x01F5
    186a:	b0 91 f6 01 	lds	r27, 0x01F6
    186e:	28 17       	cp	r18, r24
    1870:	39 07       	cpc	r19, r25
    1872:	4a 07       	cpc	r20, r26
    1874:	5b 07       	cpc	r21, r27
    1876:	d1 f4       	brne	.+52     	; 0x18ac <__vector_11+0xae>
    {
        L_u32Counter = 0;
    1878:	10 92 e7 01 	sts	0x01E7, r1
    187c:	10 92 e8 01 	sts	0x01E8, r1
    1880:	10 92 e9 01 	sts	0x01E9, r1
    1884:	10 92 ea 01 	sts	0x01EA, r1
        TIMER_vSetPreLoad(TIMER0, G_u32Timer0PreLoad);
    1888:	80 91 ff 01 	lds	r24, 0x01FF
    188c:	90 91 00 02 	lds	r25, 0x0200
    1890:	a0 91 01 02 	lds	r26, 0x0201
    1894:	b0 91 02 02 	lds	r27, 0x0202
    1898:	9c 01       	movw	r18, r24
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	b9 01       	movw	r22, r18
    189e:	0e 94 90 09 	call	0x1320	; 0x1320 <TIMER_vSetPreLoad>
        GLB_PTRF_TIM0_OVF();
    18a2:	e0 91 2a 02 	lds	r30, 0x022A
    18a6:	f0 91 2b 02 	lds	r31, 0x022B
    18aa:	09 95       	icall
    }
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	ff 91       	pop	r31
    18b2:	ef 91       	pop	r30
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	7f 91       	pop	r23
    18be:	6f 91       	pop	r22
    18c0:	5f 91       	pop	r21
    18c2:	4f 91       	pop	r20
    18c4:	3f 91       	pop	r19
    18c6:	2f 91       	pop	r18
    18c8:	0f 90       	pop	r0
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	0f 90       	pop	r0
    18ce:	1f 90       	pop	r1
    18d0:	18 95       	reti

000018d2 <__vector_4>:
/*********************************************************************/
/******************** ISR / TIMER2 **************************/
/*********************************************************************/
/* TIMER COMP */
void __vector_4(void)
{
    18d2:	1f 92       	push	r1
    18d4:	0f 92       	push	r0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	0f 92       	push	r0
    18da:	11 24       	eor	r1, r1
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    18fc:	80 91 eb 01 	lds	r24, 0x01EB
    1900:	90 91 ec 01 	lds	r25, 0x01EC
    1904:	a0 91 ed 01 	lds	r26, 0x01ED
    1908:	b0 91 ee 01 	lds	r27, 0x01EE
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	a1 1d       	adc	r26, r1
    1910:	b1 1d       	adc	r27, r1
    1912:	80 93 eb 01 	sts	0x01EB, r24
    1916:	90 93 ec 01 	sts	0x01EC, r25
    191a:	a0 93 ed 01 	sts	0x01ED, r26
    191e:	b0 93 ee 01 	sts	0x01EE, r27
    if (L_u32Counter == G_u32Timer2Counts)
    1922:	20 91 eb 01 	lds	r18, 0x01EB
    1926:	30 91 ec 01 	lds	r19, 0x01EC
    192a:	40 91 ed 01 	lds	r20, 0x01ED
    192e:	50 91 ee 01 	lds	r21, 0x01EE
    1932:	80 91 fb 01 	lds	r24, 0x01FB
    1936:	90 91 fc 01 	lds	r25, 0x01FC
    193a:	a0 91 fd 01 	lds	r26, 0x01FD
    193e:	b0 91 fe 01 	lds	r27, 0x01FE
    1942:	28 17       	cp	r18, r24
    1944:	39 07       	cpc	r19, r25
    1946:	4a 07       	cpc	r20, r26
    1948:	5b 07       	cpc	r21, r27
    194a:	69 f4       	brne	.+26     	; 0x1966 <__vector_4+0x94>
    {
        L_u32Counter = 0;
    194c:	10 92 eb 01 	sts	0x01EB, r1
    1950:	10 92 ec 01 	sts	0x01EC, r1
    1954:	10 92 ed 01 	sts	0x01ED, r1
    1958:	10 92 ee 01 	sts	0x01EE, r1
        GLB_PTRF_TIM2_CTC();
    195c:	e0 91 2e 02 	lds	r30, 0x022E
    1960:	f0 91 2f 02 	lds	r31, 0x022F
    1964:	09 95       	icall
    }
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	7f 91       	pop	r23
    1978:	6f 91       	pop	r22
    197a:	5f 91       	pop	r21
    197c:	4f 91       	pop	r20
    197e:	3f 91       	pop	r19
    1980:	2f 91       	pop	r18
    1982:	0f 90       	pop	r0
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	0f 90       	pop	r0
    1988:	1f 90       	pop	r1
    198a:	18 95       	reti

0000198c <__vector_5>:
/* TIMER2 OVF */
void __vector_5(void)
{
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	2f 93       	push	r18
    1998:	3f 93       	push	r19
    199a:	4f 93       	push	r20
    199c:	5f 93       	push	r21
    199e:	6f 93       	push	r22
    19a0:	7f 93       	push	r23
    19a2:	8f 93       	push	r24
    19a4:	9f 93       	push	r25
    19a6:	af 93       	push	r26
    19a8:	bf 93       	push	r27
    19aa:	ef 93       	push	r30
    19ac:	ff 93       	push	r31
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    static u32 L_u32Counter = 0;
    L_u32Counter++;
    19b6:	80 91 ef 01 	lds	r24, 0x01EF
    19ba:	90 91 f0 01 	lds	r25, 0x01F0
    19be:	a0 91 f1 01 	lds	r26, 0x01F1
    19c2:	b0 91 f2 01 	lds	r27, 0x01F2
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	a1 1d       	adc	r26, r1
    19ca:	b1 1d       	adc	r27, r1
    19cc:	80 93 ef 01 	sts	0x01EF, r24
    19d0:	90 93 f0 01 	sts	0x01F0, r25
    19d4:	a0 93 f1 01 	sts	0x01F1, r26
    19d8:	b0 93 f2 01 	sts	0x01F2, r27
    if (L_u32Counter == G_u32Timer2Counts)
    19dc:	20 91 ef 01 	lds	r18, 0x01EF
    19e0:	30 91 f0 01 	lds	r19, 0x01F0
    19e4:	40 91 f1 01 	lds	r20, 0x01F1
    19e8:	50 91 f2 01 	lds	r21, 0x01F2
    19ec:	80 91 fb 01 	lds	r24, 0x01FB
    19f0:	90 91 fc 01 	lds	r25, 0x01FC
    19f4:	a0 91 fd 01 	lds	r26, 0x01FD
    19f8:	b0 91 fe 01 	lds	r27, 0x01FE
    19fc:	28 17       	cp	r18, r24
    19fe:	39 07       	cpc	r19, r25
    1a00:	4a 07       	cpc	r20, r26
    1a02:	5b 07       	cpc	r21, r27
    1a04:	d1 f4       	brne	.+52     	; 0x1a3a <__vector_5+0xae>
    {
        L_u32Counter = 0;
    1a06:	10 92 ef 01 	sts	0x01EF, r1
    1a0a:	10 92 f0 01 	sts	0x01F0, r1
    1a0e:	10 92 f1 01 	sts	0x01F1, r1
    1a12:	10 92 f2 01 	sts	0x01F2, r1
        TIMER_vSetPreLoad(TIMER2, G_u32Timer2PreLoad);
    1a16:	80 91 07 02 	lds	r24, 0x0207
    1a1a:	90 91 08 02 	lds	r25, 0x0208
    1a1e:	a0 91 09 02 	lds	r26, 0x0209
    1a22:	b0 91 0a 02 	lds	r27, 0x020A
    1a26:	9c 01       	movw	r18, r24
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 90 09 	call	0x1320	; 0x1320 <TIMER_vSetPreLoad>
        GLB_PTRF_TIM2_OVF();
    1a30:	e0 91 32 02 	lds	r30, 0x0232
    1a34:	f0 91 33 02 	lds	r31, 0x0233
    1a38:	09 95       	icall
    }
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <__vector_6>:
/*********************************************************************/
/******************** ISR / TIMER1 **************************/
/*********************************************************************/
/* ICU */
void __vector_6(void)
{
    1a60:	1f 92       	push	r1
    1a62:	0f 92       	push	r0
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	0f 92       	push	r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	2f 93       	push	r18
    1a6c:	3f 93       	push	r19
    1a6e:	4f 93       	push	r20
    1a70:	5f 93       	push	r21
    1a72:	6f 93       	push	r22
    1a74:	7f 93       	push	r23
    1a76:	8f 93       	push	r24
    1a78:	9f 93       	push	r25
    1a7a:	af 93       	push	r26
    1a7c:	bf 93       	push	r27
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    GLB_PTRF_TIM1_ICU();
    1a8a:	e0 91 36 02 	lds	r30, 0x0236
    1a8e:	f0 91 37 02 	lds	r31, 0x0237
    1a92:	09 95       	icall
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_9>:
/* OVF */
void __vector_9(void)
{
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    GLB_PTRF_TIM1_OVF();
    1ae4:	e0 91 34 02 	lds	r30, 0x0234
    1ae8:	f0 91 35 02 	lds	r31, 0x0235
    1aec:	09 95       	icall
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <SPI_vMasterInit>:
#include "SPI_cfg.h"
#include "SPI_pri.h"

FUNC_PTR_Iu8_OV GLB_PTR_FUNC;
void SPI_vMasterInit(void)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    /* SELECT CLK FREQ */
    SPCR = (SPCR & CLK_FREQ_MASK_SPCR) | MASTER_CLK_FREQ_SPCR;
    1b1c:	ad e2       	ldi	r26, 0x2D	; 45
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ed e2       	ldi	r30, 0x2D	; 45
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8c 7f       	andi	r24, 0xFC	; 252
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	8c 93       	st	X, r24
    SPSR = (SPSR & CLK_FREQ_MASK_SPSR) | MASTER_CLK_FREQ_SPSR;
    1b2c:	ae e2       	ldi	r26, 0x2E	; 46
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ee e2       	ldi	r30, 0x2E	; 46
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8e 7f       	andi	r24, 0xFE	; 254
    1b38:	8c 93       	st	X, r24
    /* SELECT CLK POLARITY */
    SPCR = (SPCR & CLOCK_POLARITY_MASK) | MASTER_CLK_POL << 3;
    1b3a:	ad e2       	ldi	r26, 0x2D	; 45
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ed e2       	ldi	r30, 0x2D	; 45
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	87 7f       	andi	r24, 0xF7	; 247
    1b46:	8c 93       	st	X, r24
    /* SELECT CLK PHASE */
    SPCR = (SPCR & CLOCK_PHASE_MASK) | MASTER_CLK_PHASE << 2;
    1b48:	ad e2       	ldi	r26, 0x2D	; 45
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	ed e2       	ldi	r30, 0x2D	; 45
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8b 7f       	andi	r24, 0xFB	; 251
    1b54:	8c 93       	st	X, r24
    /* SELECT DATA ORDER */
    SPCR = (SPCR & DATA_ORDER_MASK) | MASTER_DATA_ORDER_MODE << 5;
    1b56:	ad e2       	ldi	r26, 0x2D	; 45
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ed e2       	ldi	r30, 0x2D	; 45
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 62       	ori	r24, 0x20	; 32
    1b62:	8c 93       	st	X, r24
    /* CONFIGURE AS MASTER*/
    SET_BIT(SPCR, MSTR);
    1b64:	ad e2       	ldi	r26, 0x2D	; 45
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	ed e2       	ldi	r30, 0x2D	; 45
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 61       	ori	r24, 0x10	; 16
    1b70:	8c 93       	st	X, r24
    /* SET MOSI OUTPUT PB5 */
    DIO_vSetPinDir(PORTB_ID, PIN5_ID, DIR_OUTPUT);
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	65 e0       	ldi	r22, 0x05	; 5
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET MISO INPUT PB6 */
    DIO_vSetPinDir(PORTB_ID, PIN6_ID, DIR_INPUT);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	66 e0       	ldi	r22, 0x06	; 6
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET CLK OUTPUT PB7 */
    DIO_vSetPinDir(PORTB_ID, PIN7_ID, DIR_OUTPUT);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	67 e0       	ldi	r22, 0x07	; 7
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET SS OUTPUT PB4 */
    DIO_vSetPinDir(PORTB_ID, PIN4_ID, DIR_OUTPUT);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* ENABLE SPE */
    SET_BIT(SPCR, SPE);
    1b9a:	ad e2       	ldi	r26, 0x2D	; 45
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	ed e2       	ldi	r30, 0x2D	; 45
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 64       	ori	r24, 0x40	; 64
    1ba6:	8c 93       	st	X, r24
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <SPI_vSlaveInit>:
void SPI_vSlaveInit(void)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    /* SELECT CLK FREQ */
    SPCR = (SPCR & CLK_FREQ_MASK_SPCR) | SLAVE_CLK_FREQ_SPCR;
    1bb6:	ad e2       	ldi	r26, 0x2D	; 45
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ed e2       	ldi	r30, 0x2D	; 45
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8c 7f       	andi	r24, 0xFC	; 252
    1bc2:	81 60       	ori	r24, 0x01	; 1
    1bc4:	8c 93       	st	X, r24
    SPSR = (SPSR & CLK_FREQ_MASK_SPSR) | SLAVE_CLK_FREQ_SPSR;
    1bc6:	ae e2       	ldi	r26, 0x2E	; 46
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ee e2       	ldi	r30, 0x2E	; 46
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8e 7f       	andi	r24, 0xFE	; 254
    1bd2:	8c 93       	st	X, r24
    /* SELECT CLK POLARITY */
    SPCR = (SPCR & CLOCK_POLARITY_MASK) | SLAVE_CLK_POL << 3;
    1bd4:	ad e2       	ldi	r26, 0x2D	; 45
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ed e2       	ldi	r30, 0x2D	; 45
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	87 7f       	andi	r24, 0xF7	; 247
    1be0:	8c 93       	st	X, r24
    /* SELECT CLK PHASE */
    SPCR = (SPCR & CLOCK_PHASE_MASK) | SLAVE_CLK_PHASE << 2;
    1be2:	ad e2       	ldi	r26, 0x2D	; 45
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	ed e2       	ldi	r30, 0x2D	; 45
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24
    /* SELECT DATA ORDER */
    SPCR = (SPCR & DATA_ORDER_MASK) | SLAVE_DATA_ORDER_MODE << 5;
    1bf0:	ad e2       	ldi	r26, 0x2D	; 45
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ed e2       	ldi	r30, 0x2D	; 45
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 62       	ori	r24, 0x20	; 32
    1bfc:	8c 93       	st	X, r24
    /* CONFIGURE AS SLAVE*/
    CLR_BIT(SPCR, MSTR);
    1bfe:	ad e2       	ldi	r26, 0x2D	; 45
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	ed e2       	ldi	r30, 0x2D	; 45
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8f 7e       	andi	r24, 0xEF	; 239
    1c0a:	8c 93       	st	X, r24
    /* SET MOSI INPUT PB5 */
    DIO_vSetPinDir(PORTB_ID, PIN5_ID, DIR_INPUT);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	65 e0       	ldi	r22, 0x05	; 5
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET MISO OUTPUT PB6 */
    DIO_vSetPinDir(PORTB_ID, PIN6_ID, DIR_OUTPUT);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	66 e0       	ldi	r22, 0x06	; 6
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET CLK INPUT PB7 */
    DIO_vSetPinDir(PORTB_ID, PIN7_ID, DIR_INPUT);
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	67 e0       	ldi	r22, 0x07	; 7
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* SET SS INPUT PB4 */
    DIO_vSetPinDir(PORTB_ID, PIN4_ID, DIR_INPUT);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	64 e0       	ldi	r22, 0x04	; 4
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    /* ENABLE SPE */
    SET_BIT(SPCR, SPE);
    1c34:	ad e2       	ldi	r26, 0x2D	; 45
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ed e2       	ldi	r30, 0x2D	; 45
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 64       	ori	r24, 0x40	; 64
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <SPI_u8Traceiver>:
u8 SPI_u8Traceiver(u8 A_u8Data)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	89 83       	std	Y+1, r24	; 0x01
    SPDR = A_u8Data;
    1c54:	ef e2       	ldi	r30, 0x2F	; 47
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	80 83       	st	Z, r24
    while ((SPSR & 1 << SPIF) == 0)
    1c5c:	ee e2       	ldi	r30, 0x2E	; 46
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	88 23       	and	r24, r24
    1c64:	dc f7       	brge	.-10     	; 0x1c5c <SPI_u8Traceiver+0x14>
    {
        /* Waiting */
    }
    return SPDR;
    1c66:	ef e2       	ldi	r30, 0x2F	; 47
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
}
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <SPI_vTransmitData>:

void SPI_vTransmitData(u8 A_u8Data)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    SPDR = A_u8Data;
    1c80:	ef e2       	ldi	r30, 0x2F	; 47
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	80 83       	st	Z, r24
    while ((SPSR & 1 << SPIF) == 0)
    1c88:	ee e2       	ldi	r30, 0x2E	; 46
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	dc f7       	brge	.-10     	; 0x1c88 <SPI_vTransmitData+0x14>
    {
        /* Waiting */
    }
}
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <SPI_u8ReceiveData>:
u8 SPI_u8ReceiveData(void)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    while ((SPSR & 1 << SPIF) == 0)
    1ca2:	ee e2       	ldi	r30, 0x2E	; 46
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	88 23       	and	r24, r24
    1caa:	dc f7       	brge	.-10     	; 0x1ca2 <SPI_u8ReceiveData+0x8>
    {
        /* Waiting */
    }
    return SPDR;
    1cac:	ef e2       	ldi	r30, 0x2F	; 47
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <SPI_vRecicevDataAsync>:

void SPI_vRecicevDataAsync(FUNC_PTR_Iu8_OV A_Fptr)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <SPI_vRecicevDataAsync+0x6>
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    /* Enable SPI Interrupt */
    SET_BIT(SPCR, SPIE);
    1cc6:	ad e2       	ldi	r26, 0x2D	; 45
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ed e2       	ldi	r30, 0x2D	; 45
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 68       	ori	r24, 0x80	; 128
    1cd2:	8c 93       	st	X, r24
    /* Register CallBack Function */
    GLB_PTR_FUNC = A_Fptr;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	90 93 39 02 	sts	0x0239, r25
    1cdc:	80 93 38 02 	sts	0x0238, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <__vector_12>:
void SPI_vTransmitDataAsync(u8 A_u8Data);

/* Serial Transfer Complete Interrupt */
void __vector_12(void)
{
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	0f 92       	push	r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	2f 93       	push	r18
    1cf6:	3f 93       	push	r19
    1cf8:	4f 93       	push	r20
    1cfa:	5f 93       	push	r21
    1cfc:	6f 93       	push	r22
    1cfe:	7f 93       	push	r23
    1d00:	8f 93       	push	r24
    1d02:	9f 93       	push	r25
    1d04:	af 93       	push	r26
    1d06:	bf 93       	push	r27
    1d08:	ef 93       	push	r30
    1d0a:	ff 93       	push	r31
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    GLB_PTR_FUNC(SPDR);
    1d14:	e0 91 38 02 	lds	r30, 0x0238
    1d18:	f0 91 39 02 	lds	r31, 0x0239
    1d1c:	af e2       	ldi	r26, 0x2F	; 47
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	8c 91       	ld	r24, X
    1d22:	09 95       	icall
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	ff 91       	pop	r31
    1d2a:	ef 91       	pop	r30
    1d2c:	bf 91       	pop	r27
    1d2e:	af 91       	pop	r26
    1d30:	9f 91       	pop	r25
    1d32:	8f 91       	pop	r24
    1d34:	7f 91       	pop	r23
    1d36:	6f 91       	pop	r22
    1d38:	5f 91       	pop	r21
    1d3a:	4f 91       	pop	r20
    1d3c:	3f 91       	pop	r19
    1d3e:	2f 91       	pop	r18
    1d40:	0f 90       	pop	r0
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	0f 90       	pop	r0
    1d46:	1f 90       	pop	r1
    1d48:	18 95       	reti

00001d4a <GIE_vSetGlobalInterrupt>:
#include "../../LIB/bit_map.h"

#include "GIE_reg.h"
#include "GIE_int.h"

void GIE_vSetGlobalInterrupt(){
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1d52:	af e5       	ldi	r26, 0x5F	; 95
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e5       	ldi	r30, 0x5F	; 95
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 68       	ori	r24, 0x80	; 128
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <GIE_vDisableGlobalInterrupt>:
void GIE_vDisableGlobalInterrupt(){
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1d6e:	af e5       	ldi	r26, 0x5F	; 95
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ef e5       	ldi	r30, 0x5F	; 95
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	8c 93       	st	X, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <EXI_vINT0_Init>:

static void (*G_vISRptr0)(void);
static void (*G_vISRptr1)(void);
static void (*G_vISRptr2)(void);
void EXI_vINT0_Init(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT0 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT0_PORT, INT0_PIN, DIR_INPUT);
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	62 e0       	ldi	r22, 0x02	; 2
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinVal(INT0_PORT, INT0_PIN, HIGH);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    /*Enable INT0*/
    SET_BIT(GICR, INT0);
    1d9e:	ab e5       	ldi	r26, 0x5B	; 91
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	eb e5       	ldi	r30, 0x5B	; 91
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
    /*configure INT0 Mode as The Mode Configured in CFG File*/
    MCUCR = (MCUCR & 0xFC) | (INT0_MODE << ISC00);
    1dac:	a5 e5       	ldi	r26, 0x55	; 85
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e5 e5       	ldi	r30, 0x55	; 85
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8c 7f       	andi	r24, 0xFC	; 252
    1db8:	82 60       	ori	r24, 0x02	; 2
    1dba:	8c 93       	st	X, r24
}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <EXI_vINT1_Init>:
void EXI_vINT1_Init(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT1 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT1_PORT, INT1_PIN, DIR_INPUT);
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	63 e0       	ldi	r22, 0x03	; 3
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinVal(INT1_PORT, INT1_PIN, HIGH);
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	63 e0       	ldi	r22, 0x03	; 3
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    /*Enable INT1*/
    SET_BIT(GICR, INT1);
    1dde:	ab e5       	ldi	r26, 0x5B	; 91
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	eb e5       	ldi	r30, 0x5B	; 91
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 68       	ori	r24, 0x80	; 128
    1dea:	8c 93       	st	X, r24
    /*configure INT1 Mode as The Mode Configured in CFG File*/
    MCUCR = (MCUCR & 0xF3) | (INT1_MODE << ISC10);
    1dec:	a5 e5       	ldi	r26, 0x55	; 85
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	83 7f       	andi	r24, 0xF3	; 243
    1df8:	88 60       	ori	r24, 0x08	; 8
    1dfa:	8c 93       	st	X, r24
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <EXI_vINT2_Init>:
void EXI_vINT2_Init(void)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    /*Configure INT2 PIN as INPUT , Turn on pull up*/
    DIO_vSetPinDir(INT2_PORT, INT2_PIN, DIR_INPUT);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinVal(INT2_PORT, INT2_PIN, HIGH);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    /*Enable INT2*/
    SET_BIT(GICR, INT2);
    1e1e:	ab e5       	ldi	r26, 0x5B	; 91
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	eb e5       	ldi	r30, 0x5B	; 91
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 62       	ori	r24, 0x20	; 32
    1e2a:	8c 93       	st	X, r24
    /*configure INT2 Mode as The Mode Configured in CFG File*/
    MCUCSR = (MCUCSR & 0xBF) | (INT2_MODE << ISC2);
    1e2c:	a4 e5       	ldi	r26, 0x54	; 84
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e4 e5       	ldi	r30, 0x54	; 84
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 7b       	andi	r24, 0xBF	; 191
    1e38:	8c 93       	st	X, r24
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <EXI_vRegFunc>:
void EXI_vRegFunc(void (*ISR_PTR)(void), u8 A_u8INT)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <EXI_vRegFunc+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <EXI_vRegFunc+0x8>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	6b 83       	std	Y+3, r22	; 0x03
    switch (A_u8INT)
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3d 83       	std	Y+5, r19	; 0x05
    1e5c:	2c 83       	std	Y+4, r18	; 0x04
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	81 f0       	breq	.+32     	; 0x1e88 <EXI_vRegFunc+0x48>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	91 f0       	breq	.+36     	; 0x1e96 <EXI_vRegFunc+0x56>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	a1 f4       	brne	.+40     	; 0x1ea2 <EXI_vRegFunc+0x62>
    {
    case INT0_FUNC:
        G_vISRptr0 = ISR_PTR;
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	90 93 0c 02 	sts	0x020C, r25
    1e82:	80 93 0b 02 	sts	0x020B, r24
    1e86:	0d c0       	rjmp	.+26     	; 0x1ea2 <EXI_vRegFunc+0x62>
        break;
    case INT1_FUNC:
        G_vISRptr1 = ISR_PTR;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	90 93 0e 02 	sts	0x020E, r25
    1e90:	80 93 0d 02 	sts	0x020D, r24
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <EXI_vRegFunc+0x62>
        break;
    case INT2_FUNC:
        G_vISRptr2 = ISR_PTR;
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	90 93 10 02 	sts	0x0210, r25
    1e9e:	80 93 0f 02 	sts	0x020F, r24
        break;
    default:
        break;
    }
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <__vector_1>:
void __vector_1(void)
{
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	6f 93       	push	r22
    1ec6:	7f 93       	push	r23
    1ec8:	8f 93       	push	r24
    1eca:	9f 93       	push	r25
    1ecc:	af 93       	push	r26
    1ece:	bf 93       	push	r27
    1ed0:	ef 93       	push	r30
    1ed2:	ff 93       	push	r31
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr0();
    1edc:	e0 91 0b 02 	lds	r30, 0x020B
    1ee0:	f0 91 0c 02 	lds	r31, 0x020C
    1ee4:	09 95       	icall
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	ff 91       	pop	r31
    1eec:	ef 91       	pop	r30
    1eee:	bf 91       	pop	r27
    1ef0:	af 91       	pop	r26
    1ef2:	9f 91       	pop	r25
    1ef4:	8f 91       	pop	r24
    1ef6:	7f 91       	pop	r23
    1ef8:	6f 91       	pop	r22
    1efa:	5f 91       	pop	r21
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	0f 90       	pop	r0
    1f08:	1f 90       	pop	r1
    1f0a:	18 95       	reti

00001f0c <__vector_2>:
void __vector_2(void)
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr1();
    1f36:	e0 91 0d 02 	lds	r30, 0x020D
    1f3a:	f0 91 0e 02 	lds	r31, 0x020E
    1f3e:	09 95       	icall
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__vector_3>:
void __vector_3(void)
{
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	2f 93       	push	r18
    1f72:	3f 93       	push	r19
    1f74:	4f 93       	push	r20
    1f76:	5f 93       	push	r21
    1f78:	6f 93       	push	r22
    1f7a:	7f 93       	push	r23
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	af 93       	push	r26
    1f82:	bf 93       	push	r27
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    G_vISRptr2();
    1f90:	e0 91 0f 02 	lds	r30, 0x020F
    1f94:	f0 91 10 02 	lds	r31, 0x0210
    1f98:	09 95       	icall
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	ff 91       	pop	r31
    1fa0:	ef 91       	pop	r30
    1fa2:	bf 91       	pop	r27
    1fa4:	af 91       	pop	r26
    1fa6:	9f 91       	pop	r25
    1fa8:	8f 91       	pop	r24
    1faa:	7f 91       	pop	r23
    1fac:	6f 91       	pop	r22
    1fae:	5f 91       	pop	r21
    1fb0:	4f 91       	pop	r20
    1fb2:	3f 91       	pop	r19
    1fb4:	2f 91       	pop	r18
    1fb6:	0f 90       	pop	r0
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	0f 90       	pop	r0
    1fbc:	1f 90       	pop	r1
    1fbe:	18 95       	reti

00001fc0 <DIO_vSetPinDir>:

#include "DIO_reg.h"
#include "DIO_int.h"

void DIO_vSetPinDir(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Dir)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <DIO_vSetPinDir+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_vSetPinDir+0x8>
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02
    1fd2:	4b 83       	std	Y+3, r20	; 0x03

	switch (A_u8PortId)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3d 83       	std	Y+5, r19	; 0x05
    1fdc:	2c 83       	std	Y+4, r18	; 0x04
    1fde:	6c 81       	ldd	r22, Y+4	; 0x04
    1fe0:	7d 81       	ldd	r23, Y+5	; 0x05
    1fe2:	61 30       	cpi	r22, 0x01	; 1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	d1 f1       	breq	.+116    	; 0x205c <DIO_vSetPinDir+0x9c>
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	9d 81       	ldd	r25, Y+5	; 0x05
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	91 05       	cpc	r25, r1
    1ff0:	34 f4       	brge	.+12     	; 0x1ffe <DIO_vSetPinDir+0x3e>
    1ff2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff6:	21 15       	cp	r18, r1
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	71 f0       	breq	.+28     	; 0x2018 <DIO_vSetPinDir+0x58>
    1ffc:	94 c0       	rjmp	.+296    	; 0x2126 <DIO_vSetPinDir+0x166>
    1ffe:	6c 81       	ldd	r22, Y+4	; 0x04
    2000:	7d 81       	ldd	r23, Y+5	; 0x05
    2002:	62 30       	cpi	r22, 0x02	; 2
    2004:	71 05       	cpc	r23, r1
    2006:	09 f4       	brne	.+2      	; 0x200a <DIO_vSetPinDir+0x4a>
    2008:	4b c0       	rjmp	.+150    	; 0x20a0 <DIO_vSetPinDir+0xe0>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	83 30       	cpi	r24, 0x03	; 3
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <DIO_vSetPinDir+0x56>
    2014:	67 c0       	rjmp	.+206    	; 0x20e4 <DIO_vSetPinDir+0x124>
    2016:	87 c0       	rjmp	.+270    	; 0x2126 <DIO_vSetPinDir+0x166>
	{
	case PORTA_ID:
		WRT_BIT(DDRA, A_u8PinId, A_u8Dir);
    2018:	aa e3       	ldi	r26, 0x3A	; 58
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ea e3       	ldi	r30, 0x3A	; 58
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	48 2f       	mov	r20, r24
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <DIO_vSetPinDir+0x74>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	2a 95       	dec	r18
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <DIO_vSetPinDir+0x70>
    2038:	80 95       	com	r24
    203a:	48 23       	and	r20, r24
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	b9 01       	movw	r22, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_vSetPinDir+0x90>
    204c:	66 0f       	add	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	8a 95       	dec	r24
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_vSetPinDir+0x8c>
    2054:	cb 01       	movw	r24, r22
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	65 c0       	rjmp	.+202    	; 0x2126 <DIO_vSetPinDir+0x166>
		break;
	case PORTB_ID:
		WRT_BIT(DDRB, A_u8PinId, A_u8Dir);
    205c:	a7 e3       	ldi	r26, 0x37	; 55
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e7 e3       	ldi	r30, 0x37	; 55
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_vSetPinDir+0xb8>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	2a 95       	dec	r18
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_vSetPinDir+0xb4>
    207c:	80 95       	com	r24
    207e:	48 23       	and	r20, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	b9 01       	movw	r22, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <DIO_vSetPinDir+0xd4>
    2090:	66 0f       	add	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	8a 95       	dec	r24
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <DIO_vSetPinDir+0xd0>
    2098:	cb 01       	movw	r24, r22
    209a:	84 2b       	or	r24, r20
    209c:	8c 93       	st	X, r24
    209e:	43 c0       	rjmp	.+134    	; 0x2126 <DIO_vSetPinDir+0x166>
		break;
	case PORTC_ID:
		WRT_BIT(DDRC, A_u8PinId, A_u8Dir);
    20a0:	a4 e3       	ldi	r26, 0x34	; 52
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e4 e3       	ldi	r30, 0x34	; 52
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <DIO_vSetPinDir+0xfc>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	2a 95       	dec	r18
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <DIO_vSetPinDir+0xf8>
    20c0:	80 95       	com	r24
    20c2:	48 23       	and	r20, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	b9 01       	movw	r22, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <DIO_vSetPinDir+0x118>
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	8a 95       	dec	r24
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <DIO_vSetPinDir+0x114>
    20dc:	cb 01       	movw	r24, r22
    20de:	84 2b       	or	r24, r20
    20e0:	8c 93       	st	X, r24
    20e2:	21 c0       	rjmp	.+66     	; 0x2126 <DIO_vSetPinDir+0x166>
		break;
	case PORTD_ID:
		WRT_BIT(DDRD, A_u8PinId, A_u8Dir);
    20e4:	a1 e3       	ldi	r26, 0x31	; 49
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e1 e3       	ldi	r30, 0x31	; 49
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_vSetPinDir+0x140>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	2a 95       	dec	r18
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_vSetPinDir+0x13c>
    2104:	80 95       	com	r24
    2106:	48 23       	and	r20, r24
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	b9 01       	movw	r22, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <DIO_vSetPinDir+0x15c>
    2118:	66 0f       	add	r22, r22
    211a:	77 1f       	adc	r23, r23
    211c:	8a 95       	dec	r24
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <DIO_vSetPinDir+0x158>
    2120:	cb 01       	movw	r24, r22
    2122:	84 2b       	or	r24, r20
    2124:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <DIO_vSetPinVal>:

void DIO_vSetPinVal(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Val)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_vSetPinVal+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <DIO_vSetPinVal+0x8>
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
    2148:	4b 83       	std	Y+3, r20	; 0x03

	switch (A_u8PortId)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	3d 83       	std	Y+5, r19	; 0x05
    2152:	2c 83       	std	Y+4, r18	; 0x04
    2154:	6c 81       	ldd	r22, Y+4	; 0x04
    2156:	7d 81       	ldd	r23, Y+5	; 0x05
    2158:	61 30       	cpi	r22, 0x01	; 1
    215a:	71 05       	cpc	r23, r1
    215c:	d1 f1       	breq	.+116    	; 0x21d2 <DIO_vSetPinVal+0x9c>
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
    2160:	9d 81       	ldd	r25, Y+5	; 0x05
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	91 05       	cpc	r25, r1
    2166:	34 f4       	brge	.+12     	; 0x2174 <DIO_vSetPinVal+0x3e>
    2168:	2c 81       	ldd	r18, Y+4	; 0x04
    216a:	3d 81       	ldd	r19, Y+5	; 0x05
    216c:	21 15       	cp	r18, r1
    216e:	31 05       	cpc	r19, r1
    2170:	71 f0       	breq	.+28     	; 0x218e <DIO_vSetPinVal+0x58>
    2172:	94 c0       	rjmp	.+296    	; 0x229c <DIO_vSetPinVal+0x166>
    2174:	6c 81       	ldd	r22, Y+4	; 0x04
    2176:	7d 81       	ldd	r23, Y+5	; 0x05
    2178:	62 30       	cpi	r22, 0x02	; 2
    217a:	71 05       	cpc	r23, r1
    217c:	09 f4       	brne	.+2      	; 0x2180 <DIO_vSetPinVal+0x4a>
    217e:	4b c0       	rjmp	.+150    	; 0x2216 <DIO_vSetPinVal+0xe0>
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	83 30       	cpi	r24, 0x03	; 3
    2186:	91 05       	cpc	r25, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <DIO_vSetPinVal+0x56>
    218a:	67 c0       	rjmp	.+206    	; 0x225a <DIO_vSetPinVal+0x124>
    218c:	87 c0       	rjmp	.+270    	; 0x229c <DIO_vSetPinVal+0x166>
	{
	case PORTA_ID:
		WRT_BIT(PORTA, A_u8PinId, A_u8Val);
    218e:	ab e3       	ldi	r26, 0x3B	; 59
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	eb e3       	ldi	r30, 0x3B	; 59
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	48 2f       	mov	r20, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <DIO_vSetPinVal+0x74>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	2a 95       	dec	r18
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <DIO_vSetPinVal+0x70>
    21ae:	80 95       	com	r24
    21b0:	48 23       	and	r20, r24
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	b9 01       	movw	r22, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_vSetPinVal+0x90>
    21c2:	66 0f       	add	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_vSetPinVal+0x8c>
    21ca:	cb 01       	movw	r24, r22
    21cc:	84 2b       	or	r24, r20
    21ce:	8c 93       	st	X, r24
    21d0:	65 c0       	rjmp	.+202    	; 0x229c <DIO_vSetPinVal+0x166>
		break;
	case PORTB_ID:
		WRT_BIT(PORTB, A_u8PinId, A_u8Val);
    21d2:	a8 e3       	ldi	r26, 0x38	; 56
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e8 e3       	ldi	r30, 0x38	; 56
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	48 2f       	mov	r20, r24
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_vSetPinVal+0xb8>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	2a 95       	dec	r18
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_vSetPinVal+0xb4>
    21f2:	80 95       	com	r24
    21f4:	48 23       	and	r20, r24
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	b9 01       	movw	r22, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <DIO_vSetPinVal+0xd4>
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	8a 95       	dec	r24
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <DIO_vSetPinVal+0xd0>
    220e:	cb 01       	movw	r24, r22
    2210:	84 2b       	or	r24, r20
    2212:	8c 93       	st	X, r24
    2214:	43 c0       	rjmp	.+134    	; 0x229c <DIO_vSetPinVal+0x166>
		break;
	case PORTC_ID:
		WRT_BIT(PORTC, A_u8PinId, A_u8Val);
    2216:	a5 e3       	ldi	r26, 0x35	; 53
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e3       	ldi	r30, 0x35	; 53
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <DIO_vSetPinVal+0xfc>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	2a 95       	dec	r18
    2234:	e2 f7       	brpl	.-8      	; 0x222e <DIO_vSetPinVal+0xf8>
    2236:	80 95       	com	r24
    2238:	48 23       	and	r20, r24
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	b9 01       	movw	r22, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <DIO_vSetPinVal+0x118>
    224a:	66 0f       	add	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <DIO_vSetPinVal+0x114>
    2252:	cb 01       	movw	r24, r22
    2254:	84 2b       	or	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	21 c0       	rjmp	.+66     	; 0x229c <DIO_vSetPinVal+0x166>
		break;
	case PORTD_ID:
		WRT_BIT(PORTD, A_u8PinId, A_u8Val);
    225a:	a2 e3       	ldi	r26, 0x32	; 50
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e2 e3       	ldi	r30, 0x32	; 50
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_vSetPinVal+0x140>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	2a 95       	dec	r18
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_vSetPinVal+0x13c>
    227a:	80 95       	com	r24
    227c:	48 23       	and	r20, r24
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	b9 01       	movw	r22, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_vSetPinVal+0x15c>
    228e:	66 0f       	add	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	8a 95       	dec	r24
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_vSetPinVal+0x158>
    2296:	cb 01       	movw	r24, r22
    2298:	84 2b       	or	r24, r20
    229a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <DIO_vTogPinVal>:
void DIO_vTogPinVal(u8 A_u8PortId, u8 A_u8PinId)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <DIO_vTogPinVal+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <DIO_vTogPinVal+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	6a 83       	std	Y+2, r22	; 0x02

	switch (A_u8PortId)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3c 83       	std	Y+4, r19	; 0x04
    22c4:	2b 83       	std	Y+3, r18	; 0x03
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	91 05       	cpc	r25, r1
    22ce:	49 f1       	breq	.+82     	; 0x2322 <DIO_vTogPinVal+0x76>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <DIO_vTogPinVal+0x38>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 f0       	breq	.+24     	; 0x22fa <DIO_vTogPinVal+0x4e>
    22e2:	5a c0       	rjmp	.+180    	; 0x2398 <DIO_vTogPinVal+0xec>
    22e4:	2b 81       	ldd	r18, Y+3	; 0x03
    22e6:	3c 81       	ldd	r19, Y+4	; 0x04
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	71 f1       	breq	.+92     	; 0x234a <DIO_vTogPinVal+0x9e>
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	91 05       	cpc	r25, r1
    22f6:	e9 f1       	breq	.+122    	; 0x2372 <DIO_vTogPinVal+0xc6>
    22f8:	4f c0       	rjmp	.+158    	; 0x2398 <DIO_vTogPinVal+0xec>
	{
	case PORTA_ID:
		TOG_BIT(PORTA, A_u8PinId);
    22fa:	ab e3       	ldi	r26, 0x3B	; 59
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	eb e3       	ldi	r30, 0x3B	; 59
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <DIO_vTogPinVal+0x6c>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <DIO_vTogPinVal+0x68>
    231c:	84 27       	eor	r24, r20
    231e:	8c 93       	st	X, r24
    2320:	3b c0       	rjmp	.+118    	; 0x2398 <DIO_vTogPinVal+0xec>
		break;
	case PORTB_ID:
		TOG_BIT(PORTB, A_u8PinId);
    2322:	a8 e3       	ldi	r26, 0x38	; 56
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e8 e3       	ldi	r30, 0x38	; 56
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	48 2f       	mov	r20, r24
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 2e       	mov	r0, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_vTogPinVal+0x94>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DIO_vTogPinVal+0x90>
    2344:	84 27       	eor	r24, r20
    2346:	8c 93       	st	X, r24
    2348:	27 c0       	rjmp	.+78     	; 0x2398 <DIO_vTogPinVal+0xec>
		break;
	case PORTC_ID:
		TOG_BIT(PORTC, A_u8PinId);
    234a:	a5 e3       	ldi	r26, 0x35	; 53
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e5 e3       	ldi	r30, 0x35	; 53
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_vTogPinVal+0xbc>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_vTogPinVal+0xb8>
    236c:	84 27       	eor	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	13 c0       	rjmp	.+38     	; 0x2398 <DIO_vTogPinVal+0xec>
		break;
	case PORTD_ID:
		TOG_BIT(PORTD, A_u8PinId);
    2372:	a2 e3       	ldi	r26, 0x32	; 50
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e2 e3       	ldi	r30, 0x32	; 50
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <DIO_vTogPinVal+0xe4>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <DIO_vTogPinVal+0xe0>
    2394:	84 27       	eor	r24, r20
    2396:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 A_u8PortId, u8 A_u8PinId)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <DIO_u8GetPinVal+0x6>
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <DIO_u8GetPinVal+0x8>
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_PinVal;
	switch (A_u8PortId)
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3d 83       	std	Y+5, r19	; 0x05
    23c0:	2c 83       	std	Y+4, r18	; 0x04
    23c2:	4c 81       	ldd	r20, Y+4	; 0x04
    23c4:	5d 81       	ldd	r21, Y+5	; 0x05
    23c6:	41 30       	cpi	r20, 0x01	; 1
    23c8:	51 05       	cpc	r21, r1
    23ca:	41 f1       	breq	.+80     	; 0x241c <DIO_u8GetPinVal+0x76>
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	9d 81       	ldd	r25, Y+5	; 0x05
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	91 05       	cpc	r25, r1
    23d4:	34 f4       	brge	.+12     	; 0x23e2 <DIO_u8GetPinVal+0x3c>
    23d6:	2c 81       	ldd	r18, Y+4	; 0x04
    23d8:	3d 81       	ldd	r19, Y+5	; 0x05
    23da:	21 15       	cp	r18, r1
    23dc:	31 05       	cpc	r19, r1
    23de:	61 f0       	breq	.+24     	; 0x23f8 <DIO_u8GetPinVal+0x52>
    23e0:	52 c0       	rjmp	.+164    	; 0x2486 <DIO_u8GetPinVal+0xe0>
    23e2:	4c 81       	ldd	r20, Y+4	; 0x04
    23e4:	5d 81       	ldd	r21, Y+5	; 0x05
    23e6:	42 30       	cpi	r20, 0x02	; 2
    23e8:	51 05       	cpc	r21, r1
    23ea:	51 f1       	breq	.+84     	; 0x2440 <DIO_u8GetPinVal+0x9a>
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	9d 81       	ldd	r25, Y+5	; 0x05
    23f0:	83 30       	cpi	r24, 0x03	; 3
    23f2:	91 05       	cpc	r25, r1
    23f4:	b9 f1       	breq	.+110    	; 0x2464 <DIO_u8GetPinVal+0xbe>
    23f6:	47 c0       	rjmp	.+142    	; 0x2486 <DIO_u8GetPinVal+0xe0>
	{
	case PORTA_ID:
		L_PinVal = READ_BIT(PINA, A_u8PinId);
    23f8:	ea e3       	ldi	r30, 0x3A	; 58
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a9 01       	movw	r20, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <DIO_u8GetPinVal+0x6a>
    240c:	55 95       	asr	r21
    240e:	47 95       	ror	r20
    2410:	8a 95       	dec	r24
    2412:	e2 f7       	brpl	.-8      	; 0x240c <DIO_u8GetPinVal+0x66>
    2414:	ca 01       	movw	r24, r20
    2416:	81 70       	andi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	35 c0       	rjmp	.+106    	; 0x2486 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTB_ID:
		L_PinVal = READ_BIT(PINB, A_u8PinId);
    241c:	e6 e3       	ldi	r30, 0x36	; 54
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a9 01       	movw	r20, r18
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <DIO_u8GetPinVal+0x8e>
    2430:	55 95       	asr	r21
    2432:	47 95       	ror	r20
    2434:	8a 95       	dec	r24
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <DIO_u8GetPinVal+0x8a>
    2438:	ca 01       	movw	r24, r20
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	23 c0       	rjmp	.+70     	; 0x2486 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTC_ID:
		L_PinVal = READ_BIT(PINC, A_u8PinId);
    2440:	e3 e3       	ldi	r30, 0x33	; 51
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a9 01       	movw	r20, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_u8GetPinVal+0xb2>
    2454:	55 95       	asr	r21
    2456:	47 95       	ror	r20
    2458:	8a 95       	dec	r24
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <DIO_u8GetPinVal+0xae>
    245c:	ca 01       	movw	r24, r20
    245e:	81 70       	andi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	11 c0       	rjmp	.+34     	; 0x2486 <DIO_u8GetPinVal+0xe0>
		break;
	case PORTD_ID:
		L_PinVal = READ_BIT(PIND, A_u8PinId);
    2464:	e0 e3       	ldi	r30, 0x30	; 48
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a9 01       	movw	r20, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <DIO_u8GetPinVal+0xd6>
    2478:	55 95       	asr	r21
    247a:	47 95       	ror	r20
    247c:	8a 95       	dec	r24
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <DIO_u8GetPinVal+0xd2>
    2480:	ca 01       	movw	r24, r20
    2482:	81 70       	andi	r24, 0x01	; 1
    2484:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return L_PinVal;
    2486:	89 81       	ldd	r24, Y+1	; 0x01
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <DIO_vSetPortDir>:

void DIO_vSetPortDir(u8 A_u8PortId, u8 A_u8Dir)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <DIO_vSetPortDir+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <DIO_vSetPortDir+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3c 83       	std	Y+4, r19	; 0x04
    24b0:	2b 83       	std	Y+3, r18	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	91 05       	cpc	r25, r1
    24ba:	d1 f0       	breq	.+52     	; 0x24f0 <DIO_vSetPortDir+0x58>
    24bc:	2b 81       	ldd	r18, Y+3	; 0x03
    24be:	3c 81       	ldd	r19, Y+4	; 0x04
    24c0:	22 30       	cpi	r18, 0x02	; 2
    24c2:	31 05       	cpc	r19, r1
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <DIO_vSetPortDir+0x38>
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	61 f0       	breq	.+24     	; 0x24e6 <DIO_vSetPortDir+0x4e>
    24ce:	1e c0       	rjmp	.+60     	; 0x250c <DIO_vSetPortDir+0x74>
    24d0:	2b 81       	ldd	r18, Y+3	; 0x03
    24d2:	3c 81       	ldd	r19, Y+4	; 0x04
    24d4:	22 30       	cpi	r18, 0x02	; 2
    24d6:	31 05       	cpc	r19, r1
    24d8:	81 f0       	breq	.+32     	; 0x24fa <DIO_vSetPortDir+0x62>
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	91 05       	cpc	r25, r1
    24e2:	81 f0       	breq	.+32     	; 0x2504 <DIO_vSetPortDir+0x6c>
    24e4:	13 c0       	rjmp	.+38     	; 0x250c <DIO_vSetPortDir+0x74>
	{
	case PORTA_ID:
		DDRA = A_u8Dir;
    24e6:	ea e3       	ldi	r30, 0x3A	; 58
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	80 83       	st	Z, r24
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <DIO_vSetPortDir+0x74>
		break;
	case PORTB_ID:
		DDRB = A_u8Dir;
    24f0:	e7 e3       	ldi	r30, 0x37	; 55
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	80 83       	st	Z, r24
    24f8:	09 c0       	rjmp	.+18     	; 0x250c <DIO_vSetPortDir+0x74>
		break;
	case PORTC_ID:
		DDRC = A_u8Dir;
    24fa:	e4 e3       	ldi	r30, 0x34	; 52
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	80 83       	st	Z, r24
    2502:	04 c0       	rjmp	.+8      	; 0x250c <DIO_vSetPortDir+0x74>
		break;
	case PORTD_ID:
		DDRD = A_u8Dir;
    2504:	e1 e3       	ldi	r30, 0x31	; 49
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <DIO_vSetPortVal>:
void DIO_vSetPortVal(u8 A_u8PortId, u8 A_u8Val)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <DIO_vSetPortVal+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <DIO_vSetPortVal+0x8>
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	3c 83       	std	Y+4, r19	; 0x04
    2532:	2b 83       	std	Y+3, r18	; 0x03
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	81 30       	cpi	r24, 0x01	; 1
    253a:	91 05       	cpc	r25, r1
    253c:	d1 f0       	breq	.+52     	; 0x2572 <DIO_vSetPortVal+0x58>
    253e:	2b 81       	ldd	r18, Y+3	; 0x03
    2540:	3c 81       	ldd	r19, Y+4	; 0x04
    2542:	22 30       	cpi	r18, 0x02	; 2
    2544:	31 05       	cpc	r19, r1
    2546:	2c f4       	brge	.+10     	; 0x2552 <DIO_vSetPortVal+0x38>
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	61 f0       	breq	.+24     	; 0x2568 <DIO_vSetPortVal+0x4e>
    2550:	1e c0       	rjmp	.+60     	; 0x258e <DIO_vSetPortVal+0x74>
    2552:	2b 81       	ldd	r18, Y+3	; 0x03
    2554:	3c 81       	ldd	r19, Y+4	; 0x04
    2556:	22 30       	cpi	r18, 0x02	; 2
    2558:	31 05       	cpc	r19, r1
    255a:	81 f0       	breq	.+32     	; 0x257c <DIO_vSetPortVal+0x62>
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	83 30       	cpi	r24, 0x03	; 3
    2562:	91 05       	cpc	r25, r1
    2564:	81 f0       	breq	.+32     	; 0x2586 <DIO_vSetPortVal+0x6c>
    2566:	13 c0       	rjmp	.+38     	; 0x258e <DIO_vSetPortVal+0x74>
	{
	case PORTA_ID:
		PORTA = A_u8Val;
    2568:	eb e3       	ldi	r30, 0x3B	; 59
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	80 83       	st	Z, r24
    2570:	0e c0       	rjmp	.+28     	; 0x258e <DIO_vSetPortVal+0x74>
		break;
	case PORTB_ID:
		PORTB = A_u8Val;
    2572:	e8 e3       	ldi	r30, 0x38	; 56
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	80 83       	st	Z, r24
    257a:	09 c0       	rjmp	.+18     	; 0x258e <DIO_vSetPortVal+0x74>
		break;
	case PORTC_ID:
		PORTC = A_u8Val;
    257c:	e5 e3       	ldi	r30, 0x35	; 53
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	80 83       	st	Z, r24
    2584:	04 c0       	rjmp	.+8      	; 0x258e <DIO_vSetPortVal+0x74>
		break;
	case PORTD_ID:
		PORTD = A_u8Val;
    2586:	e2 e3       	ldi	r30, 0x32	; 50
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <DIO_vTogPortVal>:
void DIO_vTogPortVal(u8 A_u8PortId)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <DIO_vTogPortVal+0x6>
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8PortId)
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	3b 83       	std	Y+3, r19	; 0x03
    25b2:	2a 83       	std	Y+2, r18	; 0x02
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	91 05       	cpc	r25, r1
    25bc:	e9 f0       	breq	.+58     	; 0x25f8 <DIO_vTogPortVal+0x5c>
    25be:	2a 81       	ldd	r18, Y+2	; 0x02
    25c0:	3b 81       	ldd	r19, Y+3	; 0x03
    25c2:	22 30       	cpi	r18, 0x02	; 2
    25c4:	31 05       	cpc	r19, r1
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <DIO_vTogPortVal+0x36>
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	61 f0       	breq	.+24     	; 0x25e8 <DIO_vTogPortVal+0x4c>
    25d0:	2a c0       	rjmp	.+84     	; 0x2626 <DIO_vTogPortVal+0x8a>
    25d2:	2a 81       	ldd	r18, Y+2	; 0x02
    25d4:	3b 81       	ldd	r19, Y+3	; 0x03
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	b1 f0       	breq	.+44     	; 0x2608 <DIO_vTogPortVal+0x6c>
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	91 05       	cpc	r25, r1
    25e4:	c9 f0       	breq	.+50     	; 0x2618 <DIO_vTogPortVal+0x7c>
    25e6:	1f c0       	rjmp	.+62     	; 0x2626 <DIO_vTogPortVal+0x8a>
	{
	case PORTA_ID:
		PORTA ^= 0xff;
    25e8:	ab e3       	ldi	r26, 0x3B	; 59
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	eb e3       	ldi	r30, 0x3B	; 59
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 95       	com	r24
    25f4:	8c 93       	st	X, r24
    25f6:	17 c0       	rjmp	.+46     	; 0x2626 <DIO_vTogPortVal+0x8a>
		break;
	case PORTB_ID:
		PORTB ^= 0xff;
    25f8:	a8 e3       	ldi	r26, 0x38	; 56
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e8 e3       	ldi	r30, 0x38	; 56
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 95       	com	r24
    2604:	8c 93       	st	X, r24
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <DIO_vTogPortVal+0x8a>
		break;
	case PORTC_ID:
		PORTC ^= 0xff;
    2608:	a5 e3       	ldi	r26, 0x35	; 53
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e5 e3       	ldi	r30, 0x35	; 53
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 95       	com	r24
    2614:	8c 93       	st	X, r24
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <DIO_vTogPortVal+0x8a>
		break;
	case PORTD_ID:
		PORTD ^= 0xff;
    2618:	a2 e3       	ldi	r26, 0x32	; 50
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e2 e3       	ldi	r30, 0x32	; 50
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	80 95       	com	r24
    2624:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <DIO_u8GetPortVal>:
u8 DIO_u8GetPortVal(u8 A_u8PortId)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	00 d0       	rcall	.+0      	; 0x2638 <DIO_u8GetPortVal+0x6>
    2638:	00 d0       	rcall	.+0      	; 0x263a <DIO_u8GetPortVal+0x8>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal;
	switch (A_u8PortId)
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	3c 83       	std	Y+4, r19	; 0x04
    2648:	2b 83       	std	Y+3, r18	; 0x03
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	91 05       	cpc	r25, r1
    2652:	d1 f0       	breq	.+52     	; 0x2688 <DIO_u8GetPortVal+0x56>
    2654:	2b 81       	ldd	r18, Y+3	; 0x03
    2656:	3c 81       	ldd	r19, Y+4	; 0x04
    2658:	22 30       	cpi	r18, 0x02	; 2
    265a:	31 05       	cpc	r19, r1
    265c:	2c f4       	brge	.+10     	; 0x2668 <DIO_u8GetPortVal+0x36>
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	61 f0       	breq	.+24     	; 0x267e <DIO_u8GetPortVal+0x4c>
    2666:	1e c0       	rjmp	.+60     	; 0x26a4 <DIO_u8GetPortVal+0x72>
    2668:	2b 81       	ldd	r18, Y+3	; 0x03
    266a:	3c 81       	ldd	r19, Y+4	; 0x04
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	81 f0       	breq	.+32     	; 0x2692 <DIO_u8GetPortVal+0x60>
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	91 05       	cpc	r25, r1
    267a:	81 f0       	breq	.+32     	; 0x269c <DIO_u8GetPortVal+0x6a>
    267c:	13 c0       	rjmp	.+38     	; 0x26a4 <DIO_u8GetPortVal+0x72>
	{
	case PORTA_ID:
		L_u8PortVal = PINA;
    267e:	ea e3       	ldi	r30, 0x3A	; 58
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	0e c0       	rjmp	.+28     	; 0x26a4 <DIO_u8GetPortVal+0x72>
		break;
	case PORTB_ID:
		L_u8PortVal = PINB;
    2688:	e6 e3       	ldi	r30, 0x36	; 54
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <DIO_u8GetPortVal+0x72>
		break;
	case PORTC_ID:
		L_u8PortVal = PINC;
    2692:	e3 e3       	ldi	r30, 0x33	; 51
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <DIO_u8GetPortVal+0x72>
		break;
	case PORTD_ID:
		L_u8PortVal = PIND;
    269c:	e0 e3       	ldi	r30, 0x30	; 48
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return L_u8PortVal;
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <ADC_vInit>:
#include "ADC_pri.h"
#include "ADC_cfg.h"
#include "ADC_int.h"
FUNC_PTR_Iu16_OV G_vISRptr;
void ADC_vInit(void)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    /*Set Reference REFS1 REFS0 AVCC with external capcitor 0 1 */
    SET_BIT(ADMUX, REFS0);
    26bc:	a7 e2       	ldi	r26, 0x27	; 39
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e7 e2       	ldi	r30, 0x27	; 39
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 64       	ori	r24, 0x40	; 64
    26c8:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, REFS1);
    26ca:	a7 e2       	ldi	r26, 0x27	; 39
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e7 e2       	ldi	r30, 0x27	; 39
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8f 77       	andi	r24, 0x7F	; 127
    26d6:	8c 93       	st	X, r24
    /*Enable ADC*/
    SET_BIT(ADCSRA, ADEN);
    26d8:	a6 e2       	ldi	r26, 0x26	; 38
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e6 e2       	ldi	r30, 0x26	; 38
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 68       	ori	r24, 0x80	; 128
    26e4:	8c 93       	st	X, r24
    /*Set ADLAR to right adjustment set it to 0*/
    CLR_BIT(ADMUX, ADLAR);
    26e6:	a7 e2       	ldi	r26, 0x27	; 39
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e7 e2       	ldi	r30, 0x27	; 39
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7d       	andi	r24, 0xDF	; 223
    26f2:	8c 93       	st	X, r24
    /* Set prescaler to 128 */
    ADCSRA = (ADCSRA & MASK_PRESCALER_VALUE) | PRESCALER_MODE;
    26f4:	a6 e2       	ldi	r26, 0x26	; 38
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e6 e2       	ldi	r30, 0x26	; 38
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	87 60       	ori	r24, 0x07	; 7
    2700:	8c 93       	st	X, r24
    /*if we use auto trigger set it*/
}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <ADC_u16ReadDigitalDataSync>:
u16 ADC_u16ReadDigitalDataSync(u8 A_u8AdcChannel)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	89 83       	std	Y+1, r24	; 0x01
    /*SELECT THE CHANNEL*/
    ADMUX = (ADMUX & 0xE0) | A_u8AdcChannel;
    2714:	a7 e2       	ldi	r26, 0x27	; 39
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e7 e2       	ldi	r30, 0x27	; 39
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	98 2f       	mov	r25, r24
    2720:	90 7e       	andi	r25, 0xE0	; 224
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	89 2b       	or	r24, r25
    2726:	8c 93       	st	X, r24
    /*START CONVERSION*/
    SET_BIT(ADCSRA, ADSC);
    2728:	a6 e2       	ldi	r26, 0x26	; 38
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e6 e2       	ldi	r30, 0x26	; 38
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	80 64       	ori	r24, 0x40	; 64
    2734:	8c 93       	st	X, r24
    /*Wait for conversion to end*/
    while (READ_BIT(ADCSRA, ADIF) == 0)
    2736:	e6 e2       	ldi	r30, 0x26	; 38
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	82 95       	swap	r24
    273e:	8f 70       	andi	r24, 0x0F	; 15
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	81 70       	andi	r24, 0x01	; 1
    2746:	90 70       	andi	r25, 0x00	; 0
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	a9 f3       	breq	.-22     	; 0x2736 <ADC_u16ReadDigitalDataSync+0x2e>
    {
        /*Wait*/
    }
    SET_BIT(ADCSRA, ADIF);
    274c:	a6 e2       	ldi	r26, 0x26	; 38
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e6 e2       	ldi	r30, 0x26	; 38
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	80 61       	ori	r24, 0x10	; 16
    2758:	8c 93       	st	X, r24

    return ADCW;
    275a:	e4 e2       	ldi	r30, 0x24	; 36
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
}
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <ADC_vReadDigitalDataAsync>:
void ADC_vReadDigitalDataAsync(FUNC_PTR_Iu16_OV A_PTR_FUNC, u8 A_u8AdcChannel)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <ADC_vReadDigitalDataAsync+0x6>
    2770:	0f 92       	push	r0
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	6b 83       	std	Y+3, r22	; 0x03
    /*SELECT THE CHANNEL*/
    ADMUX = (ADMUX & 0xE0) | A_u8AdcChannel;
    277c:	a7 e2       	ldi	r26, 0x27	; 39
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e7 e2       	ldi	r30, 0x27	; 39
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	98 2f       	mov	r25, r24
    2788:	90 7e       	andi	r25, 0xE0	; 224
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	89 2b       	or	r24, r25
    278e:	8c 93       	st	X, r24
    /*Enable Interrupt*/
    SET_BIT(ADCSRA, ADIE);
    2790:	a6 e2       	ldi	r26, 0x26	; 38
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e6 e2       	ldi	r30, 0x26	; 38
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 60       	ori	r24, 0x08	; 8
    279c:	8c 93       	st	X, r24
    /*Assign Function*/
    G_vISRptr = A_PTR_FUNC;
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	90 93 3b 02 	sts	0x023B, r25
    27a6:	80 93 3a 02 	sts	0x023A, r24
    /*START CONVERSION*/
    SET_BIT(ADCSRA, ADSC);
    27aa:	a6 e2       	ldi	r26, 0x26	; 38
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e6 e2       	ldi	r30, 0x26	; 38
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 64       	ori	r24, 0x40	; 64
    27b6:	8c 93       	st	X, r24
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <__vector_16>:

void __vector_16(void)
{
    27c4:	1f 92       	push	r1
    27c6:	0f 92       	push	r0
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	0f 92       	push	r0
    27cc:	11 24       	eor	r1, r1
    27ce:	2f 93       	push	r18
    27d0:	3f 93       	push	r19
    27d2:	4f 93       	push	r20
    27d4:	5f 93       	push	r21
    27d6:	6f 93       	push	r22
    27d8:	7f 93       	push	r23
    27da:	8f 93       	push	r24
    27dc:	9f 93       	push	r25
    27de:	af 93       	push	r26
    27e0:	bf 93       	push	r27
    27e2:	ef 93       	push	r30
    27e4:	ff 93       	push	r31
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62

    G_vISRptr(ADCW);
    27ee:	20 91 3a 02 	lds	r18, 0x023A
    27f2:	30 91 3b 02 	lds	r19, 0x023B
    27f6:	e4 e2       	ldi	r30, 0x24	; 36
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	f9 01       	movw	r30, r18
    2800:	09 95       	icall
    /*Disable The ADC Interrupt*/
    CLR_BIT(ADCSRA, ADIE);
    2802:	a6 e2       	ldi	r26, 0x26	; 38
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e6 e2       	ldi	r30, 0x26	; 38
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	87 7f       	andi	r24, 0xF7	; 247
    280e:	8c 93       	st	X, r24
}
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	ff 91       	pop	r31
    2816:	ef 91       	pop	r30
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	0f 90       	pop	r0
    2832:	1f 90       	pop	r1
    2834:	18 95       	reti

00002836 <TRANSISTOR_vInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include "TRANSISTORS_pri.h"
#include "TRANSISTORS_cfg.h"
#include "TRANSISTORS_int.h"
void TRANSISTOR_vInit(u8 A_u8TransID)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	00 d0       	rcall	.+0      	; 0x283c <TRANSISTOR_vInit+0x6>
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	3b 83       	std	Y+3, r19	; 0x03
    284c:	2a 83       	std	Y+2, r18	; 0x02
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	9b 81       	ldd	r25, Y+3	; 0x03
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	91 05       	cpc	r25, r1
    2856:	d9 f0       	breq	.+54     	; 0x288e <TRANSISTOR_vInit+0x58>
    2858:	2a 81       	ldd	r18, Y+2	; 0x02
    285a:	3b 81       	ldd	r19, Y+3	; 0x03
    285c:	22 30       	cpi	r18, 0x02	; 2
    285e:	31 05       	cpc	r19, r1
    2860:	2c f4       	brge	.+10     	; 0x286c <TRANSISTOR_vInit+0x36>
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	61 f0       	breq	.+24     	; 0x2882 <TRANSISTOR_vInit+0x4c>
    286a:	22 c0       	rjmp	.+68     	; 0x28b0 <TRANSISTOR_vInit+0x7a>
    286c:	2a 81       	ldd	r18, Y+2	; 0x02
    286e:	3b 81       	ldd	r19, Y+3	; 0x03
    2870:	22 30       	cpi	r18, 0x02	; 2
    2872:	31 05       	cpc	r19, r1
    2874:	91 f0       	breq	.+36     	; 0x289a <TRANSISTOR_vInit+0x64>
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	83 30       	cpi	r24, 0x03	; 3
    287c:	91 05       	cpc	r25, r1
    287e:	99 f0       	breq	.+38     	; 0x28a6 <TRANSISTOR_vInit+0x70>
    2880:	17 c0       	rjmp	.+46     	; 0x28b0 <TRANSISTOR_vInit+0x7a>
    {
    case TRANS0:
        DIO_vSetPinDir(TRANS0_PORT, TRANS0_PIN, DIR_OUTPUT);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	67 e0       	ldi	r22, 0x07	; 7
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    288c:	11 c0       	rjmp	.+34     	; 0x28b0 <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinDir(TRANS1_PORT, TRANS1_PIN, DIR_OUTPUT);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	66 e0       	ldi	r22, 0x06	; 6
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2898:	0b c0       	rjmp	.+22     	; 0x28b0 <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinDir(TRANS2_PORT, TRANS2_PIN, DIR_OUTPUT);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	67 e0       	ldi	r22, 0x07	; 7
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <TRANSISTOR_vInit+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinDir(TRANS3_PORT, TRANS3_PIN, DIR_OUTPUT);
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	66 e0       	ldi	r22, 0x06	; 6
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        break;

    default:
        break;
    }
}
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <TRANSISTOR_vTurnOn>:
void TRANSISTOR_vTurnOn(u8 A_u8TransID)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <TRANSISTOR_vTurnOn+0x6>
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	3b 83       	std	Y+3, r19	; 0x03
    28d2:	2a 83       	std	Y+2, r18	; 0x02
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	9b 81       	ldd	r25, Y+3	; 0x03
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	91 05       	cpc	r25, r1
    28dc:	d9 f0       	breq	.+54     	; 0x2914 <TRANSISTOR_vTurnOn+0x58>
    28de:	2a 81       	ldd	r18, Y+2	; 0x02
    28e0:	3b 81       	ldd	r19, Y+3	; 0x03
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	2c f4       	brge	.+10     	; 0x28f2 <TRANSISTOR_vTurnOn+0x36>
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	61 f0       	breq	.+24     	; 0x2908 <TRANSISTOR_vTurnOn+0x4c>
    28f0:	22 c0       	rjmp	.+68     	; 0x2936 <TRANSISTOR_vTurnOn+0x7a>
    28f2:	2a 81       	ldd	r18, Y+2	; 0x02
    28f4:	3b 81       	ldd	r19, Y+3	; 0x03
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	91 f0       	breq	.+36     	; 0x2920 <TRANSISTOR_vTurnOn+0x64>
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	91 05       	cpc	r25, r1
    2904:	99 f0       	breq	.+38     	; 0x292c <TRANSISTOR_vTurnOn+0x70>
    2906:	17 c0       	rjmp	.+46     	; 0x2936 <TRANSISTOR_vTurnOn+0x7a>
    {
    case TRANS0:
        DIO_vSetPinVal(TRANS0_PORT, TRANS0_PIN, HIGH);
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	67 e0       	ldi	r22, 0x07	; 7
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2912:	11 c0       	rjmp	.+34     	; 0x2936 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinVal(TRANS1_PORT, TRANS1_PIN, HIGH);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	66 e0       	ldi	r22, 0x06	; 6
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    291e:	0b c0       	rjmp	.+22     	; 0x2936 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinVal(TRANS2_PORT, TRANS2_PIN, HIGH);
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	67 e0       	ldi	r22, 0x07	; 7
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    292a:	05 c0       	rjmp	.+10     	; 0x2936 <TRANSISTOR_vTurnOn+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinVal(TRANS3_PORT, TRANS3_PIN, HIGH);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	66 e0       	ldi	r22, 0x06	; 6
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;

    default:
        break;
    }
}
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <TRANSISTOR_vTurnOff>:
void TRANSISTOR_vTurnOff(u8 A_u8TransID)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <TRANSISTOR_vTurnOff+0x6>
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8TransID)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	3b 83       	std	Y+3, r19	; 0x03
    2958:	2a 83       	std	Y+2, r18	; 0x02
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	9b 81       	ldd	r25, Y+3	; 0x03
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	91 05       	cpc	r25, r1
    2962:	d9 f0       	breq	.+54     	; 0x299a <TRANSISTOR_vTurnOff+0x58>
    2964:	2a 81       	ldd	r18, Y+2	; 0x02
    2966:	3b 81       	ldd	r19, Y+3	; 0x03
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	31 05       	cpc	r19, r1
    296c:	2c f4       	brge	.+10     	; 0x2978 <TRANSISTOR_vTurnOff+0x36>
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	61 f0       	breq	.+24     	; 0x298e <TRANSISTOR_vTurnOff+0x4c>
    2976:	22 c0       	rjmp	.+68     	; 0x29bc <TRANSISTOR_vTurnOff+0x7a>
    2978:	2a 81       	ldd	r18, Y+2	; 0x02
    297a:	3b 81       	ldd	r19, Y+3	; 0x03
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	91 f0       	breq	.+36     	; 0x29a6 <TRANSISTOR_vTurnOff+0x64>
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	9b 81       	ldd	r25, Y+3	; 0x03
    2986:	83 30       	cpi	r24, 0x03	; 3
    2988:	91 05       	cpc	r25, r1
    298a:	99 f0       	breq	.+38     	; 0x29b2 <TRANSISTOR_vTurnOff+0x70>
    298c:	17 c0       	rjmp	.+46     	; 0x29bc <TRANSISTOR_vTurnOff+0x7a>
    {
    case TRANS0:
        DIO_vSetPinVal(TRANS0_PORT, TRANS0_PIN, LOW);
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	67 e0       	ldi	r22, 0x07	; 7
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2998:	11 c0       	rjmp	.+34     	; 0x29bc <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS1:
        DIO_vSetPinVal(TRANS1_PORT, TRANS1_PIN, LOW);
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	66 e0       	ldi	r22, 0x06	; 6
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS2:
        DIO_vSetPinVal(TRANS2_PORT, TRANS2_PIN, LOW);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	67 e0       	ldi	r22, 0x07	; 7
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <TRANSISTOR_vTurnOff+0x7a>
        break;
    case TRANS3:
        DIO_vSetPinVal(TRANS3_PORT, TRANS3_PIN, LOW);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	66 e0       	ldi	r22, 0x06	; 6
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;

    default:
        break;
    }
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <TEMPS_vInit>:
#include "TEMPS_cfg.h"
#include "TEMPS_int.h"


void TEMPS_vInit()
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    ADC_vInit();
    29d0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <ADC_vInit>
}
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <TEMPS_f32GetTemp>:

f32 TEMPS_f32GetTemp()
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	2a 97       	sbiw	r28, 0x0a	; 10
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    u16 L_u16ReadingDigital;
    f32 L_u16ReadingAnalogue;
    f32 L_f32Temp;
    L_u16ReadingDigital = ADC_u16ReadDigitalDataSync(TEMP_SENSOR_PIN);
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	0e 94 84 13 	call	0x2708	; 0x2708 <ADC_u16ReadDigitalDataSync>
    29f4:	9a 87       	std	Y+10, r25	; 0x0a
    29f6:	89 87       	std	Y+9, r24	; 0x09
    L_u16ReadingAnalogue = (L_u16ReadingDigital * REFERENCE_VOLTAGE) / TWO_POWER_ADC_RESOLUTION;
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	cc 01       	movw	r24, r24
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e4       	ldi	r19, 0x40	; 64
    2a16:	4c e9       	ldi	r20, 0x9C	; 156
    2a18:	55 e4       	ldi	r21, 0x45	; 69
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	54 e4       	ldi	r21, 0x44	; 68
    2a2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	af 83       	std	Y+7, r26	; 0x07
    2a3c:	b8 87       	std	Y+8, r27	; 0x08
    L_f32Temp = L_u16ReadingAnalogue / 10;
    2a3e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a40:	7e 81       	ldd	r23, Y+6	; 0x06
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
    2a44:	98 85       	ldd	r25, Y+8	; 0x08
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e2       	ldi	r20, 0x20	; 32
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	ab 83       	std	Y+3, r26	; 0x03
    2a5c:	bc 83       	std	Y+4, r27	; 0x04
    return L_f32Temp;
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	ab 81       	ldd	r26, Y+3	; 0x03
    2a64:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	2a 96       	adiw	r28, 0x0a	; 10
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <SWT_vInit>:
#include "SWITCHES_pri.h"
#include "SWITCHES_cfg.h"
#include "SWITCHES_int.h"

void SWT_vInit(u8 A_u8SwtID)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <SWT_vInit+0x6>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <SWT_vInit+0x8>
    2a84:	0f 92       	push	r0
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8SwtID)
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	3d 83       	std	Y+5, r19	; 0x05
    2a94:	2c 83       	std	Y+4, r18	; 0x04
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	d9 f1       	breq	.+118    	; 0x2b16 <SWT_vInit+0x9a>
    2aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa4:	24 30       	cpi	r18, 0x04	; 4
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	7c f4       	brge	.+30     	; 0x2ac8 <SWT_vInit+0x4c>
    2aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2aac:	9d 81       	ldd	r25, Y+5	; 0x05
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	29 f1       	breq	.+74     	; 0x2afe <SWT_vInit+0x82>
    2ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab8:	22 30       	cpi	r18, 0x02	; 2
    2aba:	31 05       	cpc	r19, r1
    2abc:	34 f5       	brge	.+76     	; 0x2b0a <SWT_vInit+0x8e>
    2abe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	b1 f0       	breq	.+44     	; 0x2af2 <SWT_vInit+0x76>
    2ac6:	44 c0       	rjmp	.+136    	; 0x2b50 <SWT_vInit+0xd4>
    2ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aca:	3d 81       	ldd	r19, Y+5	; 0x05
    2acc:	25 30       	cpi	r18, 0x05	; 5
    2ace:	31 05       	cpc	r19, r1
    2ad0:	71 f1       	breq	.+92     	; 0x2b2e <SWT_vInit+0xb2>
    2ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad6:	85 30       	cpi	r24, 0x05	; 5
    2ad8:	91 05       	cpc	r25, r1
    2ada:	1c f1       	brlt	.+70     	; 0x2b22 <SWT_vInit+0xa6>
    2adc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ade:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae0:	26 30       	cpi	r18, 0x06	; 6
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	51 f1       	breq	.+84     	; 0x2b3a <SWT_vInit+0xbe>
    2ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aea:	87 30       	cpi	r24, 0x07	; 7
    2aec:	91 05       	cpc	r25, r1
    2aee:	59 f1       	breq	.+86     	; 0x2b46 <SWT_vInit+0xca>
    2af0:	2f c0       	rjmp	.+94     	; 0x2b50 <SWT_vInit+0xd4>
    {
    case SWT0:
        DIO_vSetPinDir(SWT0_PORT, SWT0_PIN, DIR_INPUT);
    2af2:	83 e0       	ldi	r24, 0x03	; 3
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2afc:	29 c0       	rjmp	.+82     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT1:
        DIO_vSetPinDir(SWT1_PORT, SWT1_PIN, DIR_INPUT);
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b08:	23 c0       	rjmp	.+70     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT2:
        DIO_vSetPinDir(SWT2_PORT, SWT2_PIN, DIR_INPUT);
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b14:	1d c0       	rjmp	.+58     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT3:
        DIO_vSetPinDir(SWT3_PORT, SWT3_PIN, DIR_INPUT);
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	63 e0       	ldi	r22, 0x03	; 3
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b20:	17 c0       	rjmp	.+46     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT4:
        DIO_vSetPinDir(SWT4_PORT, SWT4_PIN, DIR_INPUT);
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b2c:	11 c0       	rjmp	.+34     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT5:
        DIO_vSetPinDir(SWT5_PORT, SWT5_PIN, DIR_INPUT);
    2b2e:	83 e0       	ldi	r24, 0x03	; 3
    2b30:	65 e0       	ldi	r22, 0x05	; 5
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b38:	0b c0       	rjmp	.+22     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT6:
        DIO_vSetPinDir(SWT6_PORT, SWT6_PIN, DIR_INPUT);
    2b3a:	83 e0       	ldi	r24, 0x03	; 3
    2b3c:	66 e0       	ldi	r22, 0x06	; 6
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    2b44:	05 c0       	rjmp	.+10     	; 0x2b50 <SWT_vInit+0xd4>
        break;
    case SWT7:
        DIO_vSetPinDir(SWT7_PORT, SWT7_PIN, DIR_INPUT);
    2b46:	83 e0       	ldi	r24, 0x03	; 3
    2b48:	67 e0       	ldi	r22, 0x07	; 7
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        break;
    default:
        break;
    }
#if SWT_PULLING == INTERNAL_PULLUP
    switch (A_u8SwtID)
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3b 83       	std	Y+3, r19	; 0x03
    2b58:	2a 83       	std	Y+2, r18	; 0x02
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5e:	83 30       	cpi	r24, 0x03	; 3
    2b60:	91 05       	cpc	r25, r1
    2b62:	d9 f1       	breq	.+118    	; 0x2bda <SWT_vInit+0x15e>
    2b64:	2a 81       	ldd	r18, Y+2	; 0x02
    2b66:	3b 81       	ldd	r19, Y+3	; 0x03
    2b68:	24 30       	cpi	r18, 0x04	; 4
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	7c f4       	brge	.+30     	; 0x2b8c <SWT_vInit+0x110>
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	91 05       	cpc	r25, r1
    2b76:	29 f1       	breq	.+74     	; 0x2bc2 <SWT_vInit+0x146>
    2b78:	2a 81       	ldd	r18, Y+2	; 0x02
    2b7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b7c:	22 30       	cpi	r18, 0x02	; 2
    2b7e:	31 05       	cpc	r19, r1
    2b80:	34 f5       	brge	.+76     	; 0x2bce <SWT_vInit+0x152>
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	9b 81       	ldd	r25, Y+3	; 0x03
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	b1 f0       	breq	.+44     	; 0x2bb6 <SWT_vInit+0x13a>
    2b8a:	44 c0       	rjmp	.+136    	; 0x2c14 <SWT_vInit+0x198>
    2b8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b8e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b90:	25 30       	cpi	r18, 0x05	; 5
    2b92:	31 05       	cpc	r19, r1
    2b94:	71 f1       	breq	.+92     	; 0x2bf2 <SWT_vInit+0x176>
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	85 30       	cpi	r24, 0x05	; 5
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	1c f1       	brlt	.+70     	; 0x2be6 <SWT_vInit+0x16a>
    2ba0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba4:	26 30       	cpi	r18, 0x06	; 6
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	51 f1       	breq	.+84     	; 0x2bfe <SWT_vInit+0x182>
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	87 30       	cpi	r24, 0x07	; 7
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	59 f1       	breq	.+86     	; 0x2c0a <SWT_vInit+0x18e>
    2bb4:	2f c0       	rjmp	.+94     	; 0x2c14 <SWT_vInit+0x198>
    {
    case SWT0:
        DIO_vSetPinVal(SWT0_PORT, SWT0_PIN, HIGH);
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2bc0:	29 c0       	rjmp	.+82     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT1:
        DIO_vSetPinVal(SWT1_PORT, SWT1_PIN, HIGH);
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2bcc:	23 c0       	rjmp	.+70     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT2:
        DIO_vSetPinVal(SWT2_PORT, SWT2_PIN, HIGH);
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	62 e0       	ldi	r22, 0x02	; 2
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2bd8:	1d c0       	rjmp	.+58     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT3:
        DIO_vSetPinVal(SWT3_PORT, SWT3_PIN, HIGH);
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	63 e0       	ldi	r22, 0x03	; 3
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2be4:	17 c0       	rjmp	.+46     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT4:
        DIO_vSetPinVal(SWT4_PORT, SWT4_PIN, HIGH);
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	64 e0       	ldi	r22, 0x04	; 4
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2bf0:	11 c0       	rjmp	.+34     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT5:
        DIO_vSetPinVal(SWT5_PORT, SWT5_PIN, HIGH);
    2bf2:	83 e0       	ldi	r24, 0x03	; 3
    2bf4:	65 e0       	ldi	r22, 0x05	; 5
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2bfc:	0b c0       	rjmp	.+22     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT6:
        DIO_vSetPinVal(SWT6_PORT, SWT6_PIN, HIGH);
    2bfe:	83 e0       	ldi	r24, 0x03	; 3
    2c00:	66 e0       	ldi	r22, 0x06	; 6
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    2c08:	05 c0       	rjmp	.+10     	; 0x2c14 <SWT_vInit+0x198>
        break;
    case SWT7:
        DIO_vSetPinVal(SWT7_PORT, SWT7_PIN, HIGH);
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	67 e0       	ldi	r22, 0x07	; 7
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <SWT_vInitAllSwt>:
void SWT_vInitAllSwt()
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    SWT_vInit(SWT0);
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT1);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT2);
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT3);
    2c3e:	83 e0       	ldi	r24, 0x03	; 3
    2c40:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT4);
    2c44:	84 e0       	ldi	r24, 0x04	; 4
    2c46:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT5);
    2c4a:	85 e0       	ldi	r24, 0x05	; 5
    2c4c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT6);
    2c50:	86 e0       	ldi	r24, 0x06	; 6
    2c52:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
    SWT_vInit(SWT7);
    2c56:	87 e0       	ldi	r24, 0x07	; 7
    2c58:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <SWT_vInit>
}
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <SWT_u8ReadSwt>:
u8 SWT_u8ReadSwt(u8 A_u8SwtID)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <SWT_u8ReadSwt+0x6>
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <SWT_u8ReadSwt+0x8>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
    u8 L_u8SwtState;
    switch (A_u8SwtID)
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	28 2f       	mov	r18, r24
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	3c 83       	std	Y+4, r19	; 0x04
    2c78:	2b 83       	std	Y+3, r18	; 0x03
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	83 30       	cpi	r24, 0x03	; 3
    2c80:	91 05       	cpc	r25, r1
    2c82:	d9 f1       	breq	.+118    	; 0x2cfa <SWT_u8ReadSwt+0x98>
    2c84:	2b 81       	ldd	r18, Y+3	; 0x03
    2c86:	3c 81       	ldd	r19, Y+4	; 0x04
    2c88:	24 30       	cpi	r18, 0x04	; 4
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	7c f4       	brge	.+30     	; 0x2cac <SWT_u8ReadSwt+0x4a>
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	81 30       	cpi	r24, 0x01	; 1
    2c94:	91 05       	cpc	r25, r1
    2c96:	29 f1       	breq	.+74     	; 0x2ce2 <SWT_u8ReadSwt+0x80>
    2c98:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c9c:	22 30       	cpi	r18, 0x02	; 2
    2c9e:	31 05       	cpc	r19, r1
    2ca0:	34 f5       	brge	.+76     	; 0x2cee <SWT_u8ReadSwt+0x8c>
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	b1 f0       	breq	.+44     	; 0x2cd6 <SWT_u8ReadSwt+0x74>
    2caa:	44 c0       	rjmp	.+136    	; 0x2d34 <SWT_u8ReadSwt+0xd2>
    2cac:	2b 81       	ldd	r18, Y+3	; 0x03
    2cae:	3c 81       	ldd	r19, Y+4	; 0x04
    2cb0:	25 30       	cpi	r18, 0x05	; 5
    2cb2:	31 05       	cpc	r19, r1
    2cb4:	71 f1       	breq	.+92     	; 0x2d12 <SWT_u8ReadSwt+0xb0>
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	85 30       	cpi	r24, 0x05	; 5
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	1c f1       	brlt	.+70     	; 0x2d06 <SWT_u8ReadSwt+0xa4>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	26 30       	cpi	r18, 0x06	; 6
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	51 f1       	breq	.+84     	; 0x2d1e <SWT_u8ReadSwt+0xbc>
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	87 30       	cpi	r24, 0x07	; 7
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	59 f1       	breq	.+86     	; 0x2d2a <SWT_u8ReadSwt+0xc8>
    2cd4:	2f c0       	rjmp	.+94     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
    {
    case SWT0:
        L_u8SwtState = DIO_u8GetPinVal(SWT0_PORT, SWT0_PIN);
    2cd6:	83 e0       	ldi	r24, 0x03	; 3
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	29 c0       	rjmp	.+82     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT1:
        L_u8SwtState = DIO_u8GetPinVal(SWT1_PORT, SWT1_PIN);
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	23 c0       	rjmp	.+70     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT2:
        L_u8SwtState = DIO_u8GetPinVal(SWT2_PORT, SWT2_PIN);
    2cee:	83 e0       	ldi	r24, 0x03	; 3
    2cf0:	62 e0       	ldi	r22, 0x02	; 2
    2cf2:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	1d c0       	rjmp	.+58     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT3:
        L_u8SwtState = DIO_u8GetPinVal(SWT3_PORT, SWT3_PIN);
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	63 e0       	ldi	r22, 0x03	; 3
    2cfe:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	17 c0       	rjmp	.+46     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT4:
        L_u8SwtState = DIO_u8GetPinVal(SWT4_PORT, SWT4_PIN);
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	64 e0       	ldi	r22, 0x04	; 4
    2d0a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	11 c0       	rjmp	.+34     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT5:
        L_u8SwtState = DIO_u8GetPinVal(SWT5_PORT, SWT5_PIN);
    2d12:	83 e0       	ldi	r24, 0x03	; 3
    2d14:	65 e0       	ldi	r22, 0x05	; 5
    2d16:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT6:
        L_u8SwtState = DIO_u8GetPinVal(SWT6_PORT, SWT6_PIN);
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	66 e0       	ldi	r22, 0x06	; 6
    2d22:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <SWT_u8ReadSwt+0xd2>
        break;
    case SWT7:
        L_u8SwtState = DIO_u8GetPinVal(SWT7_PORT, SWT7_PIN);
    2d2a:	83 e0       	ldi	r24, 0x03	; 3
    2d2c:	67 e0       	ldi	r22, 0x07	; 7
    2d2e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    2d32:	89 83       	std	Y+1, r24	; 0x01
        break;
    default:
        break;
    }
    if (L_u8SwtState == 0)
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	88 23       	and	r24, r24
    2d38:	19 f4       	brne	.+6      	; 0x2d40 <SWT_u8ReadSwt+0xde>
    {
        L_u8SwtState = SWT_ON;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	01 c0       	rjmp	.+2      	; 0x2d42 <SWT_u8ReadSwt+0xe0>
    }
    else
    {
        L_u8SwtState = SWT_OFF;
    2d40:	19 82       	std	Y+1, r1	; 0x01
    }
    return L_u8SwtState;
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <SWT_u8ReadAllSwt>:
u8 SWT_u8ReadAllSwt()
{
    2d52:	1f 93       	push	r17
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	0f 92       	push	r0
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    u8 L_u8SwtVal;
    L_u8SwtVal = SWT_u8ReadSwt(SWT0) << 0 | SWT_u8ReadSwt(SWT1) << 1 | SWT_u8ReadSwt(SWT3) << 3 | SWT_u8ReadSwt(SWT4) << 4 | SWT_u8ReadSwt(SWT5) << 5 | SWT_u8ReadSwt(SWT6) << 6 | SWT_u8ReadSwt(SWT7) << 7;
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2d64:	18 2f       	mov	r17, r24
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	18 2b       	or	r17, r24
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	88 0f       	add	r24, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	18 2b       	or	r17, r24
    2d8e:	84 e0       	ldi	r24, 0x04	; 4
    2d90:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	82 95       	swap	r24
    2d9a:	92 95       	swap	r25
    2d9c:	90 7f       	andi	r25, 0xF0	; 240
    2d9e:	98 27       	eor	r25, r24
    2da0:	80 7f       	andi	r24, 0xF0	; 240
    2da2:	98 27       	eor	r25, r24
    2da4:	18 2b       	or	r17, r24
    2da6:	85 e0       	ldi	r24, 0x05	; 5
    2da8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2dac:	88 2f       	mov	r24, r24
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	82 95       	swap	r24
    2db6:	92 95       	swap	r25
    2db8:	90 7f       	andi	r25, 0xF0	; 240
    2dba:	98 27       	eor	r25, r24
    2dbc:	80 7f       	andi	r24, 0xF0	; 240
    2dbe:	98 27       	eor	r25, r24
    2dc0:	18 2b       	or	r17, r24
    2dc2:	86 e0       	ldi	r24, 0x06	; 6
    2dc4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	00 24       	eor	r0, r0
    2dce:	96 95       	lsr	r25
    2dd0:	87 95       	ror	r24
    2dd2:	07 94       	ror	r0
    2dd4:	96 95       	lsr	r25
    2dd6:	87 95       	ror	r24
    2dd8:	07 94       	ror	r0
    2dda:	98 2f       	mov	r25, r24
    2ddc:	80 2d       	mov	r24, r0
    2dde:	18 2b       	or	r17, r24
    2de0:	87 e0       	ldi	r24, 0x07	; 7
    2de2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <SWT_u8ReadSwt>
    2de6:	88 2f       	mov	r24, r24
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	96 95       	lsr	r25
    2dec:	98 2f       	mov	r25, r24
    2dee:	88 27       	eor	r24, r24
    2df0:	97 95       	ror	r25
    2df2:	87 95       	ror	r24
    2df4:	81 2b       	or	r24, r17
    2df6:	89 83       	std	Y+1, r24	; 0x01
    return L_u8SwtVal;
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	1f 91       	pop	r17
    2e02:	08 95       	ret

00002e04 <STM_vInit>:
#include <avr/delay.h>

static u8 G_u8DelayTimeInMs = 2, G_u8StepMode;

void STM_vInit()
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    DIO_vSetPinDir(COIL_ORANGE_PORT, COIL_ORANGE_PIN, DIR_OUTPUT);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_YELLOW_PORT, COIL_YELLOW_PIN, DIR_OUTPUT);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_PINK_PORT, COIL_PINK_PIN, DIR_OUTPUT);
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	41 e0       	ldi	r20, 0x01	; 1
    2e26:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinDir(COIL_BLUE_PORT, COIL_BLUE_PIN, DIR_OUTPUT);
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	63 e0       	ldi	r22, 0x03	; 3
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
}
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <STM_vSetStepMode>:
void STM_vSetStepMode(u8 A_u8Step)
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	0f 92       	push	r0
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
    G_u8StepMode = A_u8Step;
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	80 93 11 02 	sts	0x0211, r24
};
    2e4c:	0f 90       	pop	r0
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <STM_vSetMotorSpeedRPM>:

void STM_vSetMotorSpeedRPM(u8 A_u8MotorSpeedRpm)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	0f 92       	push	r0
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	89 83       	std	Y+1, r24	; 0x01
    if (G_u8StepMode == FULL_STEP)
    2e60:	80 91 11 02 	lds	r24, 0x0211
    2e64:	88 23       	and	r24, r24
    2e66:	d1 f5       	brne	.+116    	; 0x2edc <STM_vSetMotorSpeedRPM+0x88>
    {
        G_u8DelayTimeInMs = round((60 * 1.0 / (A_u8MotorSpeedRpm * (360 / STEP_ANGLE_FULL_STEP))) * 1000);
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	88 2f       	mov	r24, r24
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	aa 27       	eor	r26, r26
    2e70:	97 fd       	sbrc	r25, 7
    2e72:	a0 95       	com	r26
    2e74:	ba 2f       	mov	r27, r26
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	23 e0       	ldi	r18, 0x03	; 3
    2e88:	39 ef       	ldi	r19, 0xF9	; 249
    2e8a:	4f ef       	ldi	r20, 0xFF	; 255
    2e8c:	54 e4       	ldi	r21, 0x44	; 68
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9c 01       	movw	r18, r24
    2e98:	ad 01       	movw	r20, r26
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	80 e7       	ldi	r24, 0x70	; 112
    2ea0:	92 e4       	ldi	r25, 0x42	; 66
    2ea2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	4a e7       	ldi	r20, 0x7A	; 122
    2eb4:	54 e4       	ldi	r21, 0x44	; 68
    2eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 82 31 	call	0x6304	; 0x6304 <round>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	80 93 92 01 	sts	0x0192, r24
    2eda:	39 c0       	rjmp	.+114    	; 0x2f4e <STM_vSetMotorSpeedRPM+0xfa>
    }
    else
    {
        G_u8DelayTimeInMs = round((60 * 1.0 / (A_u8MotorSpeedRpm * (360 / STEP_ANGLE_HALF_STEP))) * 1000);
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	aa 27       	eor	r26, r26
    2ee4:	97 fd       	sbrc	r25, 7
    2ee6:	a0 95       	com	r26
    2ee8:	ba 2f       	mov	r27, r26
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	23 e0       	ldi	r18, 0x03	; 3
    2efc:	39 ef       	ldi	r19, 0xF9	; 249
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	55 e4       	ldi	r21, 0x45	; 69
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9c 01       	movw	r18, r24
    2f0c:	ad 01       	movw	r20, r26
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	80 e7       	ldi	r24, 0x70	; 112
    2f14:	92 e4       	ldi	r25, 0x42	; 66
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 82 31 	call	0x6304	; 0x6304 <round>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	80 93 92 01 	sts	0x0192, r24
    }
}
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <STM_vMoveCycle>:
void STM_vMoveCycle(u8 A_u8Direction)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	c9 54       	subi	r28, 0x49	; 73
    2f60:	d0 40       	sbci	r29, 0x00	; 0
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ed 5b       	subi	r30, 0xBD	; 189
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	80 83       	st	Z, r24
    switch (G_u8StepMode)
    2f74:	80 91 11 02 	lds	r24, 0x0211
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	2a 96       	adiw	r28, 0x0a	; 10
    2f7e:	3f af       	std	Y+63, r19	; 0x3f
    2f80:	2e af       	std	Y+62, r18	; 0x3e
    2f82:	2a 97       	sbiw	r28, 0x0a	; 10
    2f84:	2a 96       	adiw	r28, 0x0a	; 10
    2f86:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f88:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f8a:	2a 97       	sbiw	r28, 0x0a	; 10
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	49 f0       	breq	.+18     	; 0x2fa2 <STM_vMoveCycle+0x4c>
    2f90:	2a 96       	adiw	r28, 0x0a	; 10
    2f92:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f94:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f96:	2a 97       	sbiw	r28, 0x0a	; 10
    2f98:	e1 30       	cpi	r30, 0x01	; 1
    2f9a:	f1 05       	cpc	r31, r1
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <STM_vMoveCycle+0x4a>
    2f9e:	d0 c1       	rjmp	.+928    	; 0x3340 <STM_vMoveCycle+0x3ea>
    2fa0:	8b c3       	rjmp	.+1814   	; 0x36b8 <STM_vMoveCycle+0x762>
    {
    case FULL_STEP:
        switch (A_u8Direction)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ed 5b       	subi	r30, 0xBD	; 189
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	28 96       	adiw	r28, 0x08	; 8
    2fb0:	3f af       	std	Y+63, r19	; 0x3f
    2fb2:	2e af       	std	Y+62, r18	; 0x3e
    2fb4:	28 97       	sbiw	r28, 0x08	; 8
    2fb6:	28 96       	adiw	r28, 0x08	; 8
    2fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fba:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fbc:	28 97       	sbiw	r28, 0x08	; 8
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <STM_vMoveCycle+0x6e>
    2fc2:	f4 c0       	rjmp	.+488    	; 0x31ac <STM_vMoveCycle+0x256>
    2fc4:	28 96       	adiw	r28, 0x08	; 8
    2fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fca:	28 97       	sbiw	r28, 0x08	; 8
    2fcc:	e1 30       	cpi	r30, 0x01	; 1
    2fce:	f1 05       	cpc	r31, r1
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <STM_vMoveCycle+0x7e>
    2fd2:	72 c3       	rjmp	.+1764   	; 0x36b8 <STM_vMoveCycle+0x762>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 4; i++)
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	ff 96       	adiw	r30, 0x3f	; 63
    2fd8:	10 82       	st	Z, r1
    2fda:	11 82       	std	Z+1, r1	; 0x01
    2fdc:	12 82       	std	Z+2, r1	; 0x02
    2fde:	13 82       	std	Z+3, r1	; 0x03
    2fe0:	d8 c0       	rjmp	.+432    	; 0x3192 <STM_vMoveCycle+0x23c>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ff 96       	adiw	r30, 0x3f	; 63
    2fe6:	80 81       	ld	r24, Z
    2fe8:	91 81       	ldd	r25, Z+1	; 0x01
    2fea:	a2 81       	ldd	r26, Z+2	; 0x02
    2fec:	b3 81       	ldd	r27, Z+3	; 0x03
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	ed 54       	subi	r30, 0x4D	; 77
    2ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffc:	90 81       	ld	r25, Z
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	49 2f       	mov	r20, r25
    3004:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    3008:	fe 01       	movw	r30, r28
    300a:	ff 96       	adiw	r30, 0x3f	; 63
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	a2 81       	ldd	r26, Z+2	; 0x02
    3012:	b3 81       	ldd	r27, Z+3	; 0x03
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	fc 01       	movw	r30, r24
    301e:	ec 54       	subi	r30, 0x4C	; 76
    3020:	fe 4f       	sbci	r31, 0xFE	; 254
    3022:	90 81       	ld	r25, Z
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	62 e0       	ldi	r22, 0x02	; 2
    3028:	49 2f       	mov	r20, r25
    302a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    302e:	fe 01       	movw	r30, r28
    3030:	ff 96       	adiw	r30, 0x3f	; 63
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	a2 81       	ldd	r26, Z+2	; 0x02
    3038:	b3 81       	ldd	r27, Z+3	; 0x03
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	fc 01       	movw	r30, r24
    3046:	ed 54       	subi	r30, 0x4D	; 77
    3048:	fe 4f       	sbci	r31, 0xFE	; 254
    304a:	90 81       	ld	r25, Z
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	61 e0       	ldi	r22, 0x01	; 1
    3050:	49 2f       	mov	r20, r25
    3052:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    3056:	fe 01       	movw	r30, r28
    3058:	ff 96       	adiw	r30, 0x3f	; 63
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	a2 81       	ldd	r26, Z+2	; 0x02
    3060:	b3 81       	ldd	r27, Z+3	; 0x03
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	fc 01       	movw	r30, r24
    306c:	ea 54       	subi	r30, 0x4A	; 74
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	90 81       	ld	r25, Z
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	63 e0       	ldi	r22, 0x03	; 3
    3076:	49 2f       	mov	r20, r25
    3078:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    307c:	80 91 92 01 	lds	r24, 0x0192
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a0 e0       	ldi	r26, 0x00	; 0
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	8d ab       	std	Y+53, r24	; 0x35
    3096:	9e ab       	std	Y+54, r25	; 0x36
    3098:	af ab       	std	Y+55, r26	; 0x37
    309a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309c:	6d a9       	ldd	r22, Y+53	; 0x35
    309e:	7e a9       	ldd	r23, Y+54	; 0x36
    30a0:	8f a9       	ldd	r24, Y+55	; 0x37
    30a2:	98 ad       	ldd	r25, Y+56	; 0x38
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4a ef       	ldi	r20, 0xFA	; 250
    30aa:	54 e4       	ldi	r21, 0x44	; 68
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	89 ab       	std	Y+49, r24	; 0x31
    30b6:	9a ab       	std	Y+50, r25	; 0x32
    30b8:	ab ab       	std	Y+51, r26	; 0x33
    30ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30bc:	69 a9       	ldd	r22, Y+49	; 0x31
    30be:	7a a9       	ldd	r23, Y+50	; 0x32
    30c0:	8b a9       	ldd	r24, Y+51	; 0x33
    30c2:	9c a9       	ldd	r25, Y+52	; 0x34
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	40 e8       	ldi	r20, 0x80	; 128
    30ca:	5f e3       	ldi	r21, 0x3F	; 63
    30cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	2c f4       	brge	.+10     	; 0x30de <STM_vMoveCycle+0x188>
		__ticks = 1;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	98 ab       	std	Y+48, r25	; 0x30
    30da:	8f a7       	std	Y+47, r24	; 0x2f
    30dc:	3f c0       	rjmp	.+126    	; 0x315c <STM_vMoveCycle+0x206>
	else if (__tmp > 65535)
    30de:	69 a9       	ldd	r22, Y+49	; 0x31
    30e0:	7a a9       	ldd	r23, Y+50	; 0x32
    30e2:	8b a9       	ldd	r24, Y+51	; 0x33
    30e4:	9c a9       	ldd	r25, Y+52	; 0x34
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	3f ef       	ldi	r19, 0xFF	; 255
    30ea:	4f e7       	ldi	r20, 0x7F	; 127
    30ec:	57 e4       	ldi	r21, 0x47	; 71
    30ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f2:	18 16       	cp	r1, r24
    30f4:	4c f5       	brge	.+82     	; 0x3148 <STM_vMoveCycle+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	6d a9       	ldd	r22, Y+53	; 0x35
    30f8:	7e a9       	ldd	r23, Y+54	; 0x36
    30fa:	8f a9       	ldd	r24, Y+55	; 0x37
    30fc:	98 ad       	ldd	r25, Y+56	; 0x38
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e2       	ldi	r20, 0x20	; 32
    3104:	51 e4       	ldi	r21, 0x41	; 65
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	98 ab       	std	Y+48, r25	; 0x30
    311c:	8f a7       	std	Y+47, r24	; 0x2f
    311e:	0f c0       	rjmp	.+30     	; 0x313e <STM_vMoveCycle+0x1e8>
    3120:	88 ec       	ldi	r24, 0xC8	; 200
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	9e a7       	std	Y+46, r25	; 0x2e
    3126:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3128:	8d a5       	ldd	r24, Y+45	; 0x2d
    312a:	9e a5       	ldd	r25, Y+46	; 0x2e
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <STM_vMoveCycle+0x1d6>
    3130:	9e a7       	std	Y+46, r25	; 0x2e
    3132:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3134:	8f a5       	ldd	r24, Y+47	; 0x2f
    3136:	98 a9       	ldd	r25, Y+48	; 0x30
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	98 ab       	std	Y+48, r25	; 0x30
    313c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3140:	98 a9       	ldd	r25, Y+48	; 0x30
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	69 f7       	brne	.-38     	; 0x3120 <STM_vMoveCycle+0x1ca>
    3146:	14 c0       	rjmp	.+40     	; 0x3170 <STM_vMoveCycle+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3148:	69 a9       	ldd	r22, Y+49	; 0x31
    314a:	7a a9       	ldd	r23, Y+50	; 0x32
    314c:	8b a9       	ldd	r24, Y+51	; 0x33
    314e:	9c a9       	ldd	r25, Y+52	; 0x34
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	98 ab       	std	Y+48, r25	; 0x30
    315a:	8f a7       	std	Y+47, r24	; 0x2f
    315c:	8f a5       	ldd	r24, Y+47	; 0x2f
    315e:	98 a9       	ldd	r25, Y+48	; 0x30
    3160:	9c a7       	std	Y+44, r25	; 0x2c
    3162:	8b a7       	std	Y+43, r24	; 0x2b
    3164:	8b a5       	ldd	r24, Y+43	; 0x2b
    3166:	9c a5       	ldd	r25, Y+44	; 0x2c
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	f1 f7       	brne	.-4      	; 0x3168 <STM_vMoveCycle+0x212>
    316c:	9c a7       	std	Y+44, r25	; 0x2c
    316e:	8b a7       	std	Y+43, r24	; 0x2b
    {
    case FULL_STEP:
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 4; i++)
    3170:	9e 01       	movw	r18, r28
    3172:	21 5c       	subi	r18, 0xC1	; 193
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	ff 96       	adiw	r30, 0x3f	; 63
    317a:	80 81       	ld	r24, Z
    317c:	91 81       	ldd	r25, Z+1	; 0x01
    317e:	a2 81       	ldd	r26, Z+2	; 0x02
    3180:	b3 81       	ldd	r27, Z+3	; 0x03
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	a1 1d       	adc	r26, r1
    3186:	b1 1d       	adc	r27, r1
    3188:	f9 01       	movw	r30, r18
    318a:	80 83       	st	Z, r24
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	a2 83       	std	Z+2, r26	; 0x02
    3190:	b3 83       	std	Z+3, r27	; 0x03
    3192:	fe 01       	movw	r30, r28
    3194:	ff 96       	adiw	r30, 0x3f	; 63
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	a2 81       	ldd	r26, Z+2	; 0x02
    319c:	b3 81       	ldd	r27, Z+3	; 0x03
    319e:	84 30       	cpi	r24, 0x04	; 4
    31a0:	91 05       	cpc	r25, r1
    31a2:	a1 05       	cpc	r26, r1
    31a4:	b1 05       	cpc	r27, r1
    31a6:	08 f4       	brcc	.+2      	; 0x31aa <STM_vMoveCycle+0x254>
    31a8:	1c cf       	rjmp	.-456    	; 0x2fe2 <STM_vMoveCycle+0x8c>
    31aa:	86 c2       	rjmp	.+1292   	; 0x36b8 <STM_vMoveCycle+0x762>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 3; i >= 0; i--)
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	8e af       	std	Y+62, r24	; 0x3e
    31b0:	c2 c0       	rjmp	.+388    	; 0x3336 <STM_vMoveCycle+0x3e0>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    31b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    31b4:	99 27       	eor	r25, r25
    31b6:	87 fd       	sbrc	r24, 7
    31b8:	90 95       	com	r25
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	fc 01       	movw	r30, r24
    31c4:	ed 54       	subi	r30, 0x4D	; 77
    31c6:	fe 4f       	sbci	r31, 0xFE	; 254
    31c8:	90 81       	ld	r25, Z
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	49 2f       	mov	r20, r25
    31d0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    31d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    31d6:	99 27       	eor	r25, r25
    31d8:	87 fd       	sbrc	r24, 7
    31da:	90 95       	com	r25
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	fc 01       	movw	r30, r24
    31e6:	ec 54       	subi	r30, 0x4C	; 76
    31e8:	fe 4f       	sbci	r31, 0xFE	; 254
    31ea:	90 81       	ld	r25, Z
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	62 e0       	ldi	r22, 0x02	; 2
    31f0:	49 2f       	mov	r20, r25
    31f2:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    31f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    31f8:	99 27       	eor	r25, r25
    31fa:	87 fd       	sbrc	r24, 7
    31fc:	90 95       	com	r25
    31fe:	88 0f       	add	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	fc 01       	movw	r30, r24
    320a:	ed 54       	subi	r30, 0x4D	; 77
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	90 81       	ld	r25, Z
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	61 e0       	ldi	r22, 0x01	; 1
    3214:	49 2f       	mov	r20, r25
    3216:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    321a:	8e ad       	ldd	r24, Y+62	; 0x3e
    321c:	99 27       	eor	r25, r25
    321e:	87 fd       	sbrc	r24, 7
    3220:	90 95       	com	r25
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	fc 01       	movw	r30, r24
    322c:	ea 54       	subi	r30, 0x4A	; 74
    322e:	fe 4f       	sbci	r31, 0xFE	; 254
    3230:	90 81       	ld	r25, Z
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	63 e0       	ldi	r22, 0x03	; 3
    3236:	49 2f       	mov	r20, r25
    3238:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    323c:	80 91 92 01 	lds	r24, 0x0192
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e0       	ldi	r26, 0x00	; 0
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	8f a3       	std	Y+39, r24	; 0x27
    3256:	98 a7       	std	Y+40, r25	; 0x28
    3258:	a9 a7       	std	Y+41, r26	; 0x29
    325a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    325c:	6f a1       	ldd	r22, Y+39	; 0x27
    325e:	78 a5       	ldd	r23, Y+40	; 0x28
    3260:	89 a5       	ldd	r24, Y+41	; 0x29
    3262:	9a a5       	ldd	r25, Y+42	; 0x2a
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	4a ef       	ldi	r20, 0xFA	; 250
    326a:	54 e4       	ldi	r21, 0x44	; 68
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	8b a3       	std	Y+35, r24	; 0x23
    3276:	9c a3       	std	Y+36, r25	; 0x24
    3278:	ad a3       	std	Y+37, r26	; 0x25
    327a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    327c:	6b a1       	ldd	r22, Y+35	; 0x23
    327e:	7c a1       	ldd	r23, Y+36	; 0x24
    3280:	8d a1       	ldd	r24, Y+37	; 0x25
    3282:	9e a1       	ldd	r25, Y+38	; 0x26
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e8       	ldi	r20, 0x80	; 128
    328a:	5f e3       	ldi	r21, 0x3F	; 63
    328c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3290:	88 23       	and	r24, r24
    3292:	2c f4       	brge	.+10     	; 0x329e <STM_vMoveCycle+0x348>
		__ticks = 1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9a a3       	std	Y+34, r25	; 0x22
    329a:	89 a3       	std	Y+33, r24	; 0x21
    329c:	3f c0       	rjmp	.+126    	; 0x331c <STM_vMoveCycle+0x3c6>
	else if (__tmp > 65535)
    329e:	6b a1       	ldd	r22, Y+35	; 0x23
    32a0:	7c a1       	ldd	r23, Y+36	; 0x24
    32a2:	8d a1       	ldd	r24, Y+37	; 0x25
    32a4:	9e a1       	ldd	r25, Y+38	; 0x26
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	3f ef       	ldi	r19, 0xFF	; 255
    32aa:	4f e7       	ldi	r20, 0x7F	; 127
    32ac:	57 e4       	ldi	r21, 0x47	; 71
    32ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b2:	18 16       	cp	r1, r24
    32b4:	4c f5       	brge	.+82     	; 0x3308 <STM_vMoveCycle+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b6:	6f a1       	ldd	r22, Y+39	; 0x27
    32b8:	78 a5       	ldd	r23, Y+40	; 0x28
    32ba:	89 a5       	ldd	r24, Y+41	; 0x29
    32bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e2       	ldi	r20, 0x20	; 32
    32c4:	51 e4       	ldi	r21, 0x41	; 65
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9a a3       	std	Y+34, r25	; 0x22
    32dc:	89 a3       	std	Y+33, r24	; 0x21
    32de:	0f c0       	rjmp	.+30     	; 0x32fe <STM_vMoveCycle+0x3a8>
    32e0:	88 ec       	ldi	r24, 0xC8	; 200
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	98 a3       	std	Y+32, r25	; 0x20
    32e6:	8f 8f       	std	Y+31, r24	; 0x1f
    32e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32ea:	98 a1       	ldd	r25, Y+32	; 0x20
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	f1 f7       	brne	.-4      	; 0x32ec <STM_vMoveCycle+0x396>
    32f0:	98 a3       	std	Y+32, r25	; 0x20
    32f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f4:	89 a1       	ldd	r24, Y+33	; 0x21
    32f6:	9a a1       	ldd	r25, Y+34	; 0x22
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	9a a3       	std	Y+34, r25	; 0x22
    32fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3300:	9a a1       	ldd	r25, Y+34	; 0x22
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	69 f7       	brne	.-38     	; 0x32e0 <STM_vMoveCycle+0x38a>
    3306:	14 c0       	rjmp	.+40     	; 0x3330 <STM_vMoveCycle+0x3da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3308:	6b a1       	ldd	r22, Y+35	; 0x23
    330a:	7c a1       	ldd	r23, Y+36	; 0x24
    330c:	8d a1       	ldd	r24, Y+37	; 0x25
    330e:	9e a1       	ldd	r25, Y+38	; 0x26
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9a a3       	std	Y+34, r25	; 0x22
    331a:	89 a3       	std	Y+33, r24	; 0x21
    331c:	89 a1       	ldd	r24, Y+33	; 0x21
    331e:	9a a1       	ldd	r25, Y+34	; 0x22
    3320:	9e 8f       	std	Y+30, r25	; 0x1e
    3322:	8d 8f       	std	Y+29, r24	; 0x1d
    3324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3326:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <STM_vMoveCycle+0x3d2>
    332c:	9e 8f       	std	Y+30, r25	; 0x1e
    332e:	8d 8f       	std	Y+29, r24	; 0x1d
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 3; i >= 0; i--)
    3330:	8e ad       	ldd	r24, Y+62	; 0x3e
    3332:	81 50       	subi	r24, 0x01	; 1
    3334:	8e af       	std	Y+62, r24	; 0x3e
    3336:	8e ad       	ldd	r24, Y+62	; 0x3e
    3338:	88 23       	and	r24, r24
    333a:	0c f0       	brlt	.+2      	; 0x333e <STM_vMoveCycle+0x3e8>
    333c:	3a cf       	rjmp	.-396    	; 0x31b2 <STM_vMoveCycle+0x25c>
    333e:	bc c1       	rjmp	.+888    	; 0x36b8 <STM_vMoveCycle+0x762>
        default:
            break;
        }
        break;
    case HALF_STEP:
        switch (A_u8Direction)
    3340:	fe 01       	movw	r30, r28
    3342:	ed 5b       	subi	r30, 0xBD	; 189
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	26 96       	adiw	r28, 0x06	; 6
    334e:	3f af       	std	Y+63, r19	; 0x3f
    3350:	2e af       	std	Y+62, r18	; 0x3e
    3352:	26 97       	sbiw	r28, 0x06	; 6
    3354:	26 96       	adiw	r28, 0x06	; 6
    3356:	8e ad       	ldd	r24, Y+62	; 0x3e
    3358:	9f ad       	ldd	r25, Y+63	; 0x3f
    335a:	26 97       	sbiw	r28, 0x06	; 6
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	09 f4       	brne	.+2      	; 0x3362 <STM_vMoveCycle+0x40c>
    3360:	e2 c0       	rjmp	.+452    	; 0x3526 <STM_vMoveCycle+0x5d0>
    3362:	26 96       	adiw	r28, 0x06	; 6
    3364:	ee ad       	ldd	r30, Y+62	; 0x3e
    3366:	ff ad       	ldd	r31, Y+63	; 0x3f
    3368:	26 97       	sbiw	r28, 0x06	; 6
    336a:	e1 30       	cpi	r30, 0x01	; 1
    336c:	f1 05       	cpc	r31, r1
    336e:	09 f0       	breq	.+2      	; 0x3372 <STM_vMoveCycle+0x41c>
    3370:	a3 c1       	rjmp	.+838    	; 0x36b8 <STM_vMoveCycle+0x762>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 8; i++)
    3372:	1a ae       	std	Y+58, r1	; 0x3a
    3374:	1b ae       	std	Y+59, r1	; 0x3b
    3376:	1c ae       	std	Y+60, r1	; 0x3c
    3378:	1d ae       	std	Y+61, r1	; 0x3d
    337a:	ca c0       	rjmp	.+404    	; 0x3510 <STM_vMoveCycle+0x5ba>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    337c:	8a ad       	ldd	r24, Y+58	; 0x3a
    337e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3380:	ac ad       	ldd	r26, Y+60	; 0x3c
    3382:	bd ad       	ldd	r27, Y+61	; 0x3d
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	88 0f       	add	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	fc 01       	movw	r30, r24
    338e:	ed 56       	subi	r30, 0x6D	; 109
    3390:	fe 4f       	sbci	r31, 0xFE	; 254
    3392:	90 81       	ld	r25, Z
    3394:	80 e0       	ldi	r24, 0x00	; 0
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	49 2f       	mov	r20, r25
    339a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    339e:	8a ad       	ldd	r24, Y+58	; 0x3a
    33a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    33a2:	ac ad       	ldd	r26, Y+60	; 0x3c
    33a4:	bd ad       	ldd	r27, Y+61	; 0x3d
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	fc 01       	movw	r30, r24
    33b0:	ec 56       	subi	r30, 0x6C	; 108
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
    33b4:	90 81       	ld	r25, Z
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	62 e0       	ldi	r22, 0x02	; 2
    33ba:	49 2f       	mov	r20, r25
    33bc:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    33c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    33c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    33c4:	ac ad       	ldd	r26, Y+60	; 0x3c
    33c6:	bd ad       	ldd	r27, Y+61	; 0x3d
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	fc 01       	movw	r30, r24
    33d4:	ed 56       	subi	r30, 0x6D	; 109
    33d6:	fe 4f       	sbci	r31, 0xFE	; 254
    33d8:	90 81       	ld	r25, Z
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	49 2f       	mov	r20, r25
    33e0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    33e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    33e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    33e8:	ac ad       	ldd	r26, Y+60	; 0x3c
    33ea:	bd ad       	ldd	r27, Y+61	; 0x3d
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	fc 01       	movw	r30, r24
    33f6:	ea 56       	subi	r30, 0x6A	; 106
    33f8:	fe 4f       	sbci	r31, 0xFE	; 254
    33fa:	90 81       	ld	r25, Z
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	63 e0       	ldi	r22, 0x03	; 3
    3400:	49 2f       	mov	r20, r25
    3402:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    3406:	80 91 92 01 	lds	r24, 0x0192
    340a:	88 2f       	mov	r24, r24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e0       	ldi	r26, 0x00	; 0
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	89 8f       	std	Y+25, r24	; 0x19
    3420:	9a 8f       	std	Y+26, r25	; 0x1a
    3422:	ab 8f       	std	Y+27, r26	; 0x1b
    3424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	69 8d       	ldd	r22, Y+25	; 0x19
    3428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4a ef       	ldi	r20, 0xFA	; 250
    3434:	54 e4       	ldi	r21, 0x44	; 68
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	8d 8b       	std	Y+21, r24	; 0x15
    3440:	9e 8b       	std	Y+22, r25	; 0x16
    3442:	af 8b       	std	Y+23, r26	; 0x17
    3444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3446:	6d 89       	ldd	r22, Y+21	; 0x15
    3448:	7e 89       	ldd	r23, Y+22	; 0x16
    344a:	8f 89       	ldd	r24, Y+23	; 0x17
    344c:	98 8d       	ldd	r25, Y+24	; 0x18
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e8       	ldi	r20, 0x80	; 128
    3454:	5f e3       	ldi	r21, 0x3F	; 63
    3456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    345a:	88 23       	and	r24, r24
    345c:	2c f4       	brge	.+10     	; 0x3468 <STM_vMoveCycle+0x512>
		__ticks = 1;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	9c 8b       	std	Y+20, r25	; 0x14
    3464:	8b 8b       	std	Y+19, r24	; 0x13
    3466:	3f c0       	rjmp	.+126    	; 0x34e6 <STM_vMoveCycle+0x590>
	else if (__tmp > 65535)
    3468:	6d 89       	ldd	r22, Y+21	; 0x15
    346a:	7e 89       	ldd	r23, Y+22	; 0x16
    346c:	8f 89       	ldd	r24, Y+23	; 0x17
    346e:	98 8d       	ldd	r25, Y+24	; 0x18
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	4f e7       	ldi	r20, 0x7F	; 127
    3476:	57 e4       	ldi	r21, 0x47	; 71
    3478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    347c:	18 16       	cp	r1, r24
    347e:	4c f5       	brge	.+82     	; 0x34d2 <STM_vMoveCycle+0x57c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3480:	69 8d       	ldd	r22, Y+25	; 0x19
    3482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e2       	ldi	r20, 0x20	; 32
    348e:	51 e4       	ldi	r21, 0x41	; 65
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9c 8b       	std	Y+20, r25	; 0x14
    34a6:	8b 8b       	std	Y+19, r24	; 0x13
    34a8:	0f c0       	rjmp	.+30     	; 0x34c8 <STM_vMoveCycle+0x572>
    34aa:	88 ec       	ldi	r24, 0xC8	; 200
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9a 8b       	std	Y+18, r25	; 0x12
    34b0:	89 8b       	std	Y+17, r24	; 0x11
    34b2:	89 89       	ldd	r24, Y+17	; 0x11
    34b4:	9a 89       	ldd	r25, Y+18	; 0x12
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <STM_vMoveCycle+0x560>
    34ba:	9a 8b       	std	Y+18, r25	; 0x12
    34bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34be:	8b 89       	ldd	r24, Y+19	; 0x13
    34c0:	9c 89       	ldd	r25, Y+20	; 0x14
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9c 8b       	std	Y+20, r25	; 0x14
    34c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ca:	9c 89       	ldd	r25, Y+20	; 0x14
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	69 f7       	brne	.-38     	; 0x34aa <STM_vMoveCycle+0x554>
    34d0:	14 c0       	rjmp	.+40     	; 0x34fa <STM_vMoveCycle+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d2:	6d 89       	ldd	r22, Y+21	; 0x15
    34d4:	7e 89       	ldd	r23, Y+22	; 0x16
    34d6:	8f 89       	ldd	r24, Y+23	; 0x17
    34d8:	98 8d       	ldd	r25, Y+24	; 0x18
    34da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	9c 8b       	std	Y+20, r25	; 0x14
    34e4:	8b 8b       	std	Y+19, r24	; 0x13
    34e6:	8b 89       	ldd	r24, Y+19	; 0x13
    34e8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ea:	98 8b       	std	Y+16, r25	; 0x10
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
    34ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    34f0:	98 89       	ldd	r25, Y+16	; 0x10
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <STM_vMoveCycle+0x59c>
    34f6:	98 8b       	std	Y+16, r25	; 0x10
    34f8:	8f 87       	std	Y+15, r24	; 0x0f
        break;
    case HALF_STEP:
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < 8; i++)
    34fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    34fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    34fe:	ac ad       	ldd	r26, Y+60	; 0x3c
    3500:	bd ad       	ldd	r27, Y+61	; 0x3d
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	a1 1d       	adc	r26, r1
    3506:	b1 1d       	adc	r27, r1
    3508:	8a af       	std	Y+58, r24	; 0x3a
    350a:	9b af       	std	Y+59, r25	; 0x3b
    350c:	ac af       	std	Y+60, r26	; 0x3c
    350e:	bd af       	std	Y+61, r27	; 0x3d
    3510:	8a ad       	ldd	r24, Y+58	; 0x3a
    3512:	9b ad       	ldd	r25, Y+59	; 0x3b
    3514:	ac ad       	ldd	r26, Y+60	; 0x3c
    3516:	bd ad       	ldd	r27, Y+61	; 0x3d
    3518:	88 30       	cpi	r24, 0x08	; 8
    351a:	91 05       	cpc	r25, r1
    351c:	a1 05       	cpc	r26, r1
    351e:	b1 05       	cpc	r27, r1
    3520:	08 f4       	brcc	.+2      	; 0x3524 <STM_vMoveCycle+0x5ce>
    3522:	2c cf       	rjmp	.-424    	; 0x337c <STM_vMoveCycle+0x426>
    3524:	c9 c0       	rjmp	.+402    	; 0x36b8 <STM_vMoveCycle+0x762>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 7; i >= 0; i--)
    3526:	87 e0       	ldi	r24, 0x07	; 7
    3528:	89 af       	std	Y+57, r24	; 0x39
    352a:	c2 c0       	rjmp	.+388    	; 0x36b0 <STM_vMoveCycle+0x75a>
            {
                DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    352c:	89 ad       	ldd	r24, Y+57	; 0x39
    352e:	99 27       	eor	r25, r25
    3530:	87 fd       	sbrc	r24, 7
    3532:	90 95       	com	r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	fc 01       	movw	r30, r24
    353e:	ed 56       	subi	r30, 0x6D	; 109
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	90 81       	ld	r25, Z
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	49 2f       	mov	r20, r25
    354a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    354e:	89 ad       	ldd	r24, Y+57	; 0x39
    3550:	99 27       	eor	r25, r25
    3552:	87 fd       	sbrc	r24, 7
    3554:	90 95       	com	r25
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	fc 01       	movw	r30, r24
    3560:	ec 56       	subi	r30, 0x6C	; 108
    3562:	fe 4f       	sbci	r31, 0xFE	; 254
    3564:	90 81       	ld	r25, Z
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	62 e0       	ldi	r22, 0x02	; 2
    356a:	49 2f       	mov	r20, r25
    356c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    3570:	89 ad       	ldd	r24, Y+57	; 0x39
    3572:	99 27       	eor	r25, r25
    3574:	87 fd       	sbrc	r24, 7
    3576:	90 95       	com	r25
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	01 96       	adiw	r24, 0x01	; 1
    357e:	88 0f       	add	r24, r24
    3580:	99 1f       	adc	r25, r25
    3582:	fc 01       	movw	r30, r24
    3584:	ed 56       	subi	r30, 0x6D	; 109
    3586:	fe 4f       	sbci	r31, 0xFE	; 254
    3588:	90 81       	ld	r25, Z
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	61 e0       	ldi	r22, 0x01	; 1
    358e:	49 2f       	mov	r20, r25
    3590:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    3594:	89 ad       	ldd	r24, Y+57	; 0x39
    3596:	99 27       	eor	r25, r25
    3598:	87 fd       	sbrc	r24, 7
    359a:	90 95       	com	r25
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	fc 01       	movw	r30, r24
    35a6:	ea 56       	subi	r30, 0x6A	; 106
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	90 81       	ld	r25, Z
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	63 e0       	ldi	r22, 0x03	; 3
    35b0:	49 2f       	mov	r20, r25
    35b2:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                _delay_ms(G_u8DelayTimeInMs);
    35b6:	80 91 92 01 	lds	r24, 0x0192
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	a0 e0       	ldi	r26, 0x00	; 0
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	8b 87       	std	Y+11, r24	; 0x0b
    35d0:	9c 87       	std	Y+12, r25	; 0x0c
    35d2:	ad 87       	std	Y+13, r26	; 0x0d
    35d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35da:	8d 85       	ldd	r24, Y+13	; 0x0d
    35dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	4a ef       	ldi	r20, 0xFA	; 250
    35e4:	54 e4       	ldi	r21, 0x44	; 68
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	8f 83       	std	Y+7, r24	; 0x07
    35f0:	98 87       	std	Y+8, r25	; 0x08
    35f2:	a9 87       	std	Y+9, r26	; 0x09
    35f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f6:	6f 81       	ldd	r22, Y+7	; 0x07
    35f8:	78 85       	ldd	r23, Y+8	; 0x08
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	2c f4       	brge	.+10     	; 0x3618 <STM_vMoveCycle+0x6c2>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	9e 83       	std	Y+6, r25	; 0x06
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	3f c0       	rjmp	.+126    	; 0x3696 <STM_vMoveCycle+0x740>
	else if (__tmp > 65535)
    3618:	6f 81       	ldd	r22, Y+7	; 0x07
    361a:	78 85       	ldd	r23, Y+8	; 0x08
    361c:	89 85       	ldd	r24, Y+9	; 0x09
    361e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	3f ef       	ldi	r19, 0xFF	; 255
    3624:	4f e7       	ldi	r20, 0x7F	; 127
    3626:	57 e4       	ldi	r21, 0x47	; 71
    3628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    362c:	18 16       	cp	r1, r24
    362e:	4c f5       	brge	.+82     	; 0x3682 <STM_vMoveCycle+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3630:	6b 85       	ldd	r22, Y+11	; 0x0b
    3632:	7c 85       	ldd	r23, Y+12	; 0x0c
    3634:	8d 85       	ldd	r24, Y+13	; 0x0d
    3636:	9e 85       	ldd	r25, Y+14	; 0x0e
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	51 e4       	ldi	r21, 0x41	; 65
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <STM_vMoveCycle+0x722>
    365a:	88 ec       	ldi	r24, 0xC8	; 200
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9c 83       	std	Y+4, r25	; 0x04
    3660:	8b 83       	std	Y+3, r24	; 0x03
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	9c 81       	ldd	r25, Y+4	; 0x04
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <STM_vMoveCycle+0x710>
    366a:	9c 83       	std	Y+4, r25	; 0x04
    366c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366e:	8d 81       	ldd	r24, Y+5	; 0x05
    3670:	9e 81       	ldd	r25, Y+6	; 0x06
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3678:	8d 81       	ldd	r24, Y+5	; 0x05
    367a:	9e 81       	ldd	r25, Y+6	; 0x06
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	69 f7       	brne	.-38     	; 0x365a <STM_vMoveCycle+0x704>
    3680:	14 c0       	rjmp	.+40     	; 0x36aa <STM_vMoveCycle+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3682:	6f 81       	ldd	r22, Y+7	; 0x07
    3684:	78 85       	ldd	r23, Y+8	; 0x08
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9e 83       	std	Y+6, r25	; 0x06
    3694:	8d 83       	std	Y+5, r24	; 0x05
    3696:	8d 81       	ldd	r24, Y+5	; 0x05
    3698:	9e 81       	ldd	r25, Y+6	; 0x06
    369a:	9a 83       	std	Y+2, r25	; 0x02
    369c:	89 83       	std	Y+1, r24	; 0x01
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <STM_vMoveCycle+0x74c>
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	89 83       	std	Y+1, r24	; 0x01
                DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
                _delay_ms(G_u8DelayTimeInMs);
            }
            break;
        case CLOCKWISE:
            for (s8 i = 7; i >= 0; i--)
    36aa:	89 ad       	ldd	r24, Y+57	; 0x39
    36ac:	81 50       	subi	r24, 0x01	; 1
    36ae:	89 af       	std	Y+57, r24	; 0x39
    36b0:	89 ad       	ldd	r24, Y+57	; 0x39
    36b2:	88 23       	and	r24, r24
    36b4:	0c f0       	brlt	.+2      	; 0x36b8 <STM_vMoveCycle+0x762>
    36b6:	3a cf       	rjmp	.-396    	; 0x352c <STM_vMoveCycle+0x5d6>
        }
        break;
    default:
        break;
    }
}
    36b8:	c7 5b       	subi	r28, 0xB7	; 183
    36ba:	df 4f       	sbci	r29, 0xFF	; 255
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	08 95       	ret

000036cc <STM_vMove>:

void STM_vMove(u8 A_u8Direction, u32 A_u8Angle)
{
    36cc:	0f 93       	push	r16
    36ce:	1f 93       	push	r17
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	cd b7       	in	r28, 0x3d	; 61
    36d6:	de b7       	in	r29, 0x3e	; 62
    36d8:	c1 56       	subi	r28, 0x61	; 97
    36da:	d0 40       	sbci	r29, 0x00	; 0
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	fe 01       	movw	r30, r28
    36e8:	e9 5a       	subi	r30, 0xA9	; 169
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 83       	st	Z, r24
    36ee:	fe 01       	movw	r30, r28
    36f0:	e8 5a       	subi	r30, 0xA8	; 168
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	40 83       	st	Z, r20
    36f6:	51 83       	std	Z+1, r21	; 0x01
    36f8:	62 83       	std	Z+2, r22	; 0x02
    36fa:	73 83       	std	Z+3, r23	; 0x03
    u32 L_u8NumberSteps;
    switch (G_u8StepMode)
    36fc:	80 91 11 02 	lds	r24, 0x0211
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	a2 96       	adiw	r28, 0x22	; 34
    3706:	3f af       	std	Y+63, r19	; 0x3f
    3708:	2e af       	std	Y+62, r18	; 0x3e
    370a:	a2 97       	sbiw	r28, 0x22	; 34
    370c:	a2 96       	adiw	r28, 0x22	; 34
    370e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3710:	9f ad       	ldd	r25, Y+63	; 0x3f
    3712:	a2 97       	sbiw	r28, 0x22	; 34
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	49 f0       	breq	.+18     	; 0x372a <STM_vMove+0x5e>
    3718:	a2 96       	adiw	r28, 0x22	; 34
    371a:	ee ad       	ldd	r30, Y+62	; 0x3e
    371c:	ff ad       	ldd	r31, Y+63	; 0x3f
    371e:	a2 97       	sbiw	r28, 0x22	; 34
    3720:	e1 30       	cpi	r30, 0x01	; 1
    3722:	f1 05       	cpc	r31, r1
    3724:	09 f4       	brne	.+2      	; 0x3728 <STM_vMove+0x5c>
    3726:	76 c2       	rjmp	.+1260   	; 0x3c14 <STM_vMove+0x548>
    3728:	bc c4       	rjmp	.+2424   	; 0x40a2 <STM_vMove+0x9d6>
    {
    case FULL_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_FULL_STEP * 4)));
    372a:	fe 01       	movw	r30, r28
    372c:	e8 5a       	subi	r30, 0xA8	; 168
    372e:	ff 4f       	sbci	r31, 0xFF	; 255
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	2a ee       	ldi	r18, 0xEA	; 234
    3746:	34 e0       	ldi	r19, 0x04	; 4
    3748:	44 e3       	ldi	r20, 0x34	; 52
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	0e 94 82 31 	call	0x6304	; 0x6304 <round>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	8e 01       	movw	r16, r28
    3762:	0d 5a       	subi	r16, 0xAD	; 173
    3764:	1f 4f       	sbci	r17, 0xFF	; 255
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	f8 01       	movw	r30, r16
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
        switch (A_u8Direction)
    377c:	fe 01       	movw	r30, r28
    377e:	e9 5a       	subi	r30, 0xA9	; 169
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	80 81       	ld	r24, Z
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	a0 96       	adiw	r28, 0x20	; 32
    378a:	3f af       	std	Y+63, r19	; 0x3f
    378c:	2e af       	std	Y+62, r18	; 0x3e
    378e:	a0 97       	sbiw	r28, 0x20	; 32
    3790:	a0 96       	adiw	r28, 0x20	; 32
    3792:	8e ad       	ldd	r24, Y+62	; 0x3e
    3794:	9f ad       	ldd	r25, Y+63	; 0x3f
    3796:	a0 97       	sbiw	r28, 0x20	; 32
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	09 f4       	brne	.+2      	; 0x379e <STM_vMove+0xd2>
    379c:	2a c1       	rjmp	.+596    	; 0x39f2 <STM_vMove+0x326>
    379e:	a0 96       	adiw	r28, 0x20	; 32
    37a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    37a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    37a4:	a0 97       	sbiw	r28, 0x20	; 32
    37a6:	e1 30       	cpi	r30, 0x01	; 1
    37a8:	f1 05       	cpc	r31, r1
    37aa:	09 f0       	breq	.+2      	; 0x37ae <STM_vMove+0xe2>
    37ac:	7a c4       	rjmp	.+2292   	; 0x40a2 <STM_vMove+0x9d6>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    37ae:	fe 01       	movw	r30, r28
    37b0:	e1 5b       	subi	r30, 0xB1	; 177
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	10 82       	st	Z, r1
    37b6:	11 82       	std	Z+1, r1	; 0x01
    37b8:	12 82       	std	Z+2, r1	; 0x02
    37ba:	13 82       	std	Z+3, r1	; 0x03
    37bc:	04 c1       	rjmp	.+520    	; 0x39c6 <STM_vMove+0x2fa>
            {
                for (u32 i = 0; i < 4; i++)
    37be:	fe 01       	movw	r30, r28
    37c0:	e5 5b       	subi	r30, 0xB5	; 181
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	10 82       	st	Z, r1
    37c6:	11 82       	std	Z+1, r1	; 0x01
    37c8:	12 82       	std	Z+2, r1	; 0x02
    37ca:	13 82       	std	Z+3, r1	; 0x03
    37cc:	dd c0       	rjmp	.+442    	; 0x3988 <STM_vMove+0x2bc>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    37ce:	fe 01       	movw	r30, r28
    37d0:	e5 5b       	subi	r30, 0xB5	; 181
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	80 81       	ld	r24, Z
    37d6:	91 81       	ldd	r25, Z+1	; 0x01
    37d8:	a2 81       	ldd	r26, Z+2	; 0x02
    37da:	b3 81       	ldd	r27, Z+3	; 0x03
    37dc:	88 0f       	add	r24, r24
    37de:	99 1f       	adc	r25, r25
    37e0:	88 0f       	add	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	fc 01       	movw	r30, r24
    37e6:	ed 54       	subi	r30, 0x4D	; 77
    37e8:	fe 4f       	sbci	r31, 0xFE	; 254
    37ea:	90 81       	ld	r25, Z
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	49 2f       	mov	r20, r25
    37f2:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    37f6:	fe 01       	movw	r30, r28
    37f8:	e5 5b       	subi	r30, 0xB5	; 181
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	91 81       	ldd	r25, Z+1	; 0x01
    3800:	a2 81       	ldd	r26, Z+2	; 0x02
    3802:	b3 81       	ldd	r27, Z+3	; 0x03
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	fc 01       	movw	r30, r24
    380e:	ec 54       	subi	r30, 0x4C	; 76
    3810:	fe 4f       	sbci	r31, 0xFE	; 254
    3812:	90 81       	ld	r25, Z
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	62 e0       	ldi	r22, 0x02	; 2
    3818:	49 2f       	mov	r20, r25
    381a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    381e:	fe 01       	movw	r30, r28
    3820:	e5 5b       	subi	r30, 0xB5	; 181
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	a2 81       	ldd	r26, Z+2	; 0x02
    382a:	b3 81       	ldd	r27, Z+3	; 0x03
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	fc 01       	movw	r30, r24
    3838:	ed 54       	subi	r30, 0x4D	; 77
    383a:	fe 4f       	sbci	r31, 0xFE	; 254
    383c:	90 81       	ld	r25, Z
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	61 e0       	ldi	r22, 0x01	; 1
    3842:	49 2f       	mov	r20, r25
    3844:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    3848:	fe 01       	movw	r30, r28
    384a:	e5 5b       	subi	r30, 0xB5	; 181
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	80 81       	ld	r24, Z
    3850:	91 81       	ldd	r25, Z+1	; 0x01
    3852:	a2 81       	ldd	r26, Z+2	; 0x02
    3854:	b3 81       	ldd	r27, Z+3	; 0x03
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	fc 01       	movw	r30, r24
    3860:	ea 54       	subi	r30, 0x4A	; 74
    3862:	fe 4f       	sbci	r31, 0xFE	; 254
    3864:	90 81       	ld	r25, Z
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	63 e0       	ldi	r22, 0x03	; 3
    386a:	49 2f       	mov	r20, r25
    386c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    3870:	80 91 92 01 	lds	r24, 0x0192
    3874:	88 2f       	mov	r24, r24
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a0 e0       	ldi	r26, 0x00	; 0
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	8d ab       	std	Y+53, r24	; 0x35
    388a:	9e ab       	std	Y+54, r25	; 0x36
    388c:	af ab       	std	Y+55, r26	; 0x37
    388e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	6d a9       	ldd	r22, Y+53	; 0x35
    3892:	7e a9       	ldd	r23, Y+54	; 0x36
    3894:	8f a9       	ldd	r24, Y+55	; 0x37
    3896:	98 ad       	ldd	r25, Y+56	; 0x38
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	4a ef       	ldi	r20, 0xFA	; 250
    389e:	54 e4       	ldi	r21, 0x44	; 68
    38a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	89 ab       	std	Y+49, r24	; 0x31
    38aa:	9a ab       	std	Y+50, r25	; 0x32
    38ac:	ab ab       	std	Y+51, r26	; 0x33
    38ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38b0:	69 a9       	ldd	r22, Y+49	; 0x31
    38b2:	7a a9       	ldd	r23, Y+50	; 0x32
    38b4:	8b a9       	ldd	r24, Y+51	; 0x33
    38b6:	9c a9       	ldd	r25, Y+52	; 0x34
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e8       	ldi	r20, 0x80	; 128
    38be:	5f e3       	ldi	r21, 0x3F	; 63
    38c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c4:	88 23       	and	r24, r24
    38c6:	2c f4       	brge	.+10     	; 0x38d2 <STM_vMove+0x206>
		__ticks = 1;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	98 ab       	std	Y+48, r25	; 0x30
    38ce:	8f a7       	std	Y+47, r24	; 0x2f
    38d0:	3f c0       	rjmp	.+126    	; 0x3950 <STM_vMove+0x284>
	else if (__tmp > 65535)
    38d2:	69 a9       	ldd	r22, Y+49	; 0x31
    38d4:	7a a9       	ldd	r23, Y+50	; 0x32
    38d6:	8b a9       	ldd	r24, Y+51	; 0x33
    38d8:	9c a9       	ldd	r25, Y+52	; 0x34
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	3f ef       	ldi	r19, 0xFF	; 255
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	57 e4       	ldi	r21, 0x47	; 71
    38e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	4c f5       	brge	.+82     	; 0x393c <STM_vMove+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ea:	6d a9       	ldd	r22, Y+53	; 0x35
    38ec:	7e a9       	ldd	r23, Y+54	; 0x36
    38ee:	8f a9       	ldd	r24, Y+55	; 0x37
    38f0:	98 ad       	ldd	r25, Y+56	; 0x38
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e2       	ldi	r20, 0x20	; 32
    38f8:	51 e4       	ldi	r21, 0x41	; 65
    38fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	bc 01       	movw	r22, r24
    3904:	cd 01       	movw	r24, r26
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	98 ab       	std	Y+48, r25	; 0x30
    3910:	8f a7       	std	Y+47, r24	; 0x2f
    3912:	0f c0       	rjmp	.+30     	; 0x3932 <STM_vMove+0x266>
    3914:	88 ec       	ldi	r24, 0xC8	; 200
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	9e a7       	std	Y+46, r25	; 0x2e
    391a:	8d a7       	std	Y+45, r24	; 0x2d
    391c:	8d a5       	ldd	r24, Y+45	; 0x2d
    391e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <STM_vMove+0x254>
    3924:	9e a7       	std	Y+46, r25	; 0x2e
    3926:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3928:	8f a5       	ldd	r24, Y+47	; 0x2f
    392a:	98 a9       	ldd	r25, Y+48	; 0x30
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	98 ab       	std	Y+48, r25	; 0x30
    3930:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3932:	8f a5       	ldd	r24, Y+47	; 0x2f
    3934:	98 a9       	ldd	r25, Y+48	; 0x30
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	69 f7       	brne	.-38     	; 0x3914 <STM_vMove+0x248>
    393a:	14 c0       	rjmp	.+40     	; 0x3964 <STM_vMove+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393c:	69 a9       	ldd	r22, Y+49	; 0x31
    393e:	7a a9       	ldd	r23, Y+50	; 0x32
    3940:	8b a9       	ldd	r24, Y+51	; 0x33
    3942:	9c a9       	ldd	r25, Y+52	; 0x34
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	98 ab       	std	Y+48, r25	; 0x30
    394e:	8f a7       	std	Y+47, r24	; 0x2f
    3950:	8f a5       	ldd	r24, Y+47	; 0x2f
    3952:	98 a9       	ldd	r25, Y+48	; 0x30
    3954:	9c a7       	std	Y+44, r25	; 0x2c
    3956:	8b a7       	std	Y+43, r24	; 0x2b
    3958:	8b a5       	ldd	r24, Y+43	; 0x2b
    395a:	9c a5       	ldd	r25, Y+44	; 0x2c
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <STM_vMove+0x290>
    3960:	9c a7       	std	Y+44, r25	; 0x2c
    3962:	8b a7       	std	Y+43, r24	; 0x2b
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (u32 i = 0; i < 4; i++)
    3964:	9e 01       	movw	r18, r28
    3966:	25 5b       	subi	r18, 0xB5	; 181
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	fe 01       	movw	r30, r28
    396c:	e5 5b       	subi	r30, 0xB5	; 181
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	a2 81       	ldd	r26, Z+2	; 0x02
    3976:	b3 81       	ldd	r27, Z+3	; 0x03
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	a1 1d       	adc	r26, r1
    397c:	b1 1d       	adc	r27, r1
    397e:	f9 01       	movw	r30, r18
    3980:	80 83       	st	Z, r24
    3982:	91 83       	std	Z+1, r25	; 0x01
    3984:	a2 83       	std	Z+2, r26	; 0x02
    3986:	b3 83       	std	Z+3, r27	; 0x03
    3988:	fe 01       	movw	r30, r28
    398a:	e5 5b       	subi	r30, 0xB5	; 181
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	a2 81       	ldd	r26, Z+2	; 0x02
    3994:	b3 81       	ldd	r27, Z+3	; 0x03
    3996:	84 30       	cpi	r24, 0x04	; 4
    3998:	91 05       	cpc	r25, r1
    399a:	a1 05       	cpc	r26, r1
    399c:	b1 05       	cpc	r27, r1
    399e:	08 f4       	brcc	.+2      	; 0x39a2 <STM_vMove+0x2d6>
    39a0:	16 cf       	rjmp	.-468    	; 0x37ce <STM_vMove+0x102>
    case FULL_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_FULL_STEP * 4)));
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    39a2:	9e 01       	movw	r18, r28
    39a4:	21 5b       	subi	r18, 0xB1	; 177
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	fe 01       	movw	r30, r28
    39aa:	e1 5b       	subi	r30, 0xB1	; 177
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	80 81       	ld	r24, Z
    39b0:	91 81       	ldd	r25, Z+1	; 0x01
    39b2:	a2 81       	ldd	r26, Z+2	; 0x02
    39b4:	b3 81       	ldd	r27, Z+3	; 0x03
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	a1 1d       	adc	r26, r1
    39ba:	b1 1d       	adc	r27, r1
    39bc:	f9 01       	movw	r30, r18
    39be:	80 83       	st	Z, r24
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	a2 83       	std	Z+2, r26	; 0x02
    39c4:	b3 83       	std	Z+3, r27	; 0x03
    39c6:	fe 01       	movw	r30, r28
    39c8:	e1 5b       	subi	r30, 0xB1	; 177
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	de 01       	movw	r26, r28
    39ce:	ad 5a       	subi	r26, 0xAD	; 173
    39d0:	bf 4f       	sbci	r27, 0xFF	; 255
    39d2:	20 81       	ld	r18, Z
    39d4:	31 81       	ldd	r19, Z+1	; 0x01
    39d6:	42 81       	ldd	r20, Z+2	; 0x02
    39d8:	53 81       	ldd	r21, Z+3	; 0x03
    39da:	8d 91       	ld	r24, X+
    39dc:	9d 91       	ld	r25, X+
    39de:	0d 90       	ld	r0, X+
    39e0:	bc 91       	ld	r27, X
    39e2:	a0 2d       	mov	r26, r0
    39e4:	28 17       	cp	r18, r24
    39e6:	39 07       	cpc	r19, r25
    39e8:	4a 07       	cpc	r20, r26
    39ea:	5b 07       	cpc	r21, r27
    39ec:	08 f4       	brcc	.+2      	; 0x39f0 <STM_vMove+0x324>
    39ee:	e7 ce       	rjmp	.-562    	; 0x37be <STM_vMove+0xf2>
    39f0:	58 c3       	rjmp	.+1712   	; 0x40a2 <STM_vMove+0x9d6>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    39f2:	fe 01       	movw	r30, r28
    39f4:	e9 5b       	subi	r30, 0xB9	; 185
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	10 82       	st	Z, r1
    39fa:	11 82       	std	Z+1, r1	; 0x01
    39fc:	12 82       	std	Z+2, r1	; 0x02
    39fe:	13 82       	std	Z+3, r1	; 0x03
    3a00:	f3 c0       	rjmp	.+486    	; 0x3be8 <STM_vMove+0x51c>
            {
                for (s8 i = 3; i >= 0; i--)
    3a02:	fe 01       	movw	r30, r28
    3a04:	ea 5b       	subi	r30, 0xBA	; 186
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	80 83       	st	Z, r24
    3a0c:	d4 c0       	rjmp	.+424    	; 0x3bb6 <STM_vMove+0x4ea>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8FullStepSeq[i][0]);
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ea 5b       	subi	r30, 0xBA	; 186
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	80 81       	ld	r24, Z
    3a16:	99 27       	eor	r25, r25
    3a18:	87 fd       	sbrc	r24, 7
    3a1a:	90 95       	com	r25
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	fc 01       	movw	r30, r24
    3a26:	ed 54       	subi	r30, 0x4D	; 77
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	90 81       	ld	r25, Z
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	49 2f       	mov	r20, r25
    3a32:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8FullStepSeq[i][1]);
    3a36:	fe 01       	movw	r30, r28
    3a38:	ea 5b       	subi	r30, 0xBA	; 186
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	99 27       	eor	r25, r25
    3a40:	87 fd       	sbrc	r24, 7
    3a42:	90 95       	com	r25
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	88 0f       	add	r24, r24
    3a4a:	99 1f       	adc	r25, r25
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	ec 54       	subi	r30, 0x4C	; 76
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	90 81       	ld	r25, Z
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	62 e0       	ldi	r22, 0x02	; 2
    3a58:	49 2f       	mov	r20, r25
    3a5a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8FullStepSeq[i][2]);
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ea 5b       	subi	r30, 0xBA	; 186
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	80 81       	ld	r24, Z
    3a66:	99 27       	eor	r25, r25
    3a68:	87 fd       	sbrc	r24, 7
    3a6a:	90 95       	com	r25
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	fc 01       	movw	r30, r24
    3a78:	ed 54       	subi	r30, 0x4D	; 77
    3a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7c:	90 81       	ld	r25, Z
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	61 e0       	ldi	r22, 0x01	; 1
    3a82:	49 2f       	mov	r20, r25
    3a84:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8FullStepSeq[i][3]);
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ea 5b       	subi	r30, 0xBA	; 186
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	80 81       	ld	r24, Z
    3a90:	99 27       	eor	r25, r25
    3a92:	87 fd       	sbrc	r24, 7
    3a94:	90 95       	com	r25
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	ea 54       	subi	r30, 0x4A	; 74
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	90 81       	ld	r25, Z
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	63 e0       	ldi	r22, 0x03	; 3
    3aaa:	49 2f       	mov	r20, r25
    3aac:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    3ab0:	80 91 92 01 	lds	r24, 0x0192
    3ab4:	88 2f       	mov	r24, r24
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e0       	ldi	r26, 0x00	; 0
    3aba:	b0 e0       	ldi	r27, 0x00	; 0
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	8f a3       	std	Y+39, r24	; 0x27
    3aca:	98 a7       	std	Y+40, r25	; 0x28
    3acc:	a9 a7       	std	Y+41, r26	; 0x29
    3ace:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ad2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ad4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ad6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a ef       	ldi	r20, 0xFA	; 250
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8b a3       	std	Y+35, r24	; 0x23
    3aea:	9c a3       	std	Y+36, r25	; 0x24
    3aec:	ad a3       	std	Y+37, r26	; 0x25
    3aee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3af0:	6b a1       	ldd	r22, Y+35	; 0x23
    3af2:	7c a1       	ldd	r23, Y+36	; 0x24
    3af4:	8d a1       	ldd	r24, Y+37	; 0x25
    3af6:	9e a1       	ldd	r25, Y+38	; 0x26
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <STM_vMove+0x446>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9a a3       	std	Y+34, r25	; 0x22
    3b0e:	89 a3       	std	Y+33, r24	; 0x21
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <STM_vMove+0x4c4>
	else if (__tmp > 65535)
    3b12:	6b a1       	ldd	r22, Y+35	; 0x23
    3b14:	7c a1       	ldd	r23, Y+36	; 0x24
    3b16:	8d a1       	ldd	r24, Y+37	; 0x25
    3b18:	9e a1       	ldd	r25, Y+38	; 0x26
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <STM_vMove+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	6f a1       	ldd	r22, Y+39	; 0x27
    3b2c:	78 a5       	ldd	r23, Y+40	; 0x28
    3b2e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9a a3       	std	Y+34, r25	; 0x22
    3b50:	89 a3       	std	Y+33, r24	; 0x21
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <STM_vMove+0x4a6>
    3b54:	88 ec       	ldi	r24, 0xC8	; 200
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	98 a3       	std	Y+32, r25	; 0x20
    3b5a:	8f 8f       	std	Y+31, r24	; 0x1f
    3b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b5e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <STM_vMove+0x494>
    3b64:	98 a3       	std	Y+32, r25	; 0x20
    3b66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9a a3       	std	Y+34, r25	; 0x22
    3b70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	89 a1       	ldd	r24, Y+33	; 0x21
    3b74:	9a a1       	ldd	r25, Y+34	; 0x22
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <STM_vMove+0x488>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <STM_vMove+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b80:	8d a1       	ldd	r24, Y+37	; 0x25
    3b82:	9e a1       	ldd	r25, Y+38	; 0x26
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9a a3       	std	Y+34, r25	; 0x22
    3b8e:	89 a3       	std	Y+33, r24	; 0x21
    3b90:	89 a1       	ldd	r24, Y+33	; 0x21
    3b92:	9a a1       	ldd	r25, Y+34	; 0x22
    3b94:	9e 8f       	std	Y+30, r25	; 0x1e
    3b96:	8d 8f       	std	Y+29, r24	; 0x1d
    3b98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <STM_vMove+0x4d0>
    3ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ba2:	8d 8f       	std	Y+29, r24	; 0x1d
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (s8 i = 3; i >= 0; i--)
    3ba4:	de 01       	movw	r26, r28
    3ba6:	aa 5b       	subi	r26, 0xBA	; 186
    3ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    3baa:	fe 01       	movw	r30, r28
    3bac:	ea 5b       	subi	r30, 0xBA	; 186
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	80 81       	ld	r24, Z
    3bb2:	81 50       	subi	r24, 0x01	; 1
    3bb4:	8c 93       	st	X, r24
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ea 5b       	subi	r30, 0xBA	; 186
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	88 23       	and	r24, r24
    3bc0:	0c f0       	brlt	.+2      	; 0x3bc4 <STM_vMove+0x4f8>
    3bc2:	25 cf       	rjmp	.-438    	; 0x3a0e <STM_vMove+0x342>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3bc4:	9e 01       	movw	r18, r28
    3bc6:	29 5b       	subi	r18, 0xB9	; 185
    3bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e9 5b       	subi	r30, 0xB9	; 185
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	80 81       	ld	r24, Z
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	a2 81       	ldd	r26, Z+2	; 0x02
    3bd6:	b3 81       	ldd	r27, Z+3	; 0x03
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	a1 1d       	adc	r26, r1
    3bdc:	b1 1d       	adc	r27, r1
    3bde:	f9 01       	movw	r30, r18
    3be0:	80 83       	st	Z, r24
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	a2 83       	std	Z+2, r26	; 0x02
    3be6:	b3 83       	std	Z+3, r27	; 0x03
    3be8:	fe 01       	movw	r30, r28
    3bea:	e9 5b       	subi	r30, 0xB9	; 185
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	de 01       	movw	r26, r28
    3bf0:	ad 5a       	subi	r26, 0xAD	; 173
    3bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf4:	20 81       	ld	r18, Z
    3bf6:	31 81       	ldd	r19, Z+1	; 0x01
    3bf8:	42 81       	ldd	r20, Z+2	; 0x02
    3bfa:	53 81       	ldd	r21, Z+3	; 0x03
    3bfc:	8d 91       	ld	r24, X+
    3bfe:	9d 91       	ld	r25, X+
    3c00:	0d 90       	ld	r0, X+
    3c02:	bc 91       	ld	r27, X
    3c04:	a0 2d       	mov	r26, r0
    3c06:	28 17       	cp	r18, r24
    3c08:	39 07       	cpc	r19, r25
    3c0a:	4a 07       	cpc	r20, r26
    3c0c:	5b 07       	cpc	r21, r27
    3c0e:	08 f4       	brcc	.+2      	; 0x3c12 <STM_vMove+0x546>
    3c10:	f8 ce       	rjmp	.-528    	; 0x3a02 <STM_vMove+0x336>
    3c12:	47 c2       	rjmp	.+1166   	; 0x40a2 <STM_vMove+0x9d6>
        default:
            break;
        }
        break;
    case HALF_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_HALF_STEP * 4)));
    3c14:	fe 01       	movw	r30, r28
    3c16:	e8 5a       	subi	r30, 0xA8	; 168
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	60 81       	ld	r22, Z
    3c1c:	71 81       	ldd	r23, Z+1	; 0x01
    3c1e:	82 81       	ldd	r24, Z+2	; 0x02
    3c20:	93 81       	ldd	r25, Z+3	; 0x03
    3c22:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	bc 01       	movw	r22, r24
    3c2c:	cd 01       	movw	r24, r26
    3c2e:	2a ee       	ldi	r18, 0xEA	; 234
    3c30:	34 e0       	ldi	r19, 0x04	; 4
    3c32:	44 eb       	ldi	r20, 0xB4	; 180
    3c34:	5e e3       	ldi	r21, 0x3E	; 62
    3c36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	0e 94 82 31 	call	0x6304	; 0x6304 <round>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8e 01       	movw	r16, r28
    3c4c:	0d 5a       	subi	r16, 0xAD	; 173
    3c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	80 83       	st	Z, r24
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	a2 83       	std	Z+2, r26	; 0x02
    3c64:	b3 83       	std	Z+3, r27	; 0x03
        switch (A_u8Direction)
    3c66:	fe 01       	movw	r30, r28
    3c68:	e9 5a       	subi	r30, 0xA9	; 169
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	80 81       	ld	r24, Z
    3c6e:	28 2f       	mov	r18, r24
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	6e 96       	adiw	r28, 0x1e	; 30
    3c74:	3f af       	std	Y+63, r19	; 0x3f
    3c76:	2e af       	std	Y+62, r18	; 0x3e
    3c78:	6e 97       	sbiw	r28, 0x1e	; 30
    3c7a:	6e 96       	adiw	r28, 0x1e	; 30
    3c7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c80:	6e 97       	sbiw	r28, 0x1e	; 30
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <STM_vMove+0x5bc>
    3c86:	23 c1       	rjmp	.+582    	; 0x3ece <STM_vMove+0x802>
    3c88:	6e 96       	adiw	r28, 0x1e	; 30
    3c8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c8e:	6e 97       	sbiw	r28, 0x1e	; 30
    3c90:	e1 30       	cpi	r30, 0x01	; 1
    3c92:	f1 05       	cpc	r31, r1
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <STM_vMove+0x5cc>
    3c96:	05 c2       	rjmp	.+1034   	; 0x40a2 <STM_vMove+0x9d6>
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ee 5b       	subi	r30, 0xBE	; 190
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	10 82       	st	Z, r1
    3ca0:	11 82       	std	Z+1, r1	; 0x01
    3ca2:	12 82       	std	Z+2, r1	; 0x02
    3ca4:	13 82       	std	Z+3, r1	; 0x03
    3ca6:	fd c0       	rjmp	.+506    	; 0x3ea2 <STM_vMove+0x7d6>
            {
                for (u32 i = 0; i < 8; i++)
    3ca8:	fe 01       	movw	r30, r28
    3caa:	fe 96       	adiw	r30, 0x3e	; 62
    3cac:	10 82       	st	Z, r1
    3cae:	11 82       	std	Z+1, r1	; 0x01
    3cb0:	12 82       	std	Z+2, r1	; 0x02
    3cb2:	13 82       	std	Z+3, r1	; 0x03
    3cb4:	d8 c0       	rjmp	.+432    	; 0x3e66 <STM_vMove+0x79a>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	fe 96       	adiw	r30, 0x3e	; 62
    3cba:	80 81       	ld	r24, Z
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	a2 81       	ldd	r26, Z+2	; 0x02
    3cc0:	b3 81       	ldd	r27, Z+3	; 0x03
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	fc 01       	movw	r30, r24
    3ccc:	ed 56       	subi	r30, 0x6D	; 109
    3cce:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd0:	90 81       	ld	r25, Z
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	49 2f       	mov	r20, r25
    3cd8:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    3cdc:	fe 01       	movw	r30, r28
    3cde:	fe 96       	adiw	r30, 0x3e	; 62
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ce6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	88 0f       	add	r24, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	ec 56       	subi	r30, 0x6C	; 108
    3cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf6:	90 81       	ld	r25, Z
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	62 e0       	ldi	r22, 0x02	; 2
    3cfc:	49 2f       	mov	r20, r25
    3cfe:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    3d02:	fe 01       	movw	r30, r28
    3d04:	fe 96       	adiw	r30, 0x3e	; 62
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	a2 81       	ldd	r26, Z+2	; 0x02
    3d0c:	b3 81       	ldd	r27, Z+3	; 0x03
    3d0e:	88 0f       	add	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	01 96       	adiw	r24, 0x01	; 1
    3d14:	88 0f       	add	r24, r24
    3d16:	99 1f       	adc	r25, r25
    3d18:	fc 01       	movw	r30, r24
    3d1a:	ed 56       	subi	r30, 0x6D	; 109
    3d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1e:	90 81       	ld	r25, Z
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	61 e0       	ldi	r22, 0x01	; 1
    3d24:	49 2f       	mov	r20, r25
    3d26:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	fe 96       	adiw	r30, 0x3e	; 62
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	a2 81       	ldd	r26, Z+2	; 0x02
    3d34:	b3 81       	ldd	r27, Z+3	; 0x03
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	fc 01       	movw	r30, r24
    3d40:	ea 56       	subi	r30, 0x6A	; 106
    3d42:	fe 4f       	sbci	r31, 0xFE	; 254
    3d44:	90 81       	ld	r25, Z
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	63 e0       	ldi	r22, 0x03	; 3
    3d4a:	49 2f       	mov	r20, r25
    3d4c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    3d50:	80 91 92 01 	lds	r24, 0x0192
    3d54:	88 2f       	mov	r24, r24
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	a0 e0       	ldi	r26, 0x00	; 0
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	89 8f       	std	Y+25, r24	; 0x19
    3d6a:	9a 8f       	std	Y+26, r25	; 0x1a
    3d6c:	ab 8f       	std	Y+27, r26	; 0x1b
    3d6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d70:	69 8d       	ldd	r22, Y+25	; 0x19
    3d72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	4a ef       	ldi	r20, 0xFA	; 250
    3d7e:	54 e4       	ldi	r21, 0x44	; 68
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	8d 8b       	std	Y+21, r24	; 0x15
    3d8a:	9e 8b       	std	Y+22, r25	; 0x16
    3d8c:	af 8b       	std	Y+23, r26	; 0x17
    3d8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d90:	6d 89       	ldd	r22, Y+21	; 0x15
    3d92:	7e 89       	ldd	r23, Y+22	; 0x16
    3d94:	8f 89       	ldd	r24, Y+23	; 0x17
    3d96:	98 8d       	ldd	r25, Y+24	; 0x18
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e8       	ldi	r20, 0x80	; 128
    3d9e:	5f e3       	ldi	r21, 0x3F	; 63
    3da0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3da4:	88 23       	and	r24, r24
    3da6:	2c f4       	brge	.+10     	; 0x3db2 <STM_vMove+0x6e6>
		__ticks = 1;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	9c 8b       	std	Y+20, r25	; 0x14
    3dae:	8b 8b       	std	Y+19, r24	; 0x13
    3db0:	3f c0       	rjmp	.+126    	; 0x3e30 <STM_vMove+0x764>
	else if (__tmp > 65535)
    3db2:	6d 89       	ldd	r22, Y+21	; 0x15
    3db4:	7e 89       	ldd	r23, Y+22	; 0x16
    3db6:	8f 89       	ldd	r24, Y+23	; 0x17
    3db8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	3f ef       	ldi	r19, 0xFF	; 255
    3dbe:	4f e7       	ldi	r20, 0x7F	; 127
    3dc0:	57 e4       	ldi	r21, 0x47	; 71
    3dc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dc6:	18 16       	cp	r1, r24
    3dc8:	4c f5       	brge	.+82     	; 0x3e1c <STM_vMove+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dca:	69 8d       	ldd	r22, Y+25	; 0x19
    3dcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	40 e2       	ldi	r20, 0x20	; 32
    3dd8:	51 e4       	ldi	r21, 0x41	; 65
    3dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	bc 01       	movw	r22, r24
    3de4:	cd 01       	movw	r24, r26
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	9c 8b       	std	Y+20, r25	; 0x14
    3df0:	8b 8b       	std	Y+19, r24	; 0x13
    3df2:	0f c0       	rjmp	.+30     	; 0x3e12 <STM_vMove+0x746>
    3df4:	88 ec       	ldi	r24, 0xC8	; 200
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	9a 8b       	std	Y+18, r25	; 0x12
    3dfa:	89 8b       	std	Y+17, r24	; 0x11
    3dfc:	89 89       	ldd	r24, Y+17	; 0x11
    3dfe:	9a 89       	ldd	r25, Y+18	; 0x12
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <STM_vMove+0x734>
    3e04:	9a 8b       	std	Y+18, r25	; 0x12
    3e06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e08:	8b 89       	ldd	r24, Y+19	; 0x13
    3e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	9c 8b       	std	Y+20, r25	; 0x14
    3e10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e12:	8b 89       	ldd	r24, Y+19	; 0x13
    3e14:	9c 89       	ldd	r25, Y+20	; 0x14
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	69 f7       	brne	.-38     	; 0x3df4 <STM_vMove+0x728>
    3e1a:	14 c0       	rjmp	.+40     	; 0x3e44 <STM_vMove+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    3e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    3e20:	8f 89       	ldd	r24, Y+23	; 0x17
    3e22:	98 8d       	ldd	r25, Y+24	; 0x18
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9c 8b       	std	Y+20, r25	; 0x14
    3e2e:	8b 8b       	std	Y+19, r24	; 0x13
    3e30:	8b 89       	ldd	r24, Y+19	; 0x13
    3e32:	9c 89       	ldd	r25, Y+20	; 0x14
    3e34:	98 8b       	std	Y+16, r25	; 0x10
    3e36:	8f 87       	std	Y+15, r24	; 0x0f
    3e38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e3a:	98 89       	ldd	r25, Y+16	; 0x10
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <STM_vMove+0x770>
    3e40:	98 8b       	std	Y+16, r25	; 0x10
    3e42:	8f 87       	std	Y+15, r24	; 0x0f
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (u32 i = 0; i < 8; i++)
    3e44:	9e 01       	movw	r18, r28
    3e46:	22 5c       	subi	r18, 0xC2	; 194
    3e48:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	fe 96       	adiw	r30, 0x3e	; 62
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	a2 81       	ldd	r26, Z+2	; 0x02
    3e54:	b3 81       	ldd	r27, Z+3	; 0x03
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	a1 1d       	adc	r26, r1
    3e5a:	b1 1d       	adc	r27, r1
    3e5c:	f9 01       	movw	r30, r18
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
    3e66:	fe 01       	movw	r30, r28
    3e68:	fe 96       	adiw	r30, 0x3e	; 62
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e70:	b3 81       	ldd	r27, Z+3	; 0x03
    3e72:	88 30       	cpi	r24, 0x08	; 8
    3e74:	91 05       	cpc	r25, r1
    3e76:	a1 05       	cpc	r26, r1
    3e78:	b1 05       	cpc	r27, r1
    3e7a:	08 f4       	brcc	.+2      	; 0x3e7e <STM_vMove+0x7b2>
    3e7c:	1c cf       	rjmp	.-456    	; 0x3cb6 <STM_vMove+0x5ea>
    case HALF_STEP:
        L_u8NumberSteps = round((A_u8Angle / (STEP_ANGLE_HALF_STEP * 4)));
        switch (A_u8Direction)
        {
        case ANTI_CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3e7e:	9e 01       	movw	r18, r28
    3e80:	2e 5b       	subi	r18, 0xBE	; 190
    3e82:	3f 4f       	sbci	r19, 0xFF	; 255
    3e84:	fe 01       	movw	r30, r28
    3e86:	ee 5b       	subi	r30, 0xBE	; 190
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e90:	b3 81       	ldd	r27, Z+3	; 0x03
    3e92:	01 96       	adiw	r24, 0x01	; 1
    3e94:	a1 1d       	adc	r26, r1
    3e96:	b1 1d       	adc	r27, r1
    3e98:	f9 01       	movw	r30, r18
    3e9a:	80 83       	st	Z, r24
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	a2 83       	std	Z+2, r26	; 0x02
    3ea0:	b3 83       	std	Z+3, r27	; 0x03
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	ee 5b       	subi	r30, 0xBE	; 190
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	de 01       	movw	r26, r28
    3eaa:	ad 5a       	subi	r26, 0xAD	; 173
    3eac:	bf 4f       	sbci	r27, 0xFF	; 255
    3eae:	20 81       	ld	r18, Z
    3eb0:	31 81       	ldd	r19, Z+1	; 0x01
    3eb2:	42 81       	ldd	r20, Z+2	; 0x02
    3eb4:	53 81       	ldd	r21, Z+3	; 0x03
    3eb6:	8d 91       	ld	r24, X+
    3eb8:	9d 91       	ld	r25, X+
    3eba:	0d 90       	ld	r0, X+
    3ebc:	bc 91       	ld	r27, X
    3ebe:	a0 2d       	mov	r26, r0
    3ec0:	28 17       	cp	r18, r24
    3ec2:	39 07       	cpc	r19, r25
    3ec4:	4a 07       	cpc	r20, r26
    3ec6:	5b 07       	cpc	r21, r27
    3ec8:	08 f4       	brcc	.+2      	; 0x3ecc <STM_vMove+0x800>
    3eca:	ee ce       	rjmp	.-548    	; 0x3ca8 <STM_vMove+0x5dc>
    3ecc:	ea c0       	rjmp	.+468    	; 0x40a2 <STM_vMove+0x9d6>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    3ece:	1a ae       	std	Y+58, r1	; 0x3a
    3ed0:	1b ae       	std	Y+59, r1	; 0x3b
    3ed2:	1c ae       	std	Y+60, r1	; 0x3c
    3ed4:	1d ae       	std	Y+61, r1	; 0x3d
    3ed6:	d4 c0       	rjmp	.+424    	; 0x4080 <STM_vMove+0x9b4>
            {
                for (s8 i = 7; i >= 0; i--)
    3ed8:	87 e0       	ldi	r24, 0x07	; 7
    3eda:	89 af       	std	Y+57, r24	; 0x39
    3edc:	c2 c0       	rjmp	.+388    	; 0x4062 <STM_vMove+0x996>
                {
                    DIO_vSetPinVal(COIL_ORANGE_PORT, COIL_ORANGE_PIN, G_u8HalfStepSeq[i][0]);
    3ede:	89 ad       	ldd	r24, Y+57	; 0x39
    3ee0:	99 27       	eor	r25, r25
    3ee2:	87 fd       	sbrc	r24, 7
    3ee4:	90 95       	com	r25
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	fc 01       	movw	r30, r24
    3ef0:	ed 56       	subi	r30, 0x6D	; 109
    3ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ef4:	90 81       	ld	r25, Z
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	60 e0       	ldi	r22, 0x00	; 0
    3efa:	49 2f       	mov	r20, r25
    3efc:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_YELLOW_PORT, COIL_YELLOW_PIN, G_u8HalfStepSeq[i][1]);
    3f00:	89 ad       	ldd	r24, Y+57	; 0x39
    3f02:	99 27       	eor	r25, r25
    3f04:	87 fd       	sbrc	r24, 7
    3f06:	90 95       	com	r25
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	fc 01       	movw	r30, r24
    3f12:	ec 56       	subi	r30, 0x6C	; 108
    3f14:	fe 4f       	sbci	r31, 0xFE	; 254
    3f16:	90 81       	ld	r25, Z
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	62 e0       	ldi	r22, 0x02	; 2
    3f1c:	49 2f       	mov	r20, r25
    3f1e:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_PINK_PORT, COIL_PINK_PIN, G_u8HalfStepSeq[i][2]);
    3f22:	89 ad       	ldd	r24, Y+57	; 0x39
    3f24:	99 27       	eor	r25, r25
    3f26:	87 fd       	sbrc	r24, 7
    3f28:	90 95       	com	r25
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	01 96       	adiw	r24, 0x01	; 1
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	fc 01       	movw	r30, r24
    3f36:	ed 56       	subi	r30, 0x6D	; 109
    3f38:	fe 4f       	sbci	r31, 0xFE	; 254
    3f3a:	90 81       	ld	r25, Z
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	61 e0       	ldi	r22, 0x01	; 1
    3f40:	49 2f       	mov	r20, r25
    3f42:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    DIO_vSetPinVal(COIL_BLUE_PORT, COIL_BLUE_PIN, G_u8HalfStepSeq[i][3]);
    3f46:	89 ad       	ldd	r24, Y+57	; 0x39
    3f48:	99 27       	eor	r25, r25
    3f4a:	87 fd       	sbrc	r24, 7
    3f4c:	90 95       	com	r25
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	88 0f       	add	r24, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	fc 01       	movw	r30, r24
    3f58:	ea 56       	subi	r30, 0x6A	; 106
    3f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5c:	90 81       	ld	r25, Z
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	63 e0       	ldi	r22, 0x03	; 3
    3f62:	49 2f       	mov	r20, r25
    3f64:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
                    _delay_ms(G_u8DelayTimeInMs);
    3f68:	80 91 92 01 	lds	r24, 0x0192
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	a0 e0       	ldi	r26, 0x00	; 0
    3f72:	b0 e0       	ldi	r27, 0x00	; 0
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	8b 87       	std	Y+11, r24	; 0x0b
    3f82:	9c 87       	std	Y+12, r25	; 0x0c
    3f84:	ad 87       	std	Y+13, r26	; 0x0d
    3f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	4a ef       	ldi	r20, 0xFA	; 250
    3f96:	54 e4       	ldi	r21, 0x44	; 68
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8f 83       	std	Y+7, r24	; 0x07
    3fa2:	98 87       	std	Y+8, r25	; 0x08
    3fa4:	a9 87       	std	Y+9, r26	; 0x09
    3fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3faa:	78 85       	ldd	r23, Y+8	; 0x08
    3fac:	89 85       	ldd	r24, Y+9	; 0x09
    3fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5f e3       	ldi	r21, 0x3F	; 63
    3fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fbc:	88 23       	and	r24, r24
    3fbe:	2c f4       	brge	.+10     	; 0x3fca <STM_vMove+0x8fe>
		__ticks = 1;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	3f c0       	rjmp	.+126    	; 0x4048 <STM_vMove+0x97c>
	else if (__tmp > 65535)
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	4c f5       	brge	.+82     	; 0x4034 <STM_vMove+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9e 83       	std	Y+6, r25	; 0x06
    4008:	8d 83       	std	Y+5, r24	; 0x05
    400a:	0f c0       	rjmp	.+30     	; 0x402a <STM_vMove+0x95e>
    400c:	88 ec       	ldi	r24, 0xC8	; 200
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	9c 81       	ldd	r25, Y+4	; 0x04
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <STM_vMove+0x94c>
    401c:	9c 83       	std	Y+4, r25	; 0x04
    401e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	9e 81       	ldd	r25, Y+6	; 0x06
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	69 f7       	brne	.-38     	; 0x400c <STM_vMove+0x940>
    4032:	14 c0       	rjmp	.+40     	; 0x405c <STM_vMove+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4034:	6f 81       	ldd	r22, Y+7	; 0x07
    4036:	78 85       	ldd	r23, Y+8	; 0x08
    4038:	89 85       	ldd	r24, Y+9	; 0x09
    403a:	9a 85       	ldd	r25, Y+10	; 0x0a
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	9e 81       	ldd	r25, Y+6	; 0x06
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <STM_vMove+0x988>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
            {
                for (s8 i = 7; i >= 0; i--)
    405c:	89 ad       	ldd	r24, Y+57	; 0x39
    405e:	81 50       	subi	r24, 0x01	; 1
    4060:	89 af       	std	Y+57, r24	; 0x39
    4062:	89 ad       	ldd	r24, Y+57	; 0x39
    4064:	88 23       	and	r24, r24
    4066:	0c f0       	brlt	.+2      	; 0x406a <STM_vMove+0x99e>
    4068:	3a cf       	rjmp	.-396    	; 0x3ede <STM_vMove+0x812>
                    _delay_ms(G_u8DelayTimeInMs);
                }
            }
            break;
        case CLOCKWISE:
            for (u32 i = 0; i < L_u8NumberSteps; i++)
    406a:	8a ad       	ldd	r24, Y+58	; 0x3a
    406c:	9b ad       	ldd	r25, Y+59	; 0x3b
    406e:	ac ad       	ldd	r26, Y+60	; 0x3c
    4070:	bd ad       	ldd	r27, Y+61	; 0x3d
    4072:	01 96       	adiw	r24, 0x01	; 1
    4074:	a1 1d       	adc	r26, r1
    4076:	b1 1d       	adc	r27, r1
    4078:	8a af       	std	Y+58, r24	; 0x3a
    407a:	9b af       	std	Y+59, r25	; 0x3b
    407c:	ac af       	std	Y+60, r26	; 0x3c
    407e:	bd af       	std	Y+61, r27	; 0x3d
    4080:	fe 01       	movw	r30, r28
    4082:	ed 5a       	subi	r30, 0xAD	; 173
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	2a ad       	ldd	r18, Y+58	; 0x3a
    4088:	3b ad       	ldd	r19, Y+59	; 0x3b
    408a:	4c ad       	ldd	r20, Y+60	; 0x3c
    408c:	5d ad       	ldd	r21, Y+61	; 0x3d
    408e:	80 81       	ld	r24, Z
    4090:	91 81       	ldd	r25, Z+1	; 0x01
    4092:	a2 81       	ldd	r26, Z+2	; 0x02
    4094:	b3 81       	ldd	r27, Z+3	; 0x03
    4096:	28 17       	cp	r18, r24
    4098:	39 07       	cpc	r19, r25
    409a:	4a 07       	cpc	r20, r26
    409c:	5b 07       	cpc	r21, r27
    409e:	08 f4       	brcc	.+2      	; 0x40a2 <STM_vMove+0x9d6>
    40a0:	1b cf       	rjmp	.-458    	; 0x3ed8 <STM_vMove+0x80c>
        }
        break;
    default:
        break;
    }
};
    40a2:	cf 59       	subi	r28, 0x9F	; 159
    40a4:	df 4f       	sbci	r29, 0xFF	; 255
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	08 95       	ret

000040ba <SSD_vInit>:
#include "SSD_cfg.h"
#include "SSD_int.h"
#include <avr/delay.h>

void SSD_vInit(u8 A_u8SSDId)
{
    40ba:	df 93       	push	r29
    40bc:	cf 93       	push	r28
    40be:	00 d0       	rcall	.+0      	; 0x40c0 <SSD_vInit+0x6>
    40c0:	0f 92       	push	r0
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	28 2f       	mov	r18, r24
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	3b 83       	std	Y+3, r19	; 0x03
    40d0:	2a 83       	std	Y+2, r18	; 0x02
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	9b 81       	ldd	r25, Y+3	; 0x03
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	31 f0       	breq	.+12     	; 0x40e6 <SSD_vInit+0x2c>
    40da:	2a 81       	ldd	r18, Y+2	; 0x02
    40dc:	3b 81       	ldd	r19, Y+3	; 0x03
    40de:	21 30       	cpi	r18, 0x01	; 1
    40e0:	31 05       	cpc	r19, r1
    40e2:	a1 f0       	breq	.+40     	; 0x410c <SSD_vInit+0x52>
    40e4:	25 c0       	rjmp	.+74     	; 0x4130 <SSD_vInit+0x76>
    {
    case SSD0:
        DIO_vSetPortDir(SSD0_DATA_PORT, PORT_OUT);
    40e6:	82 e0       	ldi	r24, 0x02	; 2
    40e8:	6f ef       	ldi	r22, 0xFF	; 255
    40ea:	0e 94 4c 12 	call	0x2498	; 0x2498 <DIO_vSetPortDir>
        DIO_vSetPinDir(SSD0_EN_PORT, SSD0_EN_PIN, DIR_OUTPUT);
    40ee:	82 e0       	ldi	r24, 0x02	; 2
    40f0:	67 e0       	ldi	r22, 0x07	; 7
    40f2:	41 e0       	ldi	r20, 0x01	; 1
    40f4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        DIO_vSetPortVal(SSD1_DATA_PORT, PORT_LOW);
    40f8:	83 e0       	ldi	r24, 0x03	; 3
    40fa:	60 e0       	ldi	r22, 0x00	; 0
    40fc:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, LOW);
    4100:	82 e0       	ldi	r24, 0x02	; 2
    4102:	67 e0       	ldi	r22, 0x07	; 7
    4104:	40 e0       	ldi	r20, 0x00	; 0
    4106:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    410a:	12 c0       	rjmp	.+36     	; 0x4130 <SSD_vInit+0x76>
        break;
    case SSD1:
        DIO_vSetPortDir(SSD1_DATA_PORT, PORT_OUT);
    410c:	83 e0       	ldi	r24, 0x03	; 3
    410e:	6f ef       	ldi	r22, 0xFF	; 255
    4110:	0e 94 4c 12 	call	0x2498	; 0x2498 <DIO_vSetPortDir>
        DIO_vSetPinDir(SSD1_EN_PORT, SSD1_EN_PIN, DIR_OUTPUT);
    4114:	83 e0       	ldi	r24, 0x03	; 3
    4116:	67 e0       	ldi	r22, 0x07	; 7
    4118:	41 e0       	ldi	r20, 0x01	; 1
    411a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        DIO_vSetPortVal(SSD1_DATA_PORT, PORT_LOW);
    411e:	83 e0       	ldi	r24, 0x03	; 3
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, LOW);
    4126:	83 e0       	ldi	r24, 0x03	; 3
    4128:	67 e0       	ldi	r22, 0x07	; 7
    412a:	40 e0       	ldi	r20, 0x00	; 0
    412c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
};
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <SSD_vTurnOn>:

void SSD_vTurnOn(u8 A_u8SSDId)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <SSD_vTurnOn+0x6>
    4142:	0f 92       	push	r0
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	28 2f       	mov	r18, r24
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	3b 83       	std	Y+3, r19	; 0x03
    4152:	2a 83       	std	Y+2, r18	; 0x02
    4154:	8a 81       	ldd	r24, Y+2	; 0x02
    4156:	9b 81       	ldd	r25, Y+3	; 0x03
    4158:	00 97       	sbiw	r24, 0x00	; 0
    415a:	31 f0       	breq	.+12     	; 0x4168 <SSD_vTurnOn+0x2c>
    415c:	2a 81       	ldd	r18, Y+2	; 0x02
    415e:	3b 81       	ldd	r19, Y+3	; 0x03
    4160:	21 30       	cpi	r18, 0x01	; 1
    4162:	31 05       	cpc	r19, r1
    4164:	39 f0       	breq	.+14     	; 0x4174 <SSD_vTurnOn+0x38>
    4166:	0b c0       	rjmp	.+22     	; 0x417e <SSD_vTurnOn+0x42>
    {
    case SSD0:
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, LOW);
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	67 e0       	ldi	r22, 0x07	; 7
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4172:	05 c0       	rjmp	.+10     	; 0x417e <SSD_vTurnOn+0x42>
        break;
    case SSD1:
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, LOW);
    4174:	83 e0       	ldi	r24, 0x03	; 3
    4176:	67 e0       	ldi	r22, 0x07	; 7
    4178:	40 e0       	ldi	r20, 0x00	; 0
    417a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    417e:	0f 90       	pop	r0
    4180:	0f 90       	pop	r0
    4182:	0f 90       	pop	r0
    4184:	cf 91       	pop	r28
    4186:	df 91       	pop	r29
    4188:	08 95       	ret

0000418a <SSD_vTurnOff>:
void SSD_vTurnOff(u8 A_u8SSDId)
{
    418a:	df 93       	push	r29
    418c:	cf 93       	push	r28
    418e:	00 d0       	rcall	.+0      	; 0x4190 <SSD_vTurnOff+0x6>
    4190:	0f 92       	push	r0
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	89 83       	std	Y+1, r24	; 0x01
#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    4198:	89 81       	ldd	r24, Y+1	; 0x01
    419a:	28 2f       	mov	r18, r24
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	3b 83       	std	Y+3, r19	; 0x03
    41a0:	2a 83       	std	Y+2, r18	; 0x02
    41a2:	8a 81       	ldd	r24, Y+2	; 0x02
    41a4:	9b 81       	ldd	r25, Y+3	; 0x03
    41a6:	00 97       	sbiw	r24, 0x00	; 0
    41a8:	31 f0       	breq	.+12     	; 0x41b6 <SSD_vTurnOff+0x2c>
    41aa:	2a 81       	ldd	r18, Y+2	; 0x02
    41ac:	3b 81       	ldd	r19, Y+3	; 0x03
    41ae:	21 30       	cpi	r18, 0x01	; 1
    41b0:	31 05       	cpc	r19, r1
    41b2:	39 f0       	breq	.+14     	; 0x41c2 <SSD_vTurnOff+0x38>
    41b4:	0b c0       	rjmp	.+22     	; 0x41cc <SSD_vTurnOff+0x42>
    {
    case SSD0:
        DIO_vSetPinVal(SSD0_EN_PORT, SSD0_EN_PIN, HIGH);
    41b6:	82 e0       	ldi	r24, 0x02	; 2
    41b8:	67 e0       	ldi	r22, 0x07	; 7
    41ba:	41 e0       	ldi	r20, 0x01	; 1
    41bc:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    41c0:	05 c0       	rjmp	.+10     	; 0x41cc <SSD_vTurnOff+0x42>
        break;
    case SSD1:
        DIO_vSetPinVal(SSD1_EN_PORT, SSD1_EN_PIN, HIGH);
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	67 e0       	ldi	r22, 0x07	; 7
    41c6:	41 e0       	ldi	r20, 0x01	; 1
    41c8:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        break;
    default:
        break;
    }
#endif
}
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	cf 91       	pop	r28
    41d4:	df 91       	pop	r29
    41d6:	08 95       	ret

000041d8 <SSD_vDisplayNumber>:
void SSD_vDisplayNumber(u8 A_u8SSDId, u8 A_u8Number)
{
    41d8:	df 93       	push	r29
    41da:	cf 93       	push	r28
    41dc:	00 d0       	rcall	.+0      	; 0x41de <SSD_vDisplayNumber+0x6>
    41de:	00 d0       	rcall	.+0      	; 0x41e0 <SSD_vDisplayNumber+0x8>
    41e0:	cd b7       	in	r28, 0x3d	; 61
    41e2:	de b7       	in	r29, 0x3e	; 62
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	6a 83       	std	Y+2, r22	; 0x02
    static const u8 L_u8NumbersCathode[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};

#if SSD_COMM == CATHODE
    switch (A_u8SSDId)
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	28 2f       	mov	r18, r24
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	3c 83       	std	Y+4, r19	; 0x04
    41f0:	2b 83       	std	Y+3, r18	; 0x03
    41f2:	8b 81       	ldd	r24, Y+3	; 0x03
    41f4:	9c 81       	ldd	r25, Y+4	; 0x04
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	31 f0       	breq	.+12     	; 0x4206 <SSD_vDisplayNumber+0x2e>
    41fa:	2b 81       	ldd	r18, Y+3	; 0x03
    41fc:	3c 81       	ldd	r19, Y+4	; 0x04
    41fe:	21 30       	cpi	r18, 0x01	; 1
    4200:	31 05       	cpc	r19, r1
    4202:	69 f0       	breq	.+26     	; 0x421e <SSD_vDisplayNumber+0x46>
    4204:	17 c0       	rjmp	.+46     	; 0x4234 <SSD_vDisplayNumber+0x5c>
    {
    case SSD0:
        DIO_vSetPortVal(SSD0_DATA_PORT, L_u8NumbersCathode[A_u8Number]);
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	88 2f       	mov	r24, r24
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	fc 01       	movw	r30, r24
    420e:	ed 53       	subi	r30, 0x3D	; 61
    4210:	fe 4f       	sbci	r31, 0xFE	; 254
    4212:	90 81       	ld	r25, Z
    4214:	82 e0       	ldi	r24, 0x02	; 2
    4216:	69 2f       	mov	r22, r25
    4218:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    421c:	0b c0       	rjmp	.+22     	; 0x4234 <SSD_vDisplayNumber+0x5c>
        break;
    case SSD1:
        DIO_vSetPortVal(SSD1_DATA_PORT, L_u8NumbersCathode[A_u8Number]);
    421e:	8a 81       	ldd	r24, Y+2	; 0x02
    4220:	88 2f       	mov	r24, r24
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	fc 01       	movw	r30, r24
    4226:	ed 53       	subi	r30, 0x3D	; 61
    4228:	fe 4f       	sbci	r31, 0xFE	; 254
    422a:	90 81       	ld	r25, Z
    422c:	83 e0       	ldi	r24, 0x03	; 3
    422e:	69 2f       	mov	r22, r25
    4230:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
        break;
    default:
        break;
    }
#endif
};
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <SSD_vTurnOnRightSide>:

void SSD_vTurnOnRightSide(u8 A_u8SSDId)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	a1 97       	sbiw	r28, 0x21	; 33
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	f8 94       	cli
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	0f be       	out	0x3f, r0	; 63
    4254:	cd bf       	out	0x3d, r28	; 61
    4256:	8f 8f       	std	Y+31, r24	; 0x1f
    switch (A_u8SSDId)
    4258:	8f 8d       	ldd	r24, Y+31	; 0x1f
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	39 a3       	std	Y+33, r19	; 0x21
    4260:	28 a3       	std	Y+32, r18	; 0x20
    4262:	88 a1       	ldd	r24, Y+32	; 0x20
    4264:	99 a1       	ldd	r25, Y+33	; 0x21
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	39 f0       	breq	.+14     	; 0x4278 <SSD_vTurnOnRightSide+0x36>
    426a:	28 a1       	ldd	r18, Y+32	; 0x20
    426c:	39 a1       	ldd	r19, Y+33	; 0x21
    426e:	21 30       	cpi	r18, 0x01	; 1
    4270:	31 05       	cpc	r19, r1
    4272:	09 f4       	brne	.+2      	; 0x4276 <SSD_vTurnOnRightSide+0x34>
    4274:	90 c0       	rjmp	.+288    	; 0x4396 <SSD_vTurnOnRightSide+0x154>
    4276:	1d c1       	rjmp	.+570    	; 0x44b2 <SSD_vTurnOnRightSide+0x270>
    {
    case SSD0:
        for (u8 i = 0; i < 4; i++)
    4278:	1e 8e       	std	Y+30, r1	; 0x1e
    427a:	84 c0       	rjmp	.+264    	; 0x4384 <SSD_vTurnOnRightSide+0x142>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
    427c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    427e:	28 2f       	mov	r18, r24
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	02 c0       	rjmp	.+4      	; 0x428c <SSD_vTurnOnRightSide+0x4a>
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	2a 95       	dec	r18
    428e:	e2 f7       	brpl	.-8      	; 0x4288 <SSD_vTurnOnRightSide+0x46>
    4290:	98 2f       	mov	r25, r24
    4292:	82 e0       	ldi	r24, 0x02	; 2
    4294:	69 2f       	mov	r22, r25
    4296:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	aa ef       	ldi	r26, 0xFA	; 250
    42a0:	b3 e4       	ldi	r27, 0x43	; 67
    42a2:	89 8f       	std	Y+25, r24	; 0x19
    42a4:	9a 8f       	std	Y+26, r25	; 0x1a
    42a6:	ab 8f       	std	Y+27, r26	; 0x1b
    42a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42aa:	69 8d       	ldd	r22, Y+25	; 0x19
    42ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	4a ef       	ldi	r20, 0xFA	; 250
    42b8:	54 e4       	ldi	r21, 0x44	; 68
    42ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	8d 8b       	std	Y+21, r24	; 0x15
    42c4:	9e 8b       	std	Y+22, r25	; 0x16
    42c6:	af 8b       	std	Y+23, r26	; 0x17
    42c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42ca:	6d 89       	ldd	r22, Y+21	; 0x15
    42cc:	7e 89       	ldd	r23, Y+22	; 0x16
    42ce:	8f 89       	ldd	r24, Y+23	; 0x17
    42d0:	98 8d       	ldd	r25, Y+24	; 0x18
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e8       	ldi	r20, 0x80	; 128
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42de:	88 23       	and	r24, r24
    42e0:	2c f4       	brge	.+10     	; 0x42ec <SSD_vTurnOnRightSide+0xaa>
		__ticks = 1;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	9c 8b       	std	Y+20, r25	; 0x14
    42e8:	8b 8b       	std	Y+19, r24	; 0x13
    42ea:	3f c0       	rjmp	.+126    	; 0x436a <SSD_vTurnOnRightSide+0x128>
	else if (__tmp > 65535)
    42ec:	6d 89       	ldd	r22, Y+21	; 0x15
    42ee:	7e 89       	ldd	r23, Y+22	; 0x16
    42f0:	8f 89       	ldd	r24, Y+23	; 0x17
    42f2:	98 8d       	ldd	r25, Y+24	; 0x18
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	3f ef       	ldi	r19, 0xFF	; 255
    42f8:	4f e7       	ldi	r20, 0x7F	; 127
    42fa:	57 e4       	ldi	r21, 0x47	; 71
    42fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4300:	18 16       	cp	r1, r24
    4302:	4c f5       	brge	.+82     	; 0x4356 <SSD_vTurnOnRightSide+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4304:	69 8d       	ldd	r22, Y+25	; 0x19
    4306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    430a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e2       	ldi	r20, 0x20	; 32
    4312:	51 e4       	ldi	r21, 0x41	; 65
    4314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9c 8b       	std	Y+20, r25	; 0x14
    432a:	8b 8b       	std	Y+19, r24	; 0x13
    432c:	0f c0       	rjmp	.+30     	; 0x434c <SSD_vTurnOnRightSide+0x10a>
    432e:	88 ec       	ldi	r24, 0xC8	; 200
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	9a 8b       	std	Y+18, r25	; 0x12
    4334:	89 8b       	std	Y+17, r24	; 0x11
    4336:	89 89       	ldd	r24, Y+17	; 0x11
    4338:	9a 89       	ldd	r25, Y+18	; 0x12
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	f1 f7       	brne	.-4      	; 0x433a <SSD_vTurnOnRightSide+0xf8>
    433e:	9a 8b       	std	Y+18, r25	; 0x12
    4340:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4342:	8b 89       	ldd	r24, Y+19	; 0x13
    4344:	9c 89       	ldd	r25, Y+20	; 0x14
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	9c 8b       	std	Y+20, r25	; 0x14
    434a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434c:	8b 89       	ldd	r24, Y+19	; 0x13
    434e:	9c 89       	ldd	r25, Y+20	; 0x14
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	69 f7       	brne	.-38     	; 0x432e <SSD_vTurnOnRightSide+0xec>
    4354:	14 c0       	rjmp	.+40     	; 0x437e <SSD_vTurnOnRightSide+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4356:	6d 89       	ldd	r22, Y+21	; 0x15
    4358:	7e 89       	ldd	r23, Y+22	; 0x16
    435a:	8f 89       	ldd	r24, Y+23	; 0x17
    435c:	98 8d       	ldd	r25, Y+24	; 0x18
    435e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9c 8b       	std	Y+20, r25	; 0x14
    4368:	8b 8b       	std	Y+19, r24	; 0x13
    436a:	8b 89       	ldd	r24, Y+19	; 0x13
    436c:	9c 89       	ldd	r25, Y+20	; 0x14
    436e:	98 8b       	std	Y+16, r25	; 0x10
    4370:	8f 87       	std	Y+15, r24	; 0x0f
    4372:	8f 85       	ldd	r24, Y+15	; 0x0f
    4374:	98 89       	ldd	r25, Y+16	; 0x10
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <SSD_vTurnOnRightSide+0x134>
    437a:	98 8b       	std	Y+16, r25	; 0x10
    437c:	8f 87       	std	Y+15, r24	; 0x0f
void SSD_vTurnOnRightSide(u8 A_u8SSDId)
{
    switch (A_u8SSDId)
    {
    case SSD0:
        for (u8 i = 0; i < 4; i++)
    437e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4380:	8f 5f       	subi	r24, 0xFF	; 255
    4382:	8e 8f       	std	Y+30, r24	; 0x1e
    4384:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4386:	84 30       	cpi	r24, 0x04	; 4
    4388:	08 f4       	brcc	.+2      	; 0x438c <SSD_vTurnOnRightSide+0x14a>
    438a:	78 cf       	rjmp	.-272    	; 0x427c <SSD_vTurnOnRightSide+0x3a>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, 0x00);
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    4394:	8e c0       	rjmp	.+284    	; 0x44b2 <SSD_vTurnOnRightSide+0x270>
        break;
    case SSD1:
        for (u8 i = 0; i < 4; i++)
    4396:	1d 8e       	std	Y+29, r1	; 0x1d
    4398:	84 c0       	rjmp	.+264    	; 0x44a2 <SSD_vTurnOnRightSide+0x260>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i));
    439a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    439c:	28 2f       	mov	r18, r24
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	02 c0       	rjmp	.+4      	; 0x43aa <SSD_vTurnOnRightSide+0x168>
    43a6:	88 0f       	add	r24, r24
    43a8:	99 1f       	adc	r25, r25
    43aa:	2a 95       	dec	r18
    43ac:	e2 f7       	brpl	.-8      	; 0x43a6 <SSD_vTurnOnRightSide+0x164>
    43ae:	98 2f       	mov	r25, r24
    43b0:	83 e0       	ldi	r24, 0x03	; 3
    43b2:	69 2f       	mov	r22, r25
    43b4:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	aa ef       	ldi	r26, 0xFA	; 250
    43be:	b3 e4       	ldi	r27, 0x43	; 67
    43c0:	8b 87       	std	Y+11, r24	; 0x0b
    43c2:	9c 87       	std	Y+12, r25	; 0x0c
    43c4:	ad 87       	std	Y+13, r26	; 0x0d
    43c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    43cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	4a ef       	ldi	r20, 0xFA	; 250
    43d6:	54 e4       	ldi	r21, 0x44	; 68
    43d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	8f 83       	std	Y+7, r24	; 0x07
    43e2:	98 87       	std	Y+8, r25	; 0x08
    43e4:	a9 87       	std	Y+9, r26	; 0x09
    43e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43e8:	6f 81       	ldd	r22, Y+7	; 0x07
    43ea:	78 85       	ldd	r23, Y+8	; 0x08
    43ec:	89 85       	ldd	r24, Y+9	; 0x09
    43ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	40 e8       	ldi	r20, 0x80	; 128
    43f6:	5f e3       	ldi	r21, 0x3F	; 63
    43f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43fc:	88 23       	and	r24, r24
    43fe:	2c f4       	brge	.+10     	; 0x440a <SSD_vTurnOnRightSide+0x1c8>
		__ticks = 1;
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	9e 83       	std	Y+6, r25	; 0x06
    4406:	8d 83       	std	Y+5, r24	; 0x05
    4408:	3f c0       	rjmp	.+126    	; 0x4488 <SSD_vTurnOnRightSide+0x246>
	else if (__tmp > 65535)
    440a:	6f 81       	ldd	r22, Y+7	; 0x07
    440c:	78 85       	ldd	r23, Y+8	; 0x08
    440e:	89 85       	ldd	r24, Y+9	; 0x09
    4410:	9a 85       	ldd	r25, Y+10	; 0x0a
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	3f ef       	ldi	r19, 0xFF	; 255
    4416:	4f e7       	ldi	r20, 0x7F	; 127
    4418:	57 e4       	ldi	r21, 0x47	; 71
    441a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    441e:	18 16       	cp	r1, r24
    4420:	4c f5       	brge	.+82     	; 0x4474 <SSD_vTurnOnRightSide+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4422:	6b 85       	ldd	r22, Y+11	; 0x0b
    4424:	7c 85       	ldd	r23, Y+12	; 0x0c
    4426:	8d 85       	ldd	r24, Y+13	; 0x0d
    4428:	9e 85       	ldd	r25, Y+14	; 0x0e
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	40 e2       	ldi	r20, 0x20	; 32
    4430:	51 e4       	ldi	r21, 0x41	; 65
    4432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	bc 01       	movw	r22, r24
    443c:	cd 01       	movw	r24, r26
    443e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	8d 83       	std	Y+5, r24	; 0x05
    444a:	0f c0       	rjmp	.+30     	; 0x446a <SSD_vTurnOnRightSide+0x228>
    444c:	88 ec       	ldi	r24, 0xC8	; 200
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	9c 83       	std	Y+4, r25	; 0x04
    4452:	8b 83       	std	Y+3, r24	; 0x03
    4454:	8b 81       	ldd	r24, Y+3	; 0x03
    4456:	9c 81       	ldd	r25, Y+4	; 0x04
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <SSD_vTurnOnRightSide+0x216>
    445c:	9c 83       	std	Y+4, r25	; 0x04
    445e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4460:	8d 81       	ldd	r24, Y+5	; 0x05
    4462:	9e 81       	ldd	r25, Y+6	; 0x06
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	9e 83       	std	Y+6, r25	; 0x06
    4468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    446a:	8d 81       	ldd	r24, Y+5	; 0x05
    446c:	9e 81       	ldd	r25, Y+6	; 0x06
    446e:	00 97       	sbiw	r24, 0x00	; 0
    4470:	69 f7       	brne	.-38     	; 0x444c <SSD_vTurnOnRightSide+0x20a>
    4472:	14 c0       	rjmp	.+40     	; 0x449c <SSD_vTurnOnRightSide+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4474:	6f 81       	ldd	r22, Y+7	; 0x07
    4476:	78 85       	ldd	r23, Y+8	; 0x08
    4478:	89 85       	ldd	r24, Y+9	; 0x09
    447a:	9a 85       	ldd	r25, Y+10	; 0x0a
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	9e 83       	std	Y+6, r25	; 0x06
    4486:	8d 83       	std	Y+5, r24	; 0x05
    4488:	8d 81       	ldd	r24, Y+5	; 0x05
    448a:	9e 81       	ldd	r25, Y+6	; 0x06
    448c:	9a 83       	std	Y+2, r25	; 0x02
    448e:	89 83       	std	Y+1, r24	; 0x01
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	9a 81       	ldd	r25, Y+2	; 0x02
    4494:	01 97       	sbiw	r24, 0x01	; 1
    4496:	f1 f7       	brne	.-4      	; 0x4494 <SSD_vTurnOnRightSide+0x252>
    4498:	9a 83       	std	Y+2, r25	; 0x02
    449a:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, 0x00);
        break;
    case SSD1:
        for (u8 i = 0; i < 4; i++)
    449c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    449e:	8f 5f       	subi	r24, 0xFF	; 255
    44a0:	8d 8f       	std	Y+29, r24	; 0x1d
    44a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44a4:	84 30       	cpi	r24, 0x04	; 4
    44a6:	08 f4       	brcc	.+2      	; 0x44aa <SSD_vTurnOnRightSide+0x268>
    44a8:	78 cf       	rjmp	.-272    	; 0x439a <SSD_vTurnOnRightSide+0x158>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	60 e0       	ldi	r22, 0x00	; 0
    44ae:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
        break;

    default:
        break;
    }
};
    44b2:	a1 96       	adiw	r28, 0x21	; 33
    44b4:	0f b6       	in	r0, 0x3f	; 63
    44b6:	f8 94       	cli
    44b8:	de bf       	out	0x3e, r29	; 62
    44ba:	0f be       	out	0x3f, r0	; 63
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <SSD_vTurnOnLeftSide>:
void SSD_vTurnOnLeftSide(u8 A_u8SSDId)
{
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	ed 97       	sbiw	r28, 0x3d	; 61
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	8b af       	std	Y+59, r24	; 0x3b
    switch (A_u8SSDId)
    44da:	8b ad       	ldd	r24, Y+59	; 0x3b
    44dc:	28 2f       	mov	r18, r24
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	3d af       	std	Y+61, r19	; 0x3d
    44e2:	2c af       	std	Y+60, r18	; 0x3c
    44e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    44e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	39 f0       	breq	.+14     	; 0x44fa <SSD_vTurnOnLeftSide+0x36>
    44ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    44ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    44f0:	21 30       	cpi	r18, 0x01	; 1
    44f2:	31 05       	cpc	r19, r1
    44f4:	09 f4       	brne	.+2      	; 0x44f8 <SSD_vTurnOnLeftSide+0x34>
    44f6:	06 c1       	rjmp	.+524    	; 0x4704 <SSD_vTurnOnLeftSide+0x240>
    44f8:	0a c2       	rjmp	.+1044   	; 0x490e <SSD_vTurnOnLeftSide+0x44a>
    {
    case SSD0:
        for (u8 i = 3; i < 6; i++)
    44fa:	83 e0       	ldi	r24, 0x03	; 3
    44fc:	8a af       	std	Y+58, r24	; 0x3a
    44fe:	84 c0       	rjmp	.+264    	; 0x4608 <SSD_vTurnOnLeftSide+0x144>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
    4500:	8a ad       	ldd	r24, Y+58	; 0x3a
    4502:	28 2f       	mov	r18, r24
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	02 c0       	rjmp	.+4      	; 0x4510 <SSD_vTurnOnLeftSide+0x4c>
    450c:	88 0f       	add	r24, r24
    450e:	99 1f       	adc	r25, r25
    4510:	2a 95       	dec	r18
    4512:	e2 f7       	brpl	.-8      	; 0x450c <SSD_vTurnOnLeftSide+0x48>
    4514:	98 2f       	mov	r25, r24
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	69 2f       	mov	r22, r25
    451a:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	aa ef       	ldi	r26, 0xFA	; 250
    4524:	b3 e4       	ldi	r27, 0x43	; 67
    4526:	8d ab       	std	Y+53, r24	; 0x35
    4528:	9e ab       	std	Y+54, r25	; 0x36
    452a:	af ab       	std	Y+55, r26	; 0x37
    452c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452e:	6d a9       	ldd	r22, Y+53	; 0x35
    4530:	7e a9       	ldd	r23, Y+54	; 0x36
    4532:	8f a9       	ldd	r24, Y+55	; 0x37
    4534:	98 ad       	ldd	r25, Y+56	; 0x38
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	4a ef       	ldi	r20, 0xFA	; 250
    453c:	54 e4       	ldi	r21, 0x44	; 68
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	89 ab       	std	Y+49, r24	; 0x31
    4548:	9a ab       	std	Y+50, r25	; 0x32
    454a:	ab ab       	std	Y+51, r26	; 0x33
    454c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    454e:	69 a9       	ldd	r22, Y+49	; 0x31
    4550:	7a a9       	ldd	r23, Y+50	; 0x32
    4552:	8b a9       	ldd	r24, Y+51	; 0x33
    4554:	9c a9       	ldd	r25, Y+52	; 0x34
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	40 e8       	ldi	r20, 0x80	; 128
    455c:	5f e3       	ldi	r21, 0x3F	; 63
    455e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4562:	88 23       	and	r24, r24
    4564:	2c f4       	brge	.+10     	; 0x4570 <SSD_vTurnOnLeftSide+0xac>
		__ticks = 1;
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	98 ab       	std	Y+48, r25	; 0x30
    456c:	8f a7       	std	Y+47, r24	; 0x2f
    456e:	3f c0       	rjmp	.+126    	; 0x45ee <SSD_vTurnOnLeftSide+0x12a>
	else if (__tmp > 65535)
    4570:	69 a9       	ldd	r22, Y+49	; 0x31
    4572:	7a a9       	ldd	r23, Y+50	; 0x32
    4574:	8b a9       	ldd	r24, Y+51	; 0x33
    4576:	9c a9       	ldd	r25, Y+52	; 0x34
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	3f ef       	ldi	r19, 0xFF	; 255
    457c:	4f e7       	ldi	r20, 0x7F	; 127
    457e:	57 e4       	ldi	r21, 0x47	; 71
    4580:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4584:	18 16       	cp	r1, r24
    4586:	4c f5       	brge	.+82     	; 0x45da <SSD_vTurnOnLeftSide+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4588:	6d a9       	ldd	r22, Y+53	; 0x35
    458a:	7e a9       	ldd	r23, Y+54	; 0x36
    458c:	8f a9       	ldd	r24, Y+55	; 0x37
    458e:	98 ad       	ldd	r25, Y+56	; 0x38
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	40 e2       	ldi	r20, 0x20	; 32
    4596:	51 e4       	ldi	r21, 0x41	; 65
    4598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459c:	dc 01       	movw	r26, r24
    459e:	cb 01       	movw	r24, r22
    45a0:	bc 01       	movw	r22, r24
    45a2:	cd 01       	movw	r24, r26
    45a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a8:	dc 01       	movw	r26, r24
    45aa:	cb 01       	movw	r24, r22
    45ac:	98 ab       	std	Y+48, r25	; 0x30
    45ae:	8f a7       	std	Y+47, r24	; 0x2f
    45b0:	0f c0       	rjmp	.+30     	; 0x45d0 <SSD_vTurnOnLeftSide+0x10c>
    45b2:	88 ec       	ldi	r24, 0xC8	; 200
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	9e a7       	std	Y+46, r25	; 0x2e
    45b8:	8d a7       	std	Y+45, r24	; 0x2d
    45ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    45bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <SSD_vTurnOnLeftSide+0xfa>
    45c2:	9e a7       	std	Y+46, r25	; 0x2e
    45c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    45c8:	98 a9       	ldd	r25, Y+48	; 0x30
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	98 ab       	std	Y+48, r25	; 0x30
    45ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    45d2:	98 a9       	ldd	r25, Y+48	; 0x30
    45d4:	00 97       	sbiw	r24, 0x00	; 0
    45d6:	69 f7       	brne	.-38     	; 0x45b2 <SSD_vTurnOnLeftSide+0xee>
    45d8:	14 c0       	rjmp	.+40     	; 0x4602 <SSD_vTurnOnLeftSide+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45da:	69 a9       	ldd	r22, Y+49	; 0x31
    45dc:	7a a9       	ldd	r23, Y+50	; 0x32
    45de:	8b a9       	ldd	r24, Y+51	; 0x33
    45e0:	9c a9       	ldd	r25, Y+52	; 0x34
    45e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	98 ab       	std	Y+48, r25	; 0x30
    45ec:	8f a7       	std	Y+47, r24	; 0x2f
    45ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    45f0:	98 a9       	ldd	r25, Y+48	; 0x30
    45f2:	9c a7       	std	Y+44, r25	; 0x2c
    45f4:	8b a7       	std	Y+43, r24	; 0x2b
    45f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    45f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <SSD_vTurnOnLeftSide+0x136>
    45fe:	9c a7       	std	Y+44, r25	; 0x2c
    4600:	8b a7       	std	Y+43, r24	; 0x2b
void SSD_vTurnOnLeftSide(u8 A_u8SSDId)
{
    switch (A_u8SSDId)
    {
    case SSD0:
        for (u8 i = 3; i < 6; i++)
    4602:	8a ad       	ldd	r24, Y+58	; 0x3a
    4604:	8f 5f       	subi	r24, 0xFF	; 255
    4606:	8a af       	std	Y+58, r24	; 0x3a
    4608:	8a ad       	ldd	r24, Y+58	; 0x3a
    460a:	86 30       	cpi	r24, 0x06	; 6
    460c:	08 f4       	brcc	.+2      	; 0x4610 <SSD_vTurnOnLeftSide+0x14c>
    460e:	78 cf       	rjmp	.-272    	; 0x4500 <SSD_vTurnOnLeftSide+0x3c>
        {
            DIO_vSetPortVal(SSD0_DATA_PORT, (1 << i));
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, (1 << 0));
    4610:	82 e0       	ldi	r24, 0x02	; 2
    4612:	61 e0       	ldi	r22, 0x01	; 1
    4614:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	aa ef       	ldi	r26, 0xFA	; 250
    461e:	b3 e4       	ldi	r27, 0x43	; 67
    4620:	8f a3       	std	Y+39, r24	; 0x27
    4622:	98 a7       	std	Y+40, r25	; 0x28
    4624:	a9 a7       	std	Y+41, r26	; 0x29
    4626:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4628:	6f a1       	ldd	r22, Y+39	; 0x27
    462a:	78 a5       	ldd	r23, Y+40	; 0x28
    462c:	89 a5       	ldd	r24, Y+41	; 0x29
    462e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4630:	20 e0       	ldi	r18, 0x00	; 0
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	4a ef       	ldi	r20, 0xFA	; 250
    4636:	54 e4       	ldi	r21, 0x44	; 68
    4638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	8b a3       	std	Y+35, r24	; 0x23
    4642:	9c a3       	std	Y+36, r25	; 0x24
    4644:	ad a3       	std	Y+37, r26	; 0x25
    4646:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4648:	6b a1       	ldd	r22, Y+35	; 0x23
    464a:	7c a1       	ldd	r23, Y+36	; 0x24
    464c:	8d a1       	ldd	r24, Y+37	; 0x25
    464e:	9e a1       	ldd	r25, Y+38	; 0x26
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	40 e8       	ldi	r20, 0x80	; 128
    4656:	5f e3       	ldi	r21, 0x3F	; 63
    4658:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    465c:	88 23       	and	r24, r24
    465e:	2c f4       	brge	.+10     	; 0x466a <SSD_vTurnOnLeftSide+0x1a6>
		__ticks = 1;
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	9a a3       	std	Y+34, r25	; 0x22
    4666:	89 a3       	std	Y+33, r24	; 0x21
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <SSD_vTurnOnLeftSide+0x224>
	else if (__tmp > 65535)
    466a:	6b a1       	ldd	r22, Y+35	; 0x23
    466c:	7c a1       	ldd	r23, Y+36	; 0x24
    466e:	8d a1       	ldd	r24, Y+37	; 0x25
    4670:	9e a1       	ldd	r25, Y+38	; 0x26
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	3f ef       	ldi	r19, 0xFF	; 255
    4676:	4f e7       	ldi	r20, 0x7F	; 127
    4678:	57 e4       	ldi	r21, 0x47	; 71
    467a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    467e:	18 16       	cp	r1, r24
    4680:	4c f5       	brge	.+82     	; 0x46d4 <SSD_vTurnOnLeftSide+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4682:	6f a1       	ldd	r22, Y+39	; 0x27
    4684:	78 a5       	ldd	r23, Y+40	; 0x28
    4686:	89 a5       	ldd	r24, Y+41	; 0x29
    4688:	9a a5       	ldd	r25, Y+42	; 0x2a
    468a:	20 e0       	ldi	r18, 0x00	; 0
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e2       	ldi	r20, 0x20	; 32
    4690:	51 e4       	ldi	r21, 0x41	; 65
    4692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	9a a3       	std	Y+34, r25	; 0x22
    46a8:	89 a3       	std	Y+33, r24	; 0x21
    46aa:	0f c0       	rjmp	.+30     	; 0x46ca <SSD_vTurnOnLeftSide+0x206>
    46ac:	88 ec       	ldi	r24, 0xC8	; 200
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	98 a3       	std	Y+32, r25	; 0x20
    46b2:	8f 8f       	std	Y+31, r24	; 0x1f
    46b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46b6:	98 a1       	ldd	r25, Y+32	; 0x20
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	f1 f7       	brne	.-4      	; 0x46b8 <SSD_vTurnOnLeftSide+0x1f4>
    46bc:	98 a3       	std	Y+32, r25	; 0x20
    46be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c0:	89 a1       	ldd	r24, Y+33	; 0x21
    46c2:	9a a1       	ldd	r25, Y+34	; 0x22
    46c4:	01 97       	sbiw	r24, 0x01	; 1
    46c6:	9a a3       	std	Y+34, r25	; 0x22
    46c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ca:	89 a1       	ldd	r24, Y+33	; 0x21
    46cc:	9a a1       	ldd	r25, Y+34	; 0x22
    46ce:	00 97       	sbiw	r24, 0x00	; 0
    46d0:	69 f7       	brne	.-38     	; 0x46ac <SSD_vTurnOnLeftSide+0x1e8>
    46d2:	14 c0       	rjmp	.+40     	; 0x46fc <SSD_vTurnOnLeftSide+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d4:	6b a1       	ldd	r22, Y+35	; 0x23
    46d6:	7c a1       	ldd	r23, Y+36	; 0x24
    46d8:	8d a1       	ldd	r24, Y+37	; 0x25
    46da:	9e a1       	ldd	r25, Y+38	; 0x26
    46dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	9a a3       	std	Y+34, r25	; 0x22
    46e6:	89 a3       	std	Y+33, r24	; 0x21
    46e8:	89 a1       	ldd	r24, Y+33	; 0x21
    46ea:	9a a1       	ldd	r25, Y+34	; 0x22
    46ec:	9e 8f       	std	Y+30, r25	; 0x1e
    46ee:	8d 8f       	std	Y+29, r24	; 0x1d
    46f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <SSD_vTurnOnLeftSide+0x230>
    46f8:	9e 8f       	std	Y+30, r25	; 0x1e
    46fa:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    46fc:	83 e0       	ldi	r24, 0x03	; 3
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    case SSD1:
        for (u8 i = 3; i < 6; i++)
    4704:	83 e0       	ldi	r24, 0x03	; 3
    4706:	89 af       	std	Y+57, r24	; 0x39
    4708:	84 c0       	rjmp	.+264    	; 0x4812 <SSD_vTurnOnLeftSide+0x34e>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i)); // 3 00001000 //4 00010000 //5 00100000 //
    470a:	89 ad       	ldd	r24, Y+57	; 0x39
    470c:	28 2f       	mov	r18, r24
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	02 c0       	rjmp	.+4      	; 0x471a <SSD_vTurnOnLeftSide+0x256>
    4716:	88 0f       	add	r24, r24
    4718:	99 1f       	adc	r25, r25
    471a:	2a 95       	dec	r18
    471c:	e2 f7       	brpl	.-8      	; 0x4716 <SSD_vTurnOnLeftSide+0x252>
    471e:	98 2f       	mov	r25, r24
    4720:	83 e0       	ldi	r24, 0x03	; 3
    4722:	69 2f       	mov	r22, r25
    4724:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    4728:	80 e0       	ldi	r24, 0x00	; 0
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	aa ef       	ldi	r26, 0xFA	; 250
    472e:	b3 e4       	ldi	r27, 0x43	; 67
    4730:	89 8f       	std	Y+25, r24	; 0x19
    4732:	9a 8f       	std	Y+26, r25	; 0x1a
    4734:	ab 8f       	std	Y+27, r26	; 0x1b
    4736:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4738:	69 8d       	ldd	r22, Y+25	; 0x19
    473a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    473c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    473e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	4a ef       	ldi	r20, 0xFA	; 250
    4746:	54 e4       	ldi	r21, 0x44	; 68
    4748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474c:	dc 01       	movw	r26, r24
    474e:	cb 01       	movw	r24, r22
    4750:	8d 8b       	std	Y+21, r24	; 0x15
    4752:	9e 8b       	std	Y+22, r25	; 0x16
    4754:	af 8b       	std	Y+23, r26	; 0x17
    4756:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4758:	6d 89       	ldd	r22, Y+21	; 0x15
    475a:	7e 89       	ldd	r23, Y+22	; 0x16
    475c:	8f 89       	ldd	r24, Y+23	; 0x17
    475e:	98 8d       	ldd	r25, Y+24	; 0x18
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	40 e8       	ldi	r20, 0x80	; 128
    4766:	5f e3       	ldi	r21, 0x3F	; 63
    4768:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    476c:	88 23       	and	r24, r24
    476e:	2c f4       	brge	.+10     	; 0x477a <SSD_vTurnOnLeftSide+0x2b6>
		__ticks = 1;
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	9c 8b       	std	Y+20, r25	; 0x14
    4776:	8b 8b       	std	Y+19, r24	; 0x13
    4778:	3f c0       	rjmp	.+126    	; 0x47f8 <SSD_vTurnOnLeftSide+0x334>
	else if (__tmp > 65535)
    477a:	6d 89       	ldd	r22, Y+21	; 0x15
    477c:	7e 89       	ldd	r23, Y+22	; 0x16
    477e:	8f 89       	ldd	r24, Y+23	; 0x17
    4780:	98 8d       	ldd	r25, Y+24	; 0x18
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	3f ef       	ldi	r19, 0xFF	; 255
    4786:	4f e7       	ldi	r20, 0x7F	; 127
    4788:	57 e4       	ldi	r21, 0x47	; 71
    478a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    478e:	18 16       	cp	r1, r24
    4790:	4c f5       	brge	.+82     	; 0x47e4 <SSD_vTurnOnLeftSide+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4792:	69 8d       	ldd	r22, Y+25	; 0x19
    4794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    479a:	20 e0       	ldi	r18, 0x00	; 0
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	40 e2       	ldi	r20, 0x20	; 32
    47a0:	51 e4       	ldi	r21, 0x41	; 65
    47a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	bc 01       	movw	r22, r24
    47ac:	cd 01       	movw	r24, r26
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	9c 8b       	std	Y+20, r25	; 0x14
    47b8:	8b 8b       	std	Y+19, r24	; 0x13
    47ba:	0f c0       	rjmp	.+30     	; 0x47da <SSD_vTurnOnLeftSide+0x316>
    47bc:	88 ec       	ldi	r24, 0xC8	; 200
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	9a 8b       	std	Y+18, r25	; 0x12
    47c2:	89 8b       	std	Y+17, r24	; 0x11
    47c4:	89 89       	ldd	r24, Y+17	; 0x11
    47c6:	9a 89       	ldd	r25, Y+18	; 0x12
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <SSD_vTurnOnLeftSide+0x304>
    47cc:	9a 8b       	std	Y+18, r25	; 0x12
    47ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d0:	8b 89       	ldd	r24, Y+19	; 0x13
    47d2:	9c 89       	ldd	r25, Y+20	; 0x14
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	9c 8b       	std	Y+20, r25	; 0x14
    47d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47da:	8b 89       	ldd	r24, Y+19	; 0x13
    47dc:	9c 89       	ldd	r25, Y+20	; 0x14
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	69 f7       	brne	.-38     	; 0x47bc <SSD_vTurnOnLeftSide+0x2f8>
    47e2:	14 c0       	rjmp	.+40     	; 0x480c <SSD_vTurnOnLeftSide+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47e4:	6d 89       	ldd	r22, Y+21	; 0x15
    47e6:	7e 89       	ldd	r23, Y+22	; 0x16
    47e8:	8f 89       	ldd	r24, Y+23	; 0x17
    47ea:	98 8d       	ldd	r25, Y+24	; 0x18
    47ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	9c 8b       	std	Y+20, r25	; 0x14
    47f6:	8b 8b       	std	Y+19, r24	; 0x13
    47f8:	8b 89       	ldd	r24, Y+19	; 0x13
    47fa:	9c 89       	ldd	r25, Y+20	; 0x14
    47fc:	98 8b       	std	Y+16, r25	; 0x10
    47fe:	8f 87       	std	Y+15, r24	; 0x0f
    4800:	8f 85       	ldd	r24, Y+15	; 0x0f
    4802:	98 89       	ldd	r25, Y+16	; 0x10
    4804:	01 97       	sbiw	r24, 0x01	; 1
    4806:	f1 f7       	brne	.-4      	; 0x4804 <SSD_vTurnOnLeftSide+0x340>
    4808:	98 8b       	std	Y+16, r25	; 0x10
    480a:	8f 87       	std	Y+15, r24	; 0x0f
        }
        DIO_vSetPortVal(SSD0_DATA_PORT, (1 << 0));
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    case SSD1:
        for (u8 i = 3; i < 6; i++)
    480c:	89 ad       	ldd	r24, Y+57	; 0x39
    480e:	8f 5f       	subi	r24, 0xFF	; 255
    4810:	89 af       	std	Y+57, r24	; 0x39
    4812:	89 ad       	ldd	r24, Y+57	; 0x39
    4814:	86 30       	cpi	r24, 0x06	; 6
    4816:	08 f4       	brcc	.+2      	; 0x481a <SSD_vTurnOnLeftSide+0x356>
    4818:	78 cf       	rjmp	.-272    	; 0x470a <SSD_vTurnOnLeftSide+0x246>
        {
            DIO_vSetPortVal(SSD1_DATA_PORT, (1 << i)); // 3 00001000 //4 00010000 //5 00100000 //
            _delay_ms(500);
        }
        DIO_vSetPortVal(SSD1_DATA_PORT, (1 << 0));
    481a:	83 e0       	ldi	r24, 0x03	; 3
    481c:	61 e0       	ldi	r22, 0x01	; 1
    481e:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	aa ef       	ldi	r26, 0xFA	; 250
    4828:	b3 e4       	ldi	r27, 0x43	; 67
    482a:	8b 87       	std	Y+11, r24	; 0x0b
    482c:	9c 87       	std	Y+12, r25	; 0x0c
    482e:	ad 87       	std	Y+13, r26	; 0x0d
    4830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4832:	6b 85       	ldd	r22, Y+11	; 0x0b
    4834:	7c 85       	ldd	r23, Y+12	; 0x0c
    4836:	8d 85       	ldd	r24, Y+13	; 0x0d
    4838:	9e 85       	ldd	r25, Y+14	; 0x0e
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	4a ef       	ldi	r20, 0xFA	; 250
    4840:	54 e4       	ldi	r21, 0x44	; 68
    4842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	8f 83       	std	Y+7, r24	; 0x07
    484c:	98 87       	std	Y+8, r25	; 0x08
    484e:	a9 87       	std	Y+9, r26	; 0x09
    4850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4852:	6f 81       	ldd	r22, Y+7	; 0x07
    4854:	78 85       	ldd	r23, Y+8	; 0x08
    4856:	89 85       	ldd	r24, Y+9	; 0x09
    4858:	9a 85       	ldd	r25, Y+10	; 0x0a
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	40 e8       	ldi	r20, 0x80	; 128
    4860:	5f e3       	ldi	r21, 0x3F	; 63
    4862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4866:	88 23       	and	r24, r24
    4868:	2c f4       	brge	.+10     	; 0x4874 <SSD_vTurnOnLeftSide+0x3b0>
		__ticks = 1;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	9e 83       	std	Y+6, r25	; 0x06
    4870:	8d 83       	std	Y+5, r24	; 0x05
    4872:	3f c0       	rjmp	.+126    	; 0x48f2 <SSD_vTurnOnLeftSide+0x42e>
	else if (__tmp > 65535)
    4874:	6f 81       	ldd	r22, Y+7	; 0x07
    4876:	78 85       	ldd	r23, Y+8	; 0x08
    4878:	89 85       	ldd	r24, Y+9	; 0x09
    487a:	9a 85       	ldd	r25, Y+10	; 0x0a
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	3f ef       	ldi	r19, 0xFF	; 255
    4880:	4f e7       	ldi	r20, 0x7F	; 127
    4882:	57 e4       	ldi	r21, 0x47	; 71
    4884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4888:	18 16       	cp	r1, r24
    488a:	4c f5       	brge	.+82     	; 0x48de <SSD_vTurnOnLeftSide+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    488c:	6b 85       	ldd	r22, Y+11	; 0x0b
    488e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4890:	8d 85       	ldd	r24, Y+13	; 0x0d
    4892:	9e 85       	ldd	r25, Y+14	; 0x0e
    4894:	20 e0       	ldi	r18, 0x00	; 0
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	40 e2       	ldi	r20, 0x20	; 32
    489a:	51 e4       	ldi	r21, 0x41	; 65
    489c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a0:	dc 01       	movw	r26, r24
    48a2:	cb 01       	movw	r24, r22
    48a4:	bc 01       	movw	r22, r24
    48a6:	cd 01       	movw	r24, r26
    48a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ac:	dc 01       	movw	r26, r24
    48ae:	cb 01       	movw	r24, r22
    48b0:	9e 83       	std	Y+6, r25	; 0x06
    48b2:	8d 83       	std	Y+5, r24	; 0x05
    48b4:	0f c0       	rjmp	.+30     	; 0x48d4 <SSD_vTurnOnLeftSide+0x410>
    48b6:	88 ec       	ldi	r24, 0xC8	; 200
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	9c 83       	std	Y+4, r25	; 0x04
    48bc:	8b 83       	std	Y+3, r24	; 0x03
    48be:	8b 81       	ldd	r24, Y+3	; 0x03
    48c0:	9c 81       	ldd	r25, Y+4	; 0x04
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	f1 f7       	brne	.-4      	; 0x48c2 <SSD_vTurnOnLeftSide+0x3fe>
    48c6:	9c 83       	std	Y+4, r25	; 0x04
    48c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ca:	8d 81       	ldd	r24, Y+5	; 0x05
    48cc:	9e 81       	ldd	r25, Y+6	; 0x06
    48ce:	01 97       	sbiw	r24, 0x01	; 1
    48d0:	9e 83       	std	Y+6, r25	; 0x06
    48d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d4:	8d 81       	ldd	r24, Y+5	; 0x05
    48d6:	9e 81       	ldd	r25, Y+6	; 0x06
    48d8:	00 97       	sbiw	r24, 0x00	; 0
    48da:	69 f7       	brne	.-38     	; 0x48b6 <SSD_vTurnOnLeftSide+0x3f2>
    48dc:	14 c0       	rjmp	.+40     	; 0x4906 <SSD_vTurnOnLeftSide+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48de:	6f 81       	ldd	r22, Y+7	; 0x07
    48e0:	78 85       	ldd	r23, Y+8	; 0x08
    48e2:	89 85       	ldd	r24, Y+9	; 0x09
    48e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ea:	dc 01       	movw	r26, r24
    48ec:	cb 01       	movw	r24, r22
    48ee:	9e 83       	std	Y+6, r25	; 0x06
    48f0:	8d 83       	std	Y+5, r24	; 0x05
    48f2:	8d 81       	ldd	r24, Y+5	; 0x05
    48f4:	9e 81       	ldd	r25, Y+6	; 0x06
    48f6:	9a 83       	std	Y+2, r25	; 0x02
    48f8:	89 83       	std	Y+1, r24	; 0x01
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	9a 81       	ldd	r25, Y+2	; 0x02
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	f1 f7       	brne	.-4      	; 0x48fe <SSD_vTurnOnLeftSide+0x43a>
    4902:	9a 83       	std	Y+2, r25	; 0x02
    4904:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        DIO_vSetPortVal(SSD1_DATA_PORT, 0x00);
    4906:	83 e0       	ldi	r24, 0x03	; 3
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
        break;

    default:
        break;
    }
};
    490e:	ed 96       	adiw	r28, 0x3d	; 61
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	cf 91       	pop	r28
    491c:	df 91       	pop	r29
    491e:	08 95       	ret

00004920 <SERVO_vInit>:
#include "SERVO_int.h"
#include "SERVO_cfg.h"
#include "SERVO_pri.h"

void SERVO_vInit()
{
    4920:	df 93       	push	r29
    4922:	cf 93       	push	r28
    4924:	cd b7       	in	r28, 0x3d	; 61
    4926:	de b7       	in	r29, 0x3e	; 62
    DIO_vSetPinDir(PORTD_ID, PIN5_ID, DIR_OUTPUT);
    4928:	83 e0       	ldi	r24, 0x03	; 3
    492a:	65 e0       	ldi	r22, 0x05	; 5
    492c:	41 e0       	ldi	r20, 0x01	; 1
    492e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    TIMER_vInit(TIMER1);
    4932:	81 e0       	ldi	r24, 0x01	; 1
    4934:	0e 94 1b 09 	call	0x1236	; 0x1236 <TIMER_vInit>
}
    4938:	cf 91       	pop	r28
    493a:	df 91       	pop	r29
    493c:	08 95       	ret

0000493e <SERVO_vMoveToInitialAngle>:
void SERVO_vMoveToInitialAngle()
{
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
	/* 600 to OCR1AW */
    TIMER_vPWMSignal(TIMER1, 3);
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	40 e0       	ldi	r20, 0x00	; 0
    494a:	50 e0       	ldi	r21, 0x00	; 0
    494c:	60 e4       	ldi	r22, 0x40	; 64
    494e:	70 e4       	ldi	r23, 0x40	; 64
    4950:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>

}
    4954:	cf 91       	pop	r28
    4956:	df 91       	pop	r29
    4958:	08 95       	ret

0000495a <SERVO_vMoveToAngle>:
void SERVO_vMoveToAngle(u32 A_u32Angle)
{
    495a:	df 93       	push	r29
    495c:	cf 93       	push	r28
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	28 97       	sbiw	r28, 0x08	; 8
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	69 83       	std	Y+1, r22	; 0x01
    4970:	7a 83       	std	Y+2, r23	; 0x02
    4972:	8b 83       	std	Y+3, r24	; 0x03
    4974:	9c 83       	std	Y+4, r25	; 0x04
    switch (A_u32Angle)
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	9a 81       	ldd	r25, Y+2	; 0x02
    497a:	ab 81       	ldd	r26, Y+3	; 0x03
    497c:	bc 81       	ldd	r27, Y+4	; 0x04
    497e:	8d 83       	std	Y+5, r24	; 0x05
    4980:	9e 83       	std	Y+6, r25	; 0x06
    4982:	af 83       	std	Y+7, r26	; 0x07
    4984:	b8 87       	std	Y+8, r27	; 0x08
    4986:	8d 81       	ldd	r24, Y+5	; 0x05
    4988:	9e 81       	ldd	r25, Y+6	; 0x06
    498a:	af 81       	ldd	r26, Y+7	; 0x07
    498c:	b8 85       	ldd	r27, Y+8	; 0x08
    498e:	8a 35       	cpi	r24, 0x5A	; 90
    4990:	91 05       	cpc	r25, r1
    4992:	a1 05       	cpc	r26, r1
    4994:	b1 05       	cpc	r27, r1
    4996:	a9 f1       	breq	.+106    	; 0x4a02 <SERVO_vMoveToAngle+0xa8>
    4998:	8d 81       	ldd	r24, Y+5	; 0x05
    499a:	9e 81       	ldd	r25, Y+6	; 0x06
    499c:	af 81       	ldd	r26, Y+7	; 0x07
    499e:	b8 85       	ldd	r27, Y+8	; 0x08
    49a0:	8b 35       	cpi	r24, 0x5B	; 91
    49a2:	91 05       	cpc	r25, r1
    49a4:	a1 05       	cpc	r26, r1
    49a6:	b1 05       	cpc	r27, r1
    49a8:	50 f4       	brcc	.+20     	; 0x49be <SERVO_vMoveToAngle+0x64>
    49aa:	8d 81       	ldd	r24, Y+5	; 0x05
    49ac:	9e 81       	ldd	r25, Y+6	; 0x06
    49ae:	af 81       	ldd	r26, Y+7	; 0x07
    49b0:	b8 85       	ldd	r27, Y+8	; 0x08
    49b2:	8d 32       	cpi	r24, 0x2D	; 45
    49b4:	91 05       	cpc	r25, r1
    49b6:	a1 05       	cpc	r26, r1
    49b8:	b1 05       	cpc	r27, r1
    49ba:	59 f1       	breq	.+86     	; 0x4a12 <SERVO_vMoveToAngle+0xb8>
    49bc:	31 c0       	rjmp	.+98     	; 0x4a20 <SERVO_vMoveToAngle+0xc6>
    49be:	8d 81       	ldd	r24, Y+5	; 0x05
    49c0:	9e 81       	ldd	r25, Y+6	; 0x06
    49c2:	af 81       	ldd	r26, Y+7	; 0x07
    49c4:	b8 85       	ldd	r27, Y+8	; 0x08
    49c6:	87 38       	cpi	r24, 0x87	; 135
    49c8:	91 05       	cpc	r25, r1
    49ca:	a1 05       	cpc	r26, r1
    49cc:	b1 05       	cpc	r27, r1
    49ce:	89 f0       	breq	.+34     	; 0x49f2 <SERVO_vMoveToAngle+0x98>
    49d0:	8d 81       	ldd	r24, Y+5	; 0x05
    49d2:	9e 81       	ldd	r25, Y+6	; 0x06
    49d4:	af 81       	ldd	r26, Y+7	; 0x07
    49d6:	b8 85       	ldd	r27, Y+8	; 0x08
    49d8:	84 3b       	cpi	r24, 0xB4	; 180
    49da:	91 05       	cpc	r25, r1
    49dc:	a1 05       	cpc	r26, r1
    49de:	b1 05       	cpc	r27, r1
    49e0:	f9 f4       	brne	.+62     	; 0x4a20 <SERVO_vMoveToAngle+0xc6>
    {
    case 180:
        TIMER_vPWMSignal(TIMER1, 12.5);
    49e2:	81 e0       	ldi	r24, 0x01	; 1
    49e4:	40 e0       	ldi	r20, 0x00	; 0
    49e6:	50 e0       	ldi	r21, 0x00	; 0
    49e8:	68 e4       	ldi	r22, 0x48	; 72
    49ea:	71 e4       	ldi	r23, 0x41	; 65
    49ec:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>
    49f0:	17 c0       	rjmp	.+46     	; 0x4a20 <SERVO_vMoveToAngle+0xc6>
        break;
    case 135:
        TIMER_vPWMSignal(TIMER1, 10.125);
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	40 e0       	ldi	r20, 0x00	; 0
    49f6:	50 e0       	ldi	r21, 0x00	; 0
    49f8:	62 e2       	ldi	r22, 0x22	; 34
    49fa:	71 e4       	ldi	r23, 0x41	; 65
    49fc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>
    4a00:	0f c0       	rjmp	.+30     	; 0x4a20 <SERVO_vMoveToAngle+0xc6>
        break;
    case 90:
        TIMER_vPWMSignal(TIMER1, 7.75);
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	40 e0       	ldi	r20, 0x00	; 0
    4a06:	50 e0       	ldi	r21, 0x00	; 0
    4a08:	68 ef       	ldi	r22, 0xF8	; 248
    4a0a:	70 e4       	ldi	r23, 0x40	; 64
    4a0c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>
    4a10:	07 c0       	rjmp	.+14     	; 0x4a20 <SERVO_vMoveToAngle+0xc6>
        break;
    case 45:
        TIMER_vPWMSignal(TIMER1, 5.375);
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	40 e0       	ldi	r20, 0x00	; 0
    4a16:	50 e0       	ldi	r21, 0x00	; 0
    4a18:	6c ea       	ldi	r22, 0xAC	; 172
    4a1a:	70 e4       	ldi	r23, 0x40	; 64
    4a1c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>
    default:
        break;
    }

    // TIMER_vSetOcrValue(TIMER1, 2500);
}
    4a20:	28 96       	adiw	r28, 0x08	; 8
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
    4a2c:	cf 91       	pop	r28
    4a2e:	df 91       	pop	r29
    4a30:	08 95       	ret

00004a32 <LED_vInit>:
#include "LED_int.h"

#include "../../MCAL/DIO/DIO_int.h"

void LED_vInit(u8 A_u8LedNo)
{
    4a32:	df 93       	push	r29
    4a34:	cf 93       	push	r28
    4a36:	00 d0       	rcall	.+0      	; 0x4a38 <LED_vInit+0x6>
    4a38:	0f 92       	push	r0
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
    4a3e:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    4a40:	89 81       	ldd	r24, Y+1	; 0x01
    4a42:	28 2f       	mov	r18, r24
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	3b 83       	std	Y+3, r19	; 0x03
    4a48:	2a 83       	std	Y+2, r18	; 0x02
    4a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a4e:	83 30       	cpi	r24, 0x03	; 3
    4a50:	91 05       	cpc	r25, r1
    4a52:	d9 f1       	breq	.+118    	; 0x4aca <LED_vInit+0x98>
    4a54:	2a 81       	ldd	r18, Y+2	; 0x02
    4a56:	3b 81       	ldd	r19, Y+3	; 0x03
    4a58:	24 30       	cpi	r18, 0x04	; 4
    4a5a:	31 05       	cpc	r19, r1
    4a5c:	7c f4       	brge	.+30     	; 0x4a7c <LED_vInit+0x4a>
    4a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a60:	9b 81       	ldd	r25, Y+3	; 0x03
    4a62:	81 30       	cpi	r24, 0x01	; 1
    4a64:	91 05       	cpc	r25, r1
    4a66:	29 f1       	breq	.+74     	; 0x4ab2 <LED_vInit+0x80>
    4a68:	2a 81       	ldd	r18, Y+2	; 0x02
    4a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    4a6c:	22 30       	cpi	r18, 0x02	; 2
    4a6e:	31 05       	cpc	r19, r1
    4a70:	34 f5       	brge	.+76     	; 0x4abe <LED_vInit+0x8c>
    4a72:	8a 81       	ldd	r24, Y+2	; 0x02
    4a74:	9b 81       	ldd	r25, Y+3	; 0x03
    4a76:	00 97       	sbiw	r24, 0x00	; 0
    4a78:	b1 f0       	breq	.+44     	; 0x4aa6 <LED_vInit+0x74>
    4a7a:	44 c0       	rjmp	.+136    	; 0x4b04 <LED_vInit+0xd2>
    4a7c:	2a 81       	ldd	r18, Y+2	; 0x02
    4a7e:	3b 81       	ldd	r19, Y+3	; 0x03
    4a80:	25 30       	cpi	r18, 0x05	; 5
    4a82:	31 05       	cpc	r19, r1
    4a84:	71 f1       	breq	.+92     	; 0x4ae2 <LED_vInit+0xb0>
    4a86:	8a 81       	ldd	r24, Y+2	; 0x02
    4a88:	9b 81       	ldd	r25, Y+3	; 0x03
    4a8a:	85 30       	cpi	r24, 0x05	; 5
    4a8c:	91 05       	cpc	r25, r1
    4a8e:	1c f1       	brlt	.+70     	; 0x4ad6 <LED_vInit+0xa4>
    4a90:	2a 81       	ldd	r18, Y+2	; 0x02
    4a92:	3b 81       	ldd	r19, Y+3	; 0x03
    4a94:	26 30       	cpi	r18, 0x06	; 6
    4a96:	31 05       	cpc	r19, r1
    4a98:	51 f1       	breq	.+84     	; 0x4aee <LED_vInit+0xbc>
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	87 30       	cpi	r24, 0x07	; 7
    4aa0:	91 05       	cpc	r25, r1
    4aa2:	59 f1       	breq	.+86     	; 0x4afa <LED_vInit+0xc8>
    4aa4:	2f c0       	rjmp	.+94     	; 0x4b04 <LED_vInit+0xd2>
	{
	case LED0:
		DIO_vSetPinDir(LED0_PORT, LED0_PIN, DIR_OUTPUT);
    4aa6:	82 e0       	ldi	r24, 0x02	; 2
    4aa8:	60 e0       	ldi	r22, 0x00	; 0
    4aaa:	41 e0       	ldi	r20, 0x01	; 1
    4aac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4ab0:	29 c0       	rjmp	.+82     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED1:
		DIO_vSetPinDir(LED1_PORT, LED1_PIN, DIR_OUTPUT);
    4ab2:	82 e0       	ldi	r24, 0x02	; 2
    4ab4:	61 e0       	ldi	r22, 0x01	; 1
    4ab6:	41 e0       	ldi	r20, 0x01	; 1
    4ab8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4abc:	23 c0       	rjmp	.+70     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED2:
		DIO_vSetPinDir(LED2_PORT, LED2_PIN, DIR_OUTPUT);
    4abe:	82 e0       	ldi	r24, 0x02	; 2
    4ac0:	62 e0       	ldi	r22, 0x02	; 2
    4ac2:	41 e0       	ldi	r20, 0x01	; 1
    4ac4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4ac8:	1d c0       	rjmp	.+58     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED3:
		DIO_vSetPinDir(LED3_PORT, LED3_PIN, DIR_OUTPUT);
    4aca:	82 e0       	ldi	r24, 0x02	; 2
    4acc:	63 e0       	ldi	r22, 0x03	; 3
    4ace:	41 e0       	ldi	r20, 0x01	; 1
    4ad0:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4ad4:	17 c0       	rjmp	.+46     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED4:
		DIO_vSetPinDir(LED4_PORT, LED4_PIN, DIR_OUTPUT);
    4ad6:	82 e0       	ldi	r24, 0x02	; 2
    4ad8:	64 e0       	ldi	r22, 0x04	; 4
    4ada:	41 e0       	ldi	r20, 0x01	; 1
    4adc:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4ae0:	11 c0       	rjmp	.+34     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED5:
		DIO_vSetPinDir(LED5_PORT, LED5_PIN, DIR_OUTPUT);
    4ae2:	82 e0       	ldi	r24, 0x02	; 2
    4ae4:	65 e0       	ldi	r22, 0x05	; 5
    4ae6:	41 e0       	ldi	r20, 0x01	; 1
    4ae8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4aec:	0b c0       	rjmp	.+22     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED6:
		DIO_vSetPinDir(LED6_PORT, LED6_PIN, DIR_OUTPUT);
    4aee:	82 e0       	ldi	r24, 0x02	; 2
    4af0:	66 e0       	ldi	r22, 0x06	; 6
    4af2:	41 e0       	ldi	r20, 0x01	; 1
    4af4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    4af8:	05 c0       	rjmp	.+10     	; 0x4b04 <LED_vInit+0xd2>
		break;
	case LED7:
		DIO_vSetPinDir(LED7_PORT, LED7_PIN, DIR_OUTPUT);
    4afa:	82 e0       	ldi	r24, 0x02	; 2
    4afc:	67 e0       	ldi	r22, 0x07	; 7
    4afe:	41 e0       	ldi	r20, 0x01	; 1
    4b00:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
		break;
	}
}
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	cf 91       	pop	r28
    4b0c:	df 91       	pop	r29
    4b0e:	08 95       	ret

00004b10 <LED_vTurnOn>:
void LED_vTurnOn(u8 A_u8LedNo)
{
    4b10:	df 93       	push	r29
    4b12:	cf 93       	push	r28
    4b14:	00 d0       	rcall	.+0      	; 0x4b16 <LED_vTurnOn+0x6>
    4b16:	0f 92       	push	r0
    4b18:	cd b7       	in	r28, 0x3d	; 61
    4b1a:	de b7       	in	r29, 0x3e	; 62
    4b1c:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    4b1e:	89 81       	ldd	r24, Y+1	; 0x01
    4b20:	28 2f       	mov	r18, r24
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	3b 83       	std	Y+3, r19	; 0x03
    4b26:	2a 83       	std	Y+2, r18	; 0x02
    4b28:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2c:	83 30       	cpi	r24, 0x03	; 3
    4b2e:	91 05       	cpc	r25, r1
    4b30:	d9 f1       	breq	.+118    	; 0x4ba8 <LED_vTurnOn+0x98>
    4b32:	2a 81       	ldd	r18, Y+2	; 0x02
    4b34:	3b 81       	ldd	r19, Y+3	; 0x03
    4b36:	24 30       	cpi	r18, 0x04	; 4
    4b38:	31 05       	cpc	r19, r1
    4b3a:	7c f4       	brge	.+30     	; 0x4b5a <LED_vTurnOn+0x4a>
    4b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b40:	81 30       	cpi	r24, 0x01	; 1
    4b42:	91 05       	cpc	r25, r1
    4b44:	29 f1       	breq	.+74     	; 0x4b90 <LED_vTurnOn+0x80>
    4b46:	2a 81       	ldd	r18, Y+2	; 0x02
    4b48:	3b 81       	ldd	r19, Y+3	; 0x03
    4b4a:	22 30       	cpi	r18, 0x02	; 2
    4b4c:	31 05       	cpc	r19, r1
    4b4e:	34 f5       	brge	.+76     	; 0x4b9c <LED_vTurnOn+0x8c>
    4b50:	8a 81       	ldd	r24, Y+2	; 0x02
    4b52:	9b 81       	ldd	r25, Y+3	; 0x03
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	b1 f0       	breq	.+44     	; 0x4b84 <LED_vTurnOn+0x74>
    4b58:	44 c0       	rjmp	.+136    	; 0x4be2 <LED_vTurnOn+0xd2>
    4b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    4b5c:	3b 81       	ldd	r19, Y+3	; 0x03
    4b5e:	25 30       	cpi	r18, 0x05	; 5
    4b60:	31 05       	cpc	r19, r1
    4b62:	71 f1       	breq	.+92     	; 0x4bc0 <LED_vTurnOn+0xb0>
    4b64:	8a 81       	ldd	r24, Y+2	; 0x02
    4b66:	9b 81       	ldd	r25, Y+3	; 0x03
    4b68:	85 30       	cpi	r24, 0x05	; 5
    4b6a:	91 05       	cpc	r25, r1
    4b6c:	1c f1       	brlt	.+70     	; 0x4bb4 <LED_vTurnOn+0xa4>
    4b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    4b70:	3b 81       	ldd	r19, Y+3	; 0x03
    4b72:	26 30       	cpi	r18, 0x06	; 6
    4b74:	31 05       	cpc	r19, r1
    4b76:	51 f1       	breq	.+84     	; 0x4bcc <LED_vTurnOn+0xbc>
    4b78:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b7c:	87 30       	cpi	r24, 0x07	; 7
    4b7e:	91 05       	cpc	r25, r1
    4b80:	59 f1       	breq	.+86     	; 0x4bd8 <LED_vTurnOn+0xc8>
    4b82:	2f c0       	rjmp	.+94     	; 0x4be2 <LED_vTurnOn+0xd2>
	{
	case LED0:
		DIO_vSetPinVal(LED0_PORT, LED0_PIN, HIGH);
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	41 e0       	ldi	r20, 0x01	; 1
    4b8a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4b8e:	29 c0       	rjmp	.+82     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED1:
		DIO_vSetPinVal(LED1_PORT, LED1_PIN, HIGH);
    4b90:	82 e0       	ldi	r24, 0x02	; 2
    4b92:	61 e0       	ldi	r22, 0x01	; 1
    4b94:	41 e0       	ldi	r20, 0x01	; 1
    4b96:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4b9a:	23 c0       	rjmp	.+70     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED2:
		DIO_vSetPinVal(LED2_PORT, LED2_PIN, HIGH);
    4b9c:	82 e0       	ldi	r24, 0x02	; 2
    4b9e:	62 e0       	ldi	r22, 0x02	; 2
    4ba0:	41 e0       	ldi	r20, 0x01	; 1
    4ba2:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4ba6:	1d c0       	rjmp	.+58     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED3:
		DIO_vSetPinVal(LED3_PORT, LED3_PIN, HIGH);
    4ba8:	82 e0       	ldi	r24, 0x02	; 2
    4baa:	63 e0       	ldi	r22, 0x03	; 3
    4bac:	41 e0       	ldi	r20, 0x01	; 1
    4bae:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4bb2:	17 c0       	rjmp	.+46     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED4:
		DIO_vSetPinVal(LED4_PORT, LED4_PIN, HIGH);
    4bb4:	82 e0       	ldi	r24, 0x02	; 2
    4bb6:	64 e0       	ldi	r22, 0x04	; 4
    4bb8:	41 e0       	ldi	r20, 0x01	; 1
    4bba:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4bbe:	11 c0       	rjmp	.+34     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED5:
		DIO_vSetPinVal(LED5_PORT, LED5_PIN, HIGH);
    4bc0:	82 e0       	ldi	r24, 0x02	; 2
    4bc2:	65 e0       	ldi	r22, 0x05	; 5
    4bc4:	41 e0       	ldi	r20, 0x01	; 1
    4bc6:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4bca:	0b c0       	rjmp	.+22     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED6:
		DIO_vSetPinVal(LED6_PORT, LED6_PIN, HIGH);
    4bcc:	82 e0       	ldi	r24, 0x02	; 2
    4bce:	66 e0       	ldi	r22, 0x06	; 6
    4bd0:	41 e0       	ldi	r20, 0x01	; 1
    4bd2:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4bd6:	05 c0       	rjmp	.+10     	; 0x4be2 <LED_vTurnOn+0xd2>
		break;
	case LED7:
		DIO_vSetPinVal(LED7_PORT, LED7_PIN, HIGH);
    4bd8:	82 e0       	ldi	r24, 0x02	; 2
    4bda:	67 e0       	ldi	r22, 0x07	; 7
    4bdc:	41 e0       	ldi	r20, 0x01	; 1
    4bde:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
		break;
	}
}
    4be2:	0f 90       	pop	r0
    4be4:	0f 90       	pop	r0
    4be6:	0f 90       	pop	r0
    4be8:	cf 91       	pop	r28
    4bea:	df 91       	pop	r29
    4bec:	08 95       	ret

00004bee <LED_vTurnOff>:
void LED_vTurnOff(u8 A_u8LedNo)
{
    4bee:	df 93       	push	r29
    4bf0:	cf 93       	push	r28
    4bf2:	00 d0       	rcall	.+0      	; 0x4bf4 <LED_vTurnOff+0x6>
    4bf4:	0f 92       	push	r0
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8LedNo)
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	28 2f       	mov	r18, r24
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	3b 83       	std	Y+3, r19	; 0x03
    4c04:	2a 83       	std	Y+2, r18	; 0x02
    4c06:	8a 81       	ldd	r24, Y+2	; 0x02
    4c08:	9b 81       	ldd	r25, Y+3	; 0x03
    4c0a:	83 30       	cpi	r24, 0x03	; 3
    4c0c:	91 05       	cpc	r25, r1
    4c0e:	d9 f1       	breq	.+118    	; 0x4c86 <LED_vTurnOff+0x98>
    4c10:	2a 81       	ldd	r18, Y+2	; 0x02
    4c12:	3b 81       	ldd	r19, Y+3	; 0x03
    4c14:	24 30       	cpi	r18, 0x04	; 4
    4c16:	31 05       	cpc	r19, r1
    4c18:	7c f4       	brge	.+30     	; 0x4c38 <LED_vTurnOff+0x4a>
    4c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c1e:	81 30       	cpi	r24, 0x01	; 1
    4c20:	91 05       	cpc	r25, r1
    4c22:	29 f1       	breq	.+74     	; 0x4c6e <LED_vTurnOff+0x80>
    4c24:	2a 81       	ldd	r18, Y+2	; 0x02
    4c26:	3b 81       	ldd	r19, Y+3	; 0x03
    4c28:	22 30       	cpi	r18, 0x02	; 2
    4c2a:	31 05       	cpc	r19, r1
    4c2c:	34 f5       	brge	.+76     	; 0x4c7a <LED_vTurnOff+0x8c>
    4c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c30:	9b 81       	ldd	r25, Y+3	; 0x03
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	b1 f0       	breq	.+44     	; 0x4c62 <LED_vTurnOff+0x74>
    4c36:	44 c0       	rjmp	.+136    	; 0x4cc0 <LED_vTurnOff+0xd2>
    4c38:	2a 81       	ldd	r18, Y+2	; 0x02
    4c3a:	3b 81       	ldd	r19, Y+3	; 0x03
    4c3c:	25 30       	cpi	r18, 0x05	; 5
    4c3e:	31 05       	cpc	r19, r1
    4c40:	71 f1       	breq	.+92     	; 0x4c9e <LED_vTurnOff+0xb0>
    4c42:	8a 81       	ldd	r24, Y+2	; 0x02
    4c44:	9b 81       	ldd	r25, Y+3	; 0x03
    4c46:	85 30       	cpi	r24, 0x05	; 5
    4c48:	91 05       	cpc	r25, r1
    4c4a:	1c f1       	brlt	.+70     	; 0x4c92 <LED_vTurnOff+0xa4>
    4c4c:	2a 81       	ldd	r18, Y+2	; 0x02
    4c4e:	3b 81       	ldd	r19, Y+3	; 0x03
    4c50:	26 30       	cpi	r18, 0x06	; 6
    4c52:	31 05       	cpc	r19, r1
    4c54:	51 f1       	breq	.+84     	; 0x4caa <LED_vTurnOff+0xbc>
    4c56:	8a 81       	ldd	r24, Y+2	; 0x02
    4c58:	9b 81       	ldd	r25, Y+3	; 0x03
    4c5a:	87 30       	cpi	r24, 0x07	; 7
    4c5c:	91 05       	cpc	r25, r1
    4c5e:	59 f1       	breq	.+86     	; 0x4cb6 <LED_vTurnOff+0xc8>
    4c60:	2f c0       	rjmp	.+94     	; 0x4cc0 <LED_vTurnOff+0xd2>
	{
	case LED0:
		DIO_vSetPinVal(LED0_PORT, LED0_PIN, LOW);
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	60 e0       	ldi	r22, 0x00	; 0
    4c66:	40 e0       	ldi	r20, 0x00	; 0
    4c68:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4c6c:	29 c0       	rjmp	.+82     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED1:
		DIO_vSetPinVal(LED1_PORT, LED1_PIN, LOW);
    4c6e:	82 e0       	ldi	r24, 0x02	; 2
    4c70:	61 e0       	ldi	r22, 0x01	; 1
    4c72:	40 e0       	ldi	r20, 0x00	; 0
    4c74:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4c78:	23 c0       	rjmp	.+70     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED2:
		DIO_vSetPinVal(LED2_PORT, LED2_PIN, LOW);
    4c7a:	82 e0       	ldi	r24, 0x02	; 2
    4c7c:	62 e0       	ldi	r22, 0x02	; 2
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4c84:	1d c0       	rjmp	.+58     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED3:
		DIO_vSetPinVal(LED3_PORT, LED3_PIN, LOW);
    4c86:	82 e0       	ldi	r24, 0x02	; 2
    4c88:	63 e0       	ldi	r22, 0x03	; 3
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4c90:	17 c0       	rjmp	.+46     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED4:
		DIO_vSetPinVal(LED4_PORT, LED4_PIN, LOW);
    4c92:	82 e0       	ldi	r24, 0x02	; 2
    4c94:	64 e0       	ldi	r22, 0x04	; 4
    4c96:	40 e0       	ldi	r20, 0x00	; 0
    4c98:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4c9c:	11 c0       	rjmp	.+34     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED5:
		DIO_vSetPinVal(LED5_PORT, LED5_PIN, LOW);
    4c9e:	82 e0       	ldi	r24, 0x02	; 2
    4ca0:	65 e0       	ldi	r22, 0x05	; 5
    4ca2:	40 e0       	ldi	r20, 0x00	; 0
    4ca4:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4ca8:	0b c0       	rjmp	.+22     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED6:
		DIO_vSetPinVal(LED6_PORT, LED6_PIN, LOW);
    4caa:	82 e0       	ldi	r24, 0x02	; 2
    4cac:	66 e0       	ldi	r22, 0x06	; 6
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    4cb4:	05 c0       	rjmp	.+10     	; 0x4cc0 <LED_vTurnOff+0xd2>
		break;
	case LED7:
		DIO_vSetPinVal(LED7_PORT, LED7_PIN, LOW);
    4cb6:	82 e0       	ldi	r24, 0x02	; 2
    4cb8:	67 e0       	ldi	r22, 0x07	; 7
    4cba:	40 e0       	ldi	r20, 0x00	; 0
    4cbc:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
		break;
	}
}
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	cf 91       	pop	r28
    4cc8:	df 91       	pop	r29
    4cca:	08 95       	ret

00004ccc <LDR_vInit>:
#include "../../MCAL/ADC/ADC_int.h"
#include "LDR_pri.h"
#include "LDR_cfg.h"
#include "LDR_int.h"

void LDR_vInit(){
    4ccc:	df 93       	push	r29
    4cce:	cf 93       	push	r28
    4cd0:	cd b7       	in	r28, 0x3d	; 61
    4cd2:	de b7       	in	r29, 0x3e	; 62
	 ADC_vInit();
    4cd4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <ADC_vInit>
}
    4cd8:	cf 91       	pop	r28
    4cda:	df 91       	pop	r29
    4cdc:	08 95       	ret

00004cde <LDR_f32GetLuxValue>:
f32 LDR_f32GetLuxValue(){
    4cde:	df 93       	push	r29
    4ce0:	cf 93       	push	r28
    4ce2:	cd b7       	in	r28, 0x3d	; 61
    4ce4:	de b7       	in	r29, 0x3e	; 62
    4ce6:	2e 97       	sbiw	r28, 0x0e	; 14
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
	u16 L_u16DigitalReading;
	f32 L_f32OutputVolt, L_f32LuxValue,L_f32LdrResValue;
	L_u16DigitalReading =ADC_u16ReadDigitalDataSync(ADC0);
    4cf2:	80 e0       	ldi	r24, 0x00	; 0
    4cf4:	0e 94 84 13 	call	0x2708	; 0x2708 <ADC_u16ReadDigitalDataSync>
    4cf8:	9e 87       	std	Y+14, r25	; 0x0e
    4cfa:	8d 87       	std	Y+13, r24	; 0x0d
	L_f32OutputVolt = L_u16DigitalReading * REFERENCE_VOLTAGE / TWO_POWER_ADC_RESOLUTION;
    4cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d00:	cc 01       	movw	r24, r24
    4d02:	a0 e0       	ldi	r26, 0x00	; 0
    4d04:	b0 e0       	ldi	r27, 0x00	; 0
    4d06:	bc 01       	movw	r22, r24
    4d08:	cd 01       	movw	r24, r26
    4d0a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4d0e:	dc 01       	movw	r26, r24
    4d10:	cb 01       	movw	r24, r22
    4d12:	bc 01       	movw	r22, r24
    4d14:	cd 01       	movw	r24, r26
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 ea       	ldi	r20, 0xA0	; 160
    4d1c:	50 e4       	ldi	r21, 0x40	; 64
    4d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d22:	dc 01       	movw	r26, r24
    4d24:	cb 01       	movw	r24, r22
    4d26:	bc 01       	movw	r22, r24
    4d28:	cd 01       	movw	r24, r26
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e8       	ldi	r20, 0x80	; 128
    4d30:	54 e4       	ldi	r21, 0x44	; 68
    4d32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	89 87       	std	Y+9, r24	; 0x09
    4d3c:	9a 87       	std	Y+10, r25	; 0x0a
    4d3e:	ab 87       	std	Y+11, r26	; 0x0b
    4d40:	bc 87       	std	Y+12, r27	; 0x0c
	L_f32LdrResValue =  (RES_KO * INPUT_VOLT - RES_KO * L_f32OutputVolt) / 	L_f32OutputVolt;
    4d42:	69 85       	ldd	r22, Y+9	; 0x09
    4d44:	7a 85       	ldd	r23, Y+10	; 0x0a
    4d46:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d48:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d4a:	20 e0       	ldi	r18, 0x00	; 0
    4d4c:	30 e4       	ldi	r19, 0x40	; 64
    4d4e:	4c e9       	ldi	r20, 0x9C	; 156
    4d50:	55 ec       	ldi	r21, 0xC5	; 197
    4d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e5       	ldi	r19, 0x50	; 80
    4d62:	43 ec       	ldi	r20, 0xC3	; 195
    4d64:	56 e4       	ldi	r21, 0x46	; 70
    4d66:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	bc 01       	movw	r22, r24
    4d70:	cd 01       	movw	r24, r26
    4d72:	29 85       	ldd	r18, Y+9	; 0x09
    4d74:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d76:	4b 85       	ldd	r20, Y+11	; 0x0b
    4d78:	5c 85       	ldd	r21, Y+12	; 0x0c
    4d7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	89 83       	std	Y+1, r24	; 0x01
    4d84:	9a 83       	std	Y+2, r25	; 0x02
    4d86:	ab 83       	std	Y+3, r26	; 0x03
    4d88:	bc 83       	std	Y+4, r27	; 0x04
	L_f32LuxValue = 500.0/ (L_f32LdrResValue/1000);
    4d8a:	69 81       	ldd	r22, Y+1	; 0x01
    4d8c:	7a 81       	ldd	r23, Y+2	; 0x02
    4d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d90:	9c 81       	ldd	r25, Y+4	; 0x04
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	4a e7       	ldi	r20, 0x7A	; 122
    4d98:	54 e4       	ldi	r21, 0x44	; 68
    4d9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	9c 01       	movw	r18, r24
    4da4:	ad 01       	movw	r20, r26
    4da6:	60 e0       	ldi	r22, 0x00	; 0
    4da8:	70 e0       	ldi	r23, 0x00	; 0
    4daa:	8a ef       	ldi	r24, 0xFA	; 250
    4dac:	93 e4       	ldi	r25, 0x43	; 67
    4dae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	8d 83       	std	Y+5, r24	; 0x05
    4db8:	9e 83       	std	Y+6, r25	; 0x06
    4dba:	af 83       	std	Y+7, r26	; 0x07
    4dbc:	b8 87       	std	Y+8, r27	; 0x08
	return (L_f32LuxValue);
    4dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4dc2:	af 81       	ldd	r26, Y+7	; 0x07
    4dc4:	b8 85       	ldd	r27, Y+8	; 0x08
}
    4dc6:	bc 01       	movw	r22, r24
    4dc8:	cd 01       	movw	r24, r26
    4dca:	2e 96       	adiw	r28, 0x0e	; 14
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret

00004ddc <LCD_vInit>:
#include "LCD_cfg.h"
#include "LCD_int.h"
#include <avr/delay.h>
#include <stdlib.h>
void LCD_vInit()
{
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	df 93       	push	r29
    4de2:	cf 93       	push	r28
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
    4de8:	cc 54       	subi	r28, 0x4C	; 76
    4dea:	d0 40       	sbci	r29, 0x00	; 0
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	fe 01       	movw	r30, r28
    4df8:	e7 5b       	subi	r30, 0xB7	; 183
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	a8 ec       	ldi	r26, 0xC8	; 200
    4e02:	b2 e4       	ldi	r27, 0x42	; 66
    4e04:	80 83       	st	Z, r24
    4e06:	91 83       	std	Z+1, r25	; 0x01
    4e08:	a2 83       	std	Z+2, r26	; 0x02
    4e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0c:	8e 01       	movw	r16, r28
    4e0e:	0b 5b       	subi	r16, 0xBB	; 187
    4e10:	1f 4f       	sbci	r17, 0xFF	; 255
    4e12:	fe 01       	movw	r30, r28
    4e14:	e7 5b       	subi	r30, 0xB7	; 183
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	60 81       	ld	r22, Z
    4e1a:	71 81       	ldd	r23, Z+1	; 0x01
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	93 81       	ldd	r25, Z+3	; 0x03
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	4a ef       	ldi	r20, 0xFA	; 250
    4e26:	54 e4       	ldi	r21, 0x44	; 68
    4e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	f8 01       	movw	r30, r16
    4e32:	80 83       	st	Z, r24
    4e34:	91 83       	std	Z+1, r25	; 0x01
    4e36:	a2 83       	std	Z+2, r26	; 0x02
    4e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	eb 5b       	subi	r30, 0xBB	; 187
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	60 81       	ld	r22, Z
    4e42:	71 81       	ldd	r23, Z+1	; 0x01
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	93 81       	ldd	r25, Z+3	; 0x03
    4e48:	20 e0       	ldi	r18, 0x00	; 0
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	40 e8       	ldi	r20, 0x80	; 128
    4e4e:	5f e3       	ldi	r21, 0x3F	; 63
    4e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e54:	88 23       	and	r24, r24
    4e56:	44 f4       	brge	.+16     	; 0x4e68 <LCD_vInit+0x8c>
		__ticks = 1;
    4e58:	fe 01       	movw	r30, r28
    4e5a:	ed 5b       	subi	r30, 0xBD	; 189
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	91 83       	std	Z+1, r25	; 0x01
    4e64:	80 83       	st	Z, r24
    4e66:	64 c0       	rjmp	.+200    	; 0x4f30 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    4e68:	fe 01       	movw	r30, r28
    4e6a:	eb 5b       	subi	r30, 0xBB	; 187
    4e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6e:	60 81       	ld	r22, Z
    4e70:	71 81       	ldd	r23, Z+1	; 0x01
    4e72:	82 81       	ldd	r24, Z+2	; 0x02
    4e74:	93 81       	ldd	r25, Z+3	; 0x03
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	3f ef       	ldi	r19, 0xFF	; 255
    4e7a:	4f e7       	ldi	r20, 0x7F	; 127
    4e7c:	57 e4       	ldi	r21, 0x47	; 71
    4e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e82:	18 16       	cp	r1, r24
    4e84:	0c f0       	brlt	.+2      	; 0x4e88 <LCD_vInit+0xac>
    4e86:	43 c0       	rjmp	.+134    	; 0x4f0e <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e88:	fe 01       	movw	r30, r28
    4e8a:	e7 5b       	subi	r30, 0xB7	; 183
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	60 81       	ld	r22, Z
    4e90:	71 81       	ldd	r23, Z+1	; 0x01
    4e92:	82 81       	ldd	r24, Z+2	; 0x02
    4e94:	93 81       	ldd	r25, Z+3	; 0x03
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	40 e2       	ldi	r20, 0x20	; 32
    4e9c:	51 e4       	ldi	r21, 0x41	; 65
    4e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	8e 01       	movw	r16, r28
    4ea8:	0d 5b       	subi	r16, 0xBD	; 189
    4eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    4eac:	bc 01       	movw	r22, r24
    4eae:	cd 01       	movw	r24, r26
    4eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	cb 01       	movw	r24, r22
    4eb8:	f8 01       	movw	r30, r16
    4eba:	91 83       	std	Z+1, r25	; 0x01
    4ebc:	80 83       	st	Z, r24
    4ebe:	1f c0       	rjmp	.+62     	; 0x4efe <LCD_vInit+0x122>
    4ec0:	fe 01       	movw	r30, r28
    4ec2:	ef 5b       	subi	r30, 0xBF	; 191
    4ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec6:	88 ec       	ldi	r24, 0xC8	; 200
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	80 83       	st	Z, r24
    4ece:	fe 01       	movw	r30, r28
    4ed0:	ef 5b       	subi	r30, 0xBF	; 191
    4ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	f1 f7       	brne	.-4      	; 0x4ed8 <LCD_vInit+0xfc>
    4edc:	fe 01       	movw	r30, r28
    4ede:	ef 5b       	subi	r30, 0xBF	; 191
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	91 83       	std	Z+1, r25	; 0x01
    4ee4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee6:	de 01       	movw	r26, r28
    4ee8:	ad 5b       	subi	r26, 0xBD	; 189
    4eea:	bf 4f       	sbci	r27, 0xFF	; 255
    4eec:	fe 01       	movw	r30, r28
    4eee:	ed 5b       	subi	r30, 0xBD	; 189
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 81       	ld	r24, Z
    4ef4:	91 81       	ldd	r25, Z+1	; 0x01
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	11 96       	adiw	r26, 0x01	; 1
    4efa:	9c 93       	st	X, r25
    4efc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efe:	fe 01       	movw	r30, r28
    4f00:	ed 5b       	subi	r30, 0xBD	; 189
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	80 81       	ld	r24, Z
    4f06:	91 81       	ldd	r25, Z+1	; 0x01
    4f08:	00 97       	sbiw	r24, 0x00	; 0
    4f0a:	d1 f6       	brne	.-76     	; 0x4ec0 <LCD_vInit+0xe4>
    4f0c:	24 c0       	rjmp	.+72     	; 0x4f56 <LCD_vInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0e:	8e 01       	movw	r16, r28
    4f10:	0d 5b       	subi	r16, 0xBD	; 189
    4f12:	1f 4f       	sbci	r17, 0xFF	; 255
    4f14:	fe 01       	movw	r30, r28
    4f16:	eb 5b       	subi	r30, 0xBB	; 187
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	60 81       	ld	r22, Z
    4f1c:	71 81       	ldd	r23, Z+1	; 0x01
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	93 81       	ldd	r25, Z+3	; 0x03
    4f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f26:	dc 01       	movw	r26, r24
    4f28:	cb 01       	movw	r24, r22
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	91 83       	std	Z+1, r25	; 0x01
    4f2e:	80 83       	st	Z, r24
    4f30:	fe 01       	movw	r30, r28
    4f32:	ed 5b       	subi	r30, 0xBD	; 189
    4f34:	ff 4f       	sbci	r31, 0xFF	; 255
    4f36:	80 81       	ld	r24, Z
    4f38:	91 81       	ldd	r25, Z+1	; 0x01
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	ff 96       	adiw	r30, 0x3f	; 63
    4f3e:	91 83       	std	Z+1, r25	; 0x01
    4f40:	80 83       	st	Z, r24
    4f42:	fe 01       	movw	r30, r28
    4f44:	ff 96       	adiw	r30, 0x3f	; 63
    4f46:	80 81       	ld	r24, Z
    4f48:	91 81       	ldd	r25, Z+1	; 0x01
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	f1 f7       	brne	.-4      	; 0x4f4a <LCD_vInit+0x16e>
    4f4e:	fe 01       	movw	r30, r28
    4f50:	ff 96       	adiw	r30, 0x3f	; 63
    4f52:	91 83       	std	Z+1, r25	; 0x01
    4f54:	80 83       	st	Z, r24
    _delay_ms(100);
    DIO_vSetPinDir(LCD_EN_PORT, LCD_EN_PIN, DIR_OUTPUT);
    4f56:	80 e0       	ldi	r24, 0x00	; 0
    4f58:	62 e0       	ldi	r22, 0x02	; 2
    4f5a:	41 e0       	ldi	r20, 0x01	; 1
    4f5c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinDir(LCD_RW_PORT, LCD_RW_PIN, DIR_OUTPUT);
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	61 e0       	ldi	r22, 0x01	; 1
    4f64:	41 e0       	ldi	r20, 0x01	; 1
    4f66:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPinDir(LCD_RS_PORT, LCD_RS_PIN, DIR_OUTPUT);
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	60 e0       	ldi	r22, 0x00	; 0
    4f6e:	41 e0       	ldi	r20, 0x01	; 1
    4f70:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
    DIO_vSetPortDir(LCD_DATA_PORT, PORT_OUT);
    4f74:	82 e0       	ldi	r24, 0x02	; 2
    4f76:	6f ef       	ldi	r22, 0xFF	; 255
    4f78:	0e 94 4c 12 	call	0x2498	; 0x2498 <DIO_vSetPortDir>

#if LCD_MODE == MODE_8_BIT
    LCD_vWriteCommand(MODE_8BIT_2LINE);
    4f7c:	88 e3       	ldi	r24, 0x38	; 56
    4f7e:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	a8 e4       	ldi	r26, 0x48	; 72
    4f88:	b2 e4       	ldi	r27, 0x42	; 66
    4f8a:	8b af       	std	Y+59, r24	; 0x3b
    4f8c:	9c af       	std	Y+60, r25	; 0x3c
    4f8e:	ad af       	std	Y+61, r26	; 0x3d
    4f90:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f92:	6b ad       	ldd	r22, Y+59	; 0x3b
    4f94:	7c ad       	ldd	r23, Y+60	; 0x3c
    4f96:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f98:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f9a:	2b ea       	ldi	r18, 0xAB	; 171
    4f9c:	3a ea       	ldi	r19, 0xAA	; 170
    4f9e:	4a e2       	ldi	r20, 0x2A	; 42
    4fa0:	50 e4       	ldi	r21, 0x40	; 64
    4fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	cb 01       	movw	r24, r22
    4faa:	8f ab       	std	Y+55, r24	; 0x37
    4fac:	98 af       	std	Y+56, r25	; 0x38
    4fae:	a9 af       	std	Y+57, r26	; 0x39
    4fb0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    4fb2:	6f a9       	ldd	r22, Y+55	; 0x37
    4fb4:	78 ad       	ldd	r23, Y+56	; 0x38
    4fb6:	89 ad       	ldd	r24, Y+57	; 0x39
    4fb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	40 e8       	ldi	r20, 0x80	; 128
    4fc0:	5f e3       	ldi	r21, 0x3F	; 63
    4fc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fc6:	88 23       	and	r24, r24
    4fc8:	1c f4       	brge	.+6      	; 0x4fd0 <LCD_vInit+0x1f4>
		__ticks = 1;
    4fca:	81 e0       	ldi	r24, 0x01	; 1
    4fcc:	8e ab       	std	Y+54, r24	; 0x36
    4fce:	91 c0       	rjmp	.+290    	; 0x50f2 <LCD_vInit+0x316>
	else if (__tmp > 255)
    4fd0:	6f a9       	ldd	r22, Y+55	; 0x37
    4fd2:	78 ad       	ldd	r23, Y+56	; 0x38
    4fd4:	89 ad       	ldd	r24, Y+57	; 0x39
    4fd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4fd8:	20 e0       	ldi	r18, 0x00	; 0
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	4f e7       	ldi	r20, 0x7F	; 127
    4fde:	53 e4       	ldi	r21, 0x43	; 67
    4fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fe4:	18 16       	cp	r1, r24
    4fe6:	0c f0       	brlt	.+2      	; 0x4fea <LCD_vInit+0x20e>
    4fe8:	7b c0       	rjmp	.+246    	; 0x50e0 <LCD_vInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    4fea:	6b ad       	ldd	r22, Y+59	; 0x3b
    4fec:	7c ad       	ldd	r23, Y+60	; 0x3c
    4fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	4a e7       	ldi	r20, 0x7A	; 122
    4ff8:	54 e4       	ldi	r21, 0x44	; 68
    4ffa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ffe:	dc 01       	movw	r26, r24
    5000:	cb 01       	movw	r24, r22
    5002:	8a ab       	std	Y+50, r24	; 0x32
    5004:	9b ab       	std	Y+51, r25	; 0x33
    5006:	ac ab       	std	Y+52, r26	; 0x34
    5008:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500a:	6a a9       	ldd	r22, Y+50	; 0x32
    500c:	7b a9       	ldd	r23, Y+51	; 0x33
    500e:	8c a9       	ldd	r24, Y+52	; 0x34
    5010:	9d a9       	ldd	r25, Y+53	; 0x35
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	4a ef       	ldi	r20, 0xFA	; 250
    5018:	54 e4       	ldi	r21, 0x44	; 68
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	8e a7       	std	Y+46, r24	; 0x2e
    5024:	9f a7       	std	Y+47, r25	; 0x2f
    5026:	a8 ab       	std	Y+48, r26	; 0x30
    5028:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    502a:	6e a5       	ldd	r22, Y+46	; 0x2e
    502c:	7f a5       	ldd	r23, Y+47	; 0x2f
    502e:	88 a9       	ldd	r24, Y+48	; 0x30
    5030:	99 a9       	ldd	r25, Y+49	; 0x31
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	40 e8       	ldi	r20, 0x80	; 128
    5038:	5f e3       	ldi	r21, 0x3F	; 63
    503a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    503e:	88 23       	and	r24, r24
    5040:	2c f4       	brge	.+10     	; 0x504c <LCD_vInit+0x270>
		__ticks = 1;
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	9d a7       	std	Y+45, r25	; 0x2d
    5048:	8c a7       	std	Y+44, r24	; 0x2c
    504a:	3f c0       	rjmp	.+126    	; 0x50ca <LCD_vInit+0x2ee>
	else if (__tmp > 65535)
    504c:	6e a5       	ldd	r22, Y+46	; 0x2e
    504e:	7f a5       	ldd	r23, Y+47	; 0x2f
    5050:	88 a9       	ldd	r24, Y+48	; 0x30
    5052:	99 a9       	ldd	r25, Y+49	; 0x31
    5054:	20 e0       	ldi	r18, 0x00	; 0
    5056:	3f ef       	ldi	r19, 0xFF	; 255
    5058:	4f e7       	ldi	r20, 0x7F	; 127
    505a:	57 e4       	ldi	r21, 0x47	; 71
    505c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5060:	18 16       	cp	r1, r24
    5062:	4c f5       	brge	.+82     	; 0x50b6 <LCD_vInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5064:	6a a9       	ldd	r22, Y+50	; 0x32
    5066:	7b a9       	ldd	r23, Y+51	; 0x33
    5068:	8c a9       	ldd	r24, Y+52	; 0x34
    506a:	9d a9       	ldd	r25, Y+53	; 0x35
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	40 e2       	ldi	r20, 0x20	; 32
    5072:	51 e4       	ldi	r21, 0x41	; 65
    5074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	bc 01       	movw	r22, r24
    507e:	cd 01       	movw	r24, r26
    5080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	9d a7       	std	Y+45, r25	; 0x2d
    508a:	8c a7       	std	Y+44, r24	; 0x2c
    508c:	0f c0       	rjmp	.+30     	; 0x50ac <LCD_vInit+0x2d0>
    508e:	88 ec       	ldi	r24, 0xC8	; 200
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	9b a7       	std	Y+43, r25	; 0x2b
    5094:	8a a7       	std	Y+42, r24	; 0x2a
    5096:	8a a5       	ldd	r24, Y+42	; 0x2a
    5098:	9b a5       	ldd	r25, Y+43	; 0x2b
    509a:	01 97       	sbiw	r24, 0x01	; 1
    509c:	f1 f7       	brne	.-4      	; 0x509a <LCD_vInit+0x2be>
    509e:	9b a7       	std	Y+43, r25	; 0x2b
    50a0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    50a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    50a6:	01 97       	sbiw	r24, 0x01	; 1
    50a8:	9d a7       	std	Y+45, r25	; 0x2d
    50aa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    50ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	69 f7       	brne	.-38     	; 0x508e <LCD_vInit+0x2b2>
    50b4:	24 c0       	rjmp	.+72     	; 0x50fe <LCD_vInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b6:	6e a5       	ldd	r22, Y+46	; 0x2e
    50b8:	7f a5       	ldd	r23, Y+47	; 0x2f
    50ba:	88 a9       	ldd	r24, Y+48	; 0x30
    50bc:	99 a9       	ldd	r25, Y+49	; 0x31
    50be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	9d a7       	std	Y+45, r25	; 0x2d
    50c8:	8c a7       	std	Y+44, r24	; 0x2c
    50ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    50cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    50ce:	99 a7       	std	Y+41, r25	; 0x29
    50d0:	88 a7       	std	Y+40, r24	; 0x28
    50d2:	88 a5       	ldd	r24, Y+40	; 0x28
    50d4:	99 a5       	ldd	r25, Y+41	; 0x29
    50d6:	01 97       	sbiw	r24, 0x01	; 1
    50d8:	f1 f7       	brne	.-4      	; 0x50d6 <LCD_vInit+0x2fa>
    50da:	99 a7       	std	Y+41, r25	; 0x29
    50dc:	88 a7       	std	Y+40, r24	; 0x28
    50de:	0f c0       	rjmp	.+30     	; 0x50fe <LCD_vInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    50e0:	6f a9       	ldd	r22, Y+55	; 0x37
    50e2:	78 ad       	ldd	r23, Y+56	; 0x38
    50e4:	89 ad       	ldd	r24, Y+57	; 0x39
    50e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    50e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	8e ab       	std	Y+54, r24	; 0x36
    50f2:	8e a9       	ldd	r24, Y+54	; 0x36
    50f4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50f6:	8f a1       	ldd	r24, Y+39	; 0x27
    50f8:	8a 95       	dec	r24
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <LCD_vInit+0x31c>
    50fc:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(50);
    LCD_vWriteCommand(DISPLAY_ON_CUR_OFF_BL_OFF);
    50fe:	8c e0       	ldi	r24, 0x0C	; 12
    5100:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	a8 e4       	ldi	r26, 0x48	; 72
    510a:	b2 e4       	ldi	r27, 0x42	; 66
    510c:	8b a3       	std	Y+35, r24	; 0x23
    510e:	9c a3       	std	Y+36, r25	; 0x24
    5110:	ad a3       	std	Y+37, r26	; 0x25
    5112:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5114:	6b a1       	ldd	r22, Y+35	; 0x23
    5116:	7c a1       	ldd	r23, Y+36	; 0x24
    5118:	8d a1       	ldd	r24, Y+37	; 0x25
    511a:	9e a1       	ldd	r25, Y+38	; 0x26
    511c:	2b ea       	ldi	r18, 0xAB	; 171
    511e:	3a ea       	ldi	r19, 0xAA	; 170
    5120:	4a e2       	ldi	r20, 0x2A	; 42
    5122:	50 e4       	ldi	r21, 0x40	; 64
    5124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	8f 8f       	std	Y+31, r24	; 0x1f
    512e:	98 a3       	std	Y+32, r25	; 0x20
    5130:	a9 a3       	std	Y+33, r26	; 0x21
    5132:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    5134:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5136:	78 a1       	ldd	r23, Y+32	; 0x20
    5138:	89 a1       	ldd	r24, Y+33	; 0x21
    513a:	9a a1       	ldd	r25, Y+34	; 0x22
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	40 e8       	ldi	r20, 0x80	; 128
    5142:	5f e3       	ldi	r21, 0x3F	; 63
    5144:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5148:	88 23       	and	r24, r24
    514a:	1c f4       	brge	.+6      	; 0x5152 <LCD_vInit+0x376>
		__ticks = 1;
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	8e 8f       	std	Y+30, r24	; 0x1e
    5150:	91 c0       	rjmp	.+290    	; 0x5274 <LCD_vInit+0x498>
	else if (__tmp > 255)
    5152:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5154:	78 a1       	ldd	r23, Y+32	; 0x20
    5156:	89 a1       	ldd	r24, Y+33	; 0x21
    5158:	9a a1       	ldd	r25, Y+34	; 0x22
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	4f e7       	ldi	r20, 0x7F	; 127
    5160:	53 e4       	ldi	r21, 0x43	; 67
    5162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5166:	18 16       	cp	r1, r24
    5168:	0c f0       	brlt	.+2      	; 0x516c <LCD_vInit+0x390>
    516a:	7b c0       	rjmp	.+246    	; 0x5262 <LCD_vInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    516c:	6b a1       	ldd	r22, Y+35	; 0x23
    516e:	7c a1       	ldd	r23, Y+36	; 0x24
    5170:	8d a1       	ldd	r24, Y+37	; 0x25
    5172:	9e a1       	ldd	r25, Y+38	; 0x26
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	4a e7       	ldi	r20, 0x7A	; 122
    517a:	54 e4       	ldi	r21, 0x44	; 68
    517c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	8a 8f       	std	Y+26, r24	; 0x1a
    5186:	9b 8f       	std	Y+27, r25	; 0x1b
    5188:	ac 8f       	std	Y+28, r26	; 0x1c
    518a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    518c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    518e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5190:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5192:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	4a ef       	ldi	r20, 0xFA	; 250
    519a:	54 e4       	ldi	r21, 0x44	; 68
    519c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a0:	dc 01       	movw	r26, r24
    51a2:	cb 01       	movw	r24, r22
    51a4:	8e 8b       	std	Y+22, r24	; 0x16
    51a6:	9f 8b       	std	Y+23, r25	; 0x17
    51a8:	a8 8f       	std	Y+24, r26	; 0x18
    51aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    51ac:	6e 89       	ldd	r22, Y+22	; 0x16
    51ae:	7f 89       	ldd	r23, Y+23	; 0x17
    51b0:	88 8d       	ldd	r24, Y+24	; 0x18
    51b2:	99 8d       	ldd	r25, Y+25	; 0x19
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e8       	ldi	r20, 0x80	; 128
    51ba:	5f e3       	ldi	r21, 0x3F	; 63
    51bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51c0:	88 23       	and	r24, r24
    51c2:	2c f4       	brge	.+10     	; 0x51ce <LCD_vInit+0x3f2>
		__ticks = 1;
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	9d 8b       	std	Y+21, r25	; 0x15
    51ca:	8c 8b       	std	Y+20, r24	; 0x14
    51cc:	3f c0       	rjmp	.+126    	; 0x524c <LCD_vInit+0x470>
	else if (__tmp > 65535)
    51ce:	6e 89       	ldd	r22, Y+22	; 0x16
    51d0:	7f 89       	ldd	r23, Y+23	; 0x17
    51d2:	88 8d       	ldd	r24, Y+24	; 0x18
    51d4:	99 8d       	ldd	r25, Y+25	; 0x19
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	3f ef       	ldi	r19, 0xFF	; 255
    51da:	4f e7       	ldi	r20, 0x7F	; 127
    51dc:	57 e4       	ldi	r21, 0x47	; 71
    51de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51e2:	18 16       	cp	r1, r24
    51e4:	4c f5       	brge	.+82     	; 0x5238 <LCD_vInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    51e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    51ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    51ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	40 e2       	ldi	r20, 0x20	; 32
    51f4:	51 e4       	ldi	r21, 0x41	; 65
    51f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51fa:	dc 01       	movw	r26, r24
    51fc:	cb 01       	movw	r24, r22
    51fe:	bc 01       	movw	r22, r24
    5200:	cd 01       	movw	r24, r26
    5202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5206:	dc 01       	movw	r26, r24
    5208:	cb 01       	movw	r24, r22
    520a:	9d 8b       	std	Y+21, r25	; 0x15
    520c:	8c 8b       	std	Y+20, r24	; 0x14
    520e:	0f c0       	rjmp	.+30     	; 0x522e <LCD_vInit+0x452>
    5210:	88 ec       	ldi	r24, 0xC8	; 200
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	9b 8b       	std	Y+19, r25	; 0x13
    5216:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5218:	8a 89       	ldd	r24, Y+18	; 0x12
    521a:	9b 89       	ldd	r25, Y+19	; 0x13
    521c:	01 97       	sbiw	r24, 0x01	; 1
    521e:	f1 f7       	brne	.-4      	; 0x521c <LCD_vInit+0x440>
    5220:	9b 8b       	std	Y+19, r25	; 0x13
    5222:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5224:	8c 89       	ldd	r24, Y+20	; 0x14
    5226:	9d 89       	ldd	r25, Y+21	; 0x15
    5228:	01 97       	sbiw	r24, 0x01	; 1
    522a:	9d 8b       	std	Y+21, r25	; 0x15
    522c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    522e:	8c 89       	ldd	r24, Y+20	; 0x14
    5230:	9d 89       	ldd	r25, Y+21	; 0x15
    5232:	00 97       	sbiw	r24, 0x00	; 0
    5234:	69 f7       	brne	.-38     	; 0x5210 <LCD_vInit+0x434>
    5236:	24 c0       	rjmp	.+72     	; 0x5280 <LCD_vInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5238:	6e 89       	ldd	r22, Y+22	; 0x16
    523a:	7f 89       	ldd	r23, Y+23	; 0x17
    523c:	88 8d       	ldd	r24, Y+24	; 0x18
    523e:	99 8d       	ldd	r25, Y+25	; 0x19
    5240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5244:	dc 01       	movw	r26, r24
    5246:	cb 01       	movw	r24, r22
    5248:	9d 8b       	std	Y+21, r25	; 0x15
    524a:	8c 8b       	std	Y+20, r24	; 0x14
    524c:	8c 89       	ldd	r24, Y+20	; 0x14
    524e:	9d 89       	ldd	r25, Y+21	; 0x15
    5250:	99 8b       	std	Y+17, r25	; 0x11
    5252:	88 8b       	std	Y+16, r24	; 0x10
    5254:	88 89       	ldd	r24, Y+16	; 0x10
    5256:	99 89       	ldd	r25, Y+17	; 0x11
    5258:	01 97       	sbiw	r24, 0x01	; 1
    525a:	f1 f7       	brne	.-4      	; 0x5258 <LCD_vInit+0x47c>
    525c:	99 8b       	std	Y+17, r25	; 0x11
    525e:	88 8b       	std	Y+16, r24	; 0x10
    5260:	0f c0       	rjmp	.+30     	; 0x5280 <LCD_vInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5262:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5264:	78 a1       	ldd	r23, Y+32	; 0x20
    5266:	89 a1       	ldd	r24, Y+33	; 0x21
    5268:	9a a1       	ldd	r25, Y+34	; 0x22
    526a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526e:	dc 01       	movw	r26, r24
    5270:	cb 01       	movw	r24, r22
    5272:	8e 8f       	std	Y+30, r24	; 0x1e
    5274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5276:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5278:	8f 85       	ldd	r24, Y+15	; 0x0f
    527a:	8a 95       	dec	r24
    527c:	f1 f7       	brne	.-4      	; 0x527a <LCD_vInit+0x49e>
    527e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(50);
    LCD_vWriteCommand(CLEAR);
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	a0 e0       	ldi	r26, 0x00	; 0
    528c:	b0 e4       	ldi	r27, 0x40	; 64
    528e:	8b 87       	std	Y+11, r24	; 0x0b
    5290:	9c 87       	std	Y+12, r25	; 0x0c
    5292:	ad 87       	std	Y+13, r26	; 0x0d
    5294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5296:	6b 85       	ldd	r22, Y+11	; 0x0b
    5298:	7c 85       	ldd	r23, Y+12	; 0x0c
    529a:	8d 85       	ldd	r24, Y+13	; 0x0d
    529c:	9e 85       	ldd	r25, Y+14	; 0x0e
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	4a ef       	ldi	r20, 0xFA	; 250
    52a4:	54 e4       	ldi	r21, 0x44	; 68
    52a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	8f 83       	std	Y+7, r24	; 0x07
    52b0:	98 87       	std	Y+8, r25	; 0x08
    52b2:	a9 87       	std	Y+9, r26	; 0x09
    52b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52b6:	6f 81       	ldd	r22, Y+7	; 0x07
    52b8:	78 85       	ldd	r23, Y+8	; 0x08
    52ba:	89 85       	ldd	r24, Y+9	; 0x09
    52bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	40 e8       	ldi	r20, 0x80	; 128
    52c4:	5f e3       	ldi	r21, 0x3F	; 63
    52c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52ca:	88 23       	and	r24, r24
    52cc:	2c f4       	brge	.+10     	; 0x52d8 <LCD_vInit+0x4fc>
		__ticks = 1;
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	9e 83       	std	Y+6, r25	; 0x06
    52d4:	8d 83       	std	Y+5, r24	; 0x05
    52d6:	3f c0       	rjmp	.+126    	; 0x5356 <LCD_vInit+0x57a>
	else if (__tmp > 65535)
    52d8:	6f 81       	ldd	r22, Y+7	; 0x07
    52da:	78 85       	ldd	r23, Y+8	; 0x08
    52dc:	89 85       	ldd	r24, Y+9	; 0x09
    52de:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	3f ef       	ldi	r19, 0xFF	; 255
    52e4:	4f e7       	ldi	r20, 0x7F	; 127
    52e6:	57 e4       	ldi	r21, 0x47	; 71
    52e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52ec:	18 16       	cp	r1, r24
    52ee:	4c f5       	brge	.+82     	; 0x5342 <LCD_vInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    52f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    52f8:	20 e0       	ldi	r18, 0x00	; 0
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	40 e2       	ldi	r20, 0x20	; 32
    52fe:	51 e4       	ldi	r21, 0x41	; 65
    5300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	bc 01       	movw	r22, r24
    530a:	cd 01       	movw	r24, r26
    530c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5310:	dc 01       	movw	r26, r24
    5312:	cb 01       	movw	r24, r22
    5314:	9e 83       	std	Y+6, r25	; 0x06
    5316:	8d 83       	std	Y+5, r24	; 0x05
    5318:	0f c0       	rjmp	.+30     	; 0x5338 <LCD_vInit+0x55c>
    531a:	88 ec       	ldi	r24, 0xC8	; 200
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	9c 83       	std	Y+4, r25	; 0x04
    5320:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	9c 81       	ldd	r25, Y+4	; 0x04
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	f1 f7       	brne	.-4      	; 0x5326 <LCD_vInit+0x54a>
    532a:	9c 83       	std	Y+4, r25	; 0x04
    532c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	9e 83       	std	Y+6, r25	; 0x06
    5336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	69 f7       	brne	.-38     	; 0x531a <LCD_vInit+0x53e>
    5340:	14 c0       	rjmp	.+40     	; 0x536a <LCD_vInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5342:	6f 81       	ldd	r22, Y+7	; 0x07
    5344:	78 85       	ldd	r23, Y+8	; 0x08
    5346:	89 85       	ldd	r24, Y+9	; 0x09
    5348:	9a 85       	ldd	r25, Y+10	; 0x0a
    534a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	9e 83       	std	Y+6, r25	; 0x06
    5354:	8d 83       	std	Y+5, r24	; 0x05
    5356:	8d 81       	ldd	r24, Y+5	; 0x05
    5358:	9e 81       	ldd	r25, Y+6	; 0x06
    535a:	9a 83       	std	Y+2, r25	; 0x02
    535c:	89 83       	std	Y+1, r24	; 0x01
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	9a 81       	ldd	r25, Y+2	; 0x02
    5362:	01 97       	sbiw	r24, 0x01	; 1
    5364:	f1 f7       	brne	.-4      	; 0x5362 <LCD_vInit+0x586>
    5366:	9a 83       	std	Y+2, r25	; 0x02
    5368:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_vWriteCommand(CURSOR_INC);
    536a:	86 e0       	ldi	r24, 0x06	; 6
    536c:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    _delay_us(50);
    LCD_vWriteCommand(CLEAR);
    _delay_ms(2);
    LCD_vWriteCommand(CURSOR_INC);
#endif
}
    5370:	c4 5b       	subi	r28, 0xB4	; 180
    5372:	df 4f       	sbci	r29, 0xFF	; 255
    5374:	0f b6       	in	r0, 0x3f	; 63
    5376:	f8 94       	cli
    5378:	de bf       	out	0x3e, r29	; 62
    537a:	0f be       	out	0x3f, r0	; 63
    537c:	cd bf       	out	0x3d, r28	; 61
    537e:	cf 91       	pop	r28
    5380:	df 91       	pop	r29
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	08 95       	ret

00005388 <LCD_vWriteCommand>:
static void LCD_vWriteCommand(u8 A_u8Cmd)
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	0f 92       	push	r0
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	89 83       	std	Y+1, r24	; 0x01

#if LCD_MODE == MODE_8_BIT
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    5394:	80 e0       	ldi	r24, 0x00	; 0
    5396:	62 e0       	ldi	r22, 0x02	; 2
    5398:	41 e0       	ldi	r20, 0x01	; 1
    539a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	61 e0       	ldi	r22, 0x01	; 1
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, LOW);
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPortVal(LCD_DATA_PORT, A_u8Cmd);
    53b2:	82 e0       	ldi	r24, 0x02	; 2
    53b4:	69 81       	ldd	r22, Y+1	; 0x01
    53b6:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	62 e0       	ldi	r22, 0x02	; 2
    53be:	40 e0       	ldi	r20, 0x00	; 0
    53c0:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, LOW);
    DIO_vSetPortVal(LCD_DATA_PORT, ((A_u8Cmd << 4) & 0xF0));
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
#endif
}
    53c4:	0f 90       	pop	r0
    53c6:	cf 91       	pop	r28
    53c8:	df 91       	pop	r29
    53ca:	08 95       	ret

000053cc <LCD_vDisplayString>:
void LCD_vDisplayString(u8 *A_u8Str)
{
    53cc:	df 93       	push	r29
    53ce:	cf 93       	push	r28
    53d0:	cd b7       	in	r28, 0x3d	; 61
    53d2:	de b7       	in	r29, 0x3e	; 62
    53d4:	e6 97       	sbiw	r28, 0x36	; 54
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	9e ab       	std	Y+54, r25	; 0x36
    53e2:	8d ab       	std	Y+53, r24	; 0x35
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	a8 e4       	ldi	r26, 0x48	; 72
    53ea:	b2 e4       	ldi	r27, 0x42	; 66
    53ec:	8d a7       	std	Y+45, r24	; 0x2d
    53ee:	9e a7       	std	Y+46, r25	; 0x2e
    53f0:	af a7       	std	Y+47, r26	; 0x2f
    53f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    53f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    53f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    53f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    53fa:	98 a9       	ldd	r25, Y+48	; 0x30
    53fc:	2b ea       	ldi	r18, 0xAB	; 171
    53fe:	3a ea       	ldi	r19, 0xAA	; 170
    5400:	4a e2       	ldi	r20, 0x2A	; 42
    5402:	50 e4       	ldi	r21, 0x40	; 64
    5404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5408:	dc 01       	movw	r26, r24
    540a:	cb 01       	movw	r24, r22
    540c:	89 a7       	std	Y+41, r24	; 0x29
    540e:	9a a7       	std	Y+42, r25	; 0x2a
    5410:	ab a7       	std	Y+43, r26	; 0x2b
    5412:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5414:	69 a5       	ldd	r22, Y+41	; 0x29
    5416:	7a a5       	ldd	r23, Y+42	; 0x2a
    5418:	8b a5       	ldd	r24, Y+43	; 0x2b
    541a:	9c a5       	ldd	r25, Y+44	; 0x2c
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	40 e8       	ldi	r20, 0x80	; 128
    5422:	5f e3       	ldi	r21, 0x3F	; 63
    5424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5428:	88 23       	and	r24, r24
    542a:	1c f4       	brge	.+6      	; 0x5432 <LCD_vDisplayString+0x66>
		__ticks = 1;
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	88 a7       	std	Y+40, r24	; 0x28
    5430:	91 c0       	rjmp	.+290    	; 0x5554 <LCD_vDisplayString+0x188>
	else if (__tmp > 255)
    5432:	69 a5       	ldd	r22, Y+41	; 0x29
    5434:	7a a5       	ldd	r23, Y+42	; 0x2a
    5436:	8b a5       	ldd	r24, Y+43	; 0x2b
    5438:	9c a5       	ldd	r25, Y+44	; 0x2c
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	4f e7       	ldi	r20, 0x7F	; 127
    5440:	53 e4       	ldi	r21, 0x43	; 67
    5442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5446:	18 16       	cp	r1, r24
    5448:	0c f0       	brlt	.+2      	; 0x544c <LCD_vDisplayString+0x80>
    544a:	7b c0       	rjmp	.+246    	; 0x5542 <LCD_vDisplayString+0x176>
	{
		_delay_ms(__us / 1000.0);
    544c:	6d a5       	ldd	r22, Y+45	; 0x2d
    544e:	7e a5       	ldd	r23, Y+46	; 0x2e
    5450:	8f a5       	ldd	r24, Y+47	; 0x2f
    5452:	98 a9       	ldd	r25, Y+48	; 0x30
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	4a e7       	ldi	r20, 0x7A	; 122
    545a:	54 e4       	ldi	r21, 0x44	; 68
    545c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5460:	dc 01       	movw	r26, r24
    5462:	cb 01       	movw	r24, r22
    5464:	8c a3       	std	Y+36, r24	; 0x24
    5466:	9d a3       	std	Y+37, r25	; 0x25
    5468:	ae a3       	std	Y+38, r26	; 0x26
    546a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546c:	6c a1       	ldd	r22, Y+36	; 0x24
    546e:	7d a1       	ldd	r23, Y+37	; 0x25
    5470:	8e a1       	ldd	r24, Y+38	; 0x26
    5472:	9f a1       	ldd	r25, Y+39	; 0x27
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	4a ef       	ldi	r20, 0xFA	; 250
    547a:	54 e4       	ldi	r21, 0x44	; 68
    547c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	88 a3       	std	Y+32, r24	; 0x20
    5486:	99 a3       	std	Y+33, r25	; 0x21
    5488:	aa a3       	std	Y+34, r26	; 0x22
    548a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    548c:	68 a1       	ldd	r22, Y+32	; 0x20
    548e:	79 a1       	ldd	r23, Y+33	; 0x21
    5490:	8a a1       	ldd	r24, Y+34	; 0x22
    5492:	9b a1       	ldd	r25, Y+35	; 0x23
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	40 e8       	ldi	r20, 0x80	; 128
    549a:	5f e3       	ldi	r21, 0x3F	; 63
    549c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54a0:	88 23       	and	r24, r24
    54a2:	2c f4       	brge	.+10     	; 0x54ae <LCD_vDisplayString+0xe2>
		__ticks = 1;
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	9f 8f       	std	Y+31, r25	; 0x1f
    54aa:	8e 8f       	std	Y+30, r24	; 0x1e
    54ac:	3f c0       	rjmp	.+126    	; 0x552c <LCD_vDisplayString+0x160>
	else if (__tmp > 65535)
    54ae:	68 a1       	ldd	r22, Y+32	; 0x20
    54b0:	79 a1       	ldd	r23, Y+33	; 0x21
    54b2:	8a a1       	ldd	r24, Y+34	; 0x22
    54b4:	9b a1       	ldd	r25, Y+35	; 0x23
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	3f ef       	ldi	r19, 0xFF	; 255
    54ba:	4f e7       	ldi	r20, 0x7F	; 127
    54bc:	57 e4       	ldi	r21, 0x47	; 71
    54be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54c2:	18 16       	cp	r1, r24
    54c4:	4c f5       	brge	.+82     	; 0x5518 <LCD_vDisplayString+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c6:	6c a1       	ldd	r22, Y+36	; 0x24
    54c8:	7d a1       	ldd	r23, Y+37	; 0x25
    54ca:	8e a1       	ldd	r24, Y+38	; 0x26
    54cc:	9f a1       	ldd	r25, Y+39	; 0x27
    54ce:	20 e0       	ldi	r18, 0x00	; 0
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	40 e2       	ldi	r20, 0x20	; 32
    54d4:	51 e4       	ldi	r21, 0x41	; 65
    54d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54da:	dc 01       	movw	r26, r24
    54dc:	cb 01       	movw	r24, r22
    54de:	bc 01       	movw	r22, r24
    54e0:	cd 01       	movw	r24, r26
    54e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	9f 8f       	std	Y+31, r25	; 0x1f
    54ec:	8e 8f       	std	Y+30, r24	; 0x1e
    54ee:	0f c0       	rjmp	.+30     	; 0x550e <LCD_vDisplayString+0x142>
    54f0:	88 ec       	ldi	r24, 0xC8	; 200
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	9d 8f       	std	Y+29, r25	; 0x1d
    54f6:	8c 8f       	std	Y+28, r24	; 0x1c
    54f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    54fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    54fc:	01 97       	sbiw	r24, 0x01	; 1
    54fe:	f1 f7       	brne	.-4      	; 0x54fc <LCD_vDisplayString+0x130>
    5500:	9d 8f       	std	Y+29, r25	; 0x1d
    5502:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5504:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5506:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5508:	01 97       	sbiw	r24, 0x01	; 1
    550a:	9f 8f       	std	Y+31, r25	; 0x1f
    550c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    550e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5510:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	69 f7       	brne	.-38     	; 0x54f0 <LCD_vDisplayString+0x124>
    5516:	24 c0       	rjmp	.+72     	; 0x5560 <LCD_vDisplayString+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5518:	68 a1       	ldd	r22, Y+32	; 0x20
    551a:	79 a1       	ldd	r23, Y+33	; 0x21
    551c:	8a a1       	ldd	r24, Y+34	; 0x22
    551e:	9b a1       	ldd	r25, Y+35	; 0x23
    5520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	9f 8f       	std	Y+31, r25	; 0x1f
    552a:	8e 8f       	std	Y+30, r24	; 0x1e
    552c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    552e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5530:	9b 8f       	std	Y+27, r25	; 0x1b
    5532:	8a 8f       	std	Y+26, r24	; 0x1a
    5534:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5536:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	f1 f7       	brne	.-4      	; 0x5538 <LCD_vDisplayString+0x16c>
    553c:	9b 8f       	std	Y+27, r25	; 0x1b
    553e:	8a 8f       	std	Y+26, r24	; 0x1a
    5540:	0f c0       	rjmp	.+30     	; 0x5560 <LCD_vDisplayString+0x194>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5542:	69 a5       	ldd	r22, Y+41	; 0x29
    5544:	7a a5       	ldd	r23, Y+42	; 0x2a
    5546:	8b a5       	ldd	r24, Y+43	; 0x2b
    5548:	9c a5       	ldd	r25, Y+44	; 0x2c
    554a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	88 a7       	std	Y+40, r24	; 0x28
    5554:	88 a5       	ldd	r24, Y+40	; 0x28
    5556:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5558:	89 8d       	ldd	r24, Y+25	; 0x19
    555a:	8a 95       	dec	r24
    555c:	f1 f7       	brne	.-4      	; 0x555a <LCD_vDisplayString+0x18e>
    555e:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(50);
    for (u32 i = 0; A_u8Str[i] != 0; i++) /* Send each char of string till the NULL */
    5560:	19 aa       	std	Y+49, r1	; 0x31
    5562:	1a aa       	std	Y+50, r1	; 0x32
    5564:	1b aa       	std	Y+51, r1	; 0x33
    5566:	1c aa       	std	Y+52, r1	; 0x34
    5568:	d3 c0       	rjmp	.+422    	; 0x5710 <LCD_vDisplayString+0x344>
    {
        LCD_vDisplayChar(A_u8Str[i]);
    556a:	29 a9       	ldd	r18, Y+49	; 0x31
    556c:	3a a9       	ldd	r19, Y+50	; 0x32
    556e:	8d a9       	ldd	r24, Y+53	; 0x35
    5570:	9e a9       	ldd	r25, Y+54	; 0x36
    5572:	fc 01       	movw	r30, r24
    5574:	e2 0f       	add	r30, r18
    5576:	f3 1f       	adc	r31, r19
    5578:	80 81       	ld	r24, Z
    557a:	0e 94 9c 2b 	call	0x5738	; 0x5738 <LCD_vDisplayChar>
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	a0 e2       	ldi	r26, 0x20	; 32
    5584:	b1 e4       	ldi	r27, 0x41	; 65
    5586:	8d 8b       	std	Y+21, r24	; 0x15
    5588:	9e 8b       	std	Y+22, r25	; 0x16
    558a:	af 8b       	std	Y+23, r26	; 0x17
    558c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    558e:	6d 89       	ldd	r22, Y+21	; 0x15
    5590:	7e 89       	ldd	r23, Y+22	; 0x16
    5592:	8f 89       	ldd	r24, Y+23	; 0x17
    5594:	98 8d       	ldd	r25, Y+24	; 0x18
    5596:	2b ea       	ldi	r18, 0xAB	; 171
    5598:	3a ea       	ldi	r19, 0xAA	; 170
    559a:	4a e2       	ldi	r20, 0x2A	; 42
    559c:	50 e4       	ldi	r21, 0x40	; 64
    559e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a2:	dc 01       	movw	r26, r24
    55a4:	cb 01       	movw	r24, r22
    55a6:	89 8b       	std	Y+17, r24	; 0x11
    55a8:	9a 8b       	std	Y+18, r25	; 0x12
    55aa:	ab 8b       	std	Y+19, r26	; 0x13
    55ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    55ae:	69 89       	ldd	r22, Y+17	; 0x11
    55b0:	7a 89       	ldd	r23, Y+18	; 0x12
    55b2:	8b 89       	ldd	r24, Y+19	; 0x13
    55b4:	9c 89       	ldd	r25, Y+20	; 0x14
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	40 e8       	ldi	r20, 0x80	; 128
    55bc:	5f e3       	ldi	r21, 0x3F	; 63
    55be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55c2:	88 23       	and	r24, r24
    55c4:	1c f4       	brge	.+6      	; 0x55cc <LCD_vDisplayString+0x200>
		__ticks = 1;
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	88 8b       	std	Y+16, r24	; 0x10
    55ca:	91 c0       	rjmp	.+290    	; 0x56ee <LCD_vDisplayString+0x322>
	else if (__tmp > 255)
    55cc:	69 89       	ldd	r22, Y+17	; 0x11
    55ce:	7a 89       	ldd	r23, Y+18	; 0x12
    55d0:	8b 89       	ldd	r24, Y+19	; 0x13
    55d2:	9c 89       	ldd	r25, Y+20	; 0x14
    55d4:	20 e0       	ldi	r18, 0x00	; 0
    55d6:	30 e0       	ldi	r19, 0x00	; 0
    55d8:	4f e7       	ldi	r20, 0x7F	; 127
    55da:	53 e4       	ldi	r21, 0x43	; 67
    55dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55e0:	18 16       	cp	r1, r24
    55e2:	0c f0       	brlt	.+2      	; 0x55e6 <LCD_vDisplayString+0x21a>
    55e4:	7b c0       	rjmp	.+246    	; 0x56dc <LCD_vDisplayString+0x310>
	{
		_delay_ms(__us / 1000.0);
    55e6:	6d 89       	ldd	r22, Y+21	; 0x15
    55e8:	7e 89       	ldd	r23, Y+22	; 0x16
    55ea:	8f 89       	ldd	r24, Y+23	; 0x17
    55ec:	98 8d       	ldd	r25, Y+24	; 0x18
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	4a e7       	ldi	r20, 0x7A	; 122
    55f4:	54 e4       	ldi	r21, 0x44	; 68
    55f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	8c 87       	std	Y+12, r24	; 0x0c
    5600:	9d 87       	std	Y+13, r25	; 0x0d
    5602:	ae 87       	std	Y+14, r26	; 0x0e
    5604:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5606:	6c 85       	ldd	r22, Y+12	; 0x0c
    5608:	7d 85       	ldd	r23, Y+13	; 0x0d
    560a:	8e 85       	ldd	r24, Y+14	; 0x0e
    560c:	9f 85       	ldd	r25, Y+15	; 0x0f
    560e:	20 e0       	ldi	r18, 0x00	; 0
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	4a ef       	ldi	r20, 0xFA	; 250
    5614:	54 e4       	ldi	r21, 0x44	; 68
    5616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	88 87       	std	Y+8, r24	; 0x08
    5620:	99 87       	std	Y+9, r25	; 0x09
    5622:	aa 87       	std	Y+10, r26	; 0x0a
    5624:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5626:	68 85       	ldd	r22, Y+8	; 0x08
    5628:	79 85       	ldd	r23, Y+9	; 0x09
    562a:	8a 85       	ldd	r24, Y+10	; 0x0a
    562c:	9b 85       	ldd	r25, Y+11	; 0x0b
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	40 e8       	ldi	r20, 0x80	; 128
    5634:	5f e3       	ldi	r21, 0x3F	; 63
    5636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    563a:	88 23       	and	r24, r24
    563c:	2c f4       	brge	.+10     	; 0x5648 <LCD_vDisplayString+0x27c>
		__ticks = 1;
    563e:	81 e0       	ldi	r24, 0x01	; 1
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	9f 83       	std	Y+7, r25	; 0x07
    5644:	8e 83       	std	Y+6, r24	; 0x06
    5646:	3f c0       	rjmp	.+126    	; 0x56c6 <LCD_vDisplayString+0x2fa>
	else if (__tmp > 65535)
    5648:	68 85       	ldd	r22, Y+8	; 0x08
    564a:	79 85       	ldd	r23, Y+9	; 0x09
    564c:	8a 85       	ldd	r24, Y+10	; 0x0a
    564e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5650:	20 e0       	ldi	r18, 0x00	; 0
    5652:	3f ef       	ldi	r19, 0xFF	; 255
    5654:	4f e7       	ldi	r20, 0x7F	; 127
    5656:	57 e4       	ldi	r21, 0x47	; 71
    5658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    565c:	18 16       	cp	r1, r24
    565e:	4c f5       	brge	.+82     	; 0x56b2 <LCD_vDisplayString+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5660:	6c 85       	ldd	r22, Y+12	; 0x0c
    5662:	7d 85       	ldd	r23, Y+13	; 0x0d
    5664:	8e 85       	ldd	r24, Y+14	; 0x0e
    5666:	9f 85       	ldd	r25, Y+15	; 0x0f
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e2       	ldi	r20, 0x20	; 32
    566e:	51 e4       	ldi	r21, 0x41	; 65
    5670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	bc 01       	movw	r22, r24
    567a:	cd 01       	movw	r24, r26
    567c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5680:	dc 01       	movw	r26, r24
    5682:	cb 01       	movw	r24, r22
    5684:	9f 83       	std	Y+7, r25	; 0x07
    5686:	8e 83       	std	Y+6, r24	; 0x06
    5688:	0f c0       	rjmp	.+30     	; 0x56a8 <LCD_vDisplayString+0x2dc>
    568a:	88 ec       	ldi	r24, 0xC8	; 200
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	9d 83       	std	Y+5, r25	; 0x05
    5690:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5692:	8c 81       	ldd	r24, Y+4	; 0x04
    5694:	9d 81       	ldd	r25, Y+5	; 0x05
    5696:	01 97       	sbiw	r24, 0x01	; 1
    5698:	f1 f7       	brne	.-4      	; 0x5696 <LCD_vDisplayString+0x2ca>
    569a:	9d 83       	std	Y+5, r25	; 0x05
    569c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    569e:	8e 81       	ldd	r24, Y+6	; 0x06
    56a0:	9f 81       	ldd	r25, Y+7	; 0x07
    56a2:	01 97       	sbiw	r24, 0x01	; 1
    56a4:	9f 83       	std	Y+7, r25	; 0x07
    56a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56a8:	8e 81       	ldd	r24, Y+6	; 0x06
    56aa:	9f 81       	ldd	r25, Y+7	; 0x07
    56ac:	00 97       	sbiw	r24, 0x00	; 0
    56ae:	69 f7       	brne	.-38     	; 0x568a <LCD_vDisplayString+0x2be>
    56b0:	24 c0       	rjmp	.+72     	; 0x56fa <LCD_vDisplayString+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56b2:	68 85       	ldd	r22, Y+8	; 0x08
    56b4:	79 85       	ldd	r23, Y+9	; 0x09
    56b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    56b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    56ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	9f 83       	std	Y+7, r25	; 0x07
    56c4:	8e 83       	std	Y+6, r24	; 0x06
    56c6:	8e 81       	ldd	r24, Y+6	; 0x06
    56c8:	9f 81       	ldd	r25, Y+7	; 0x07
    56ca:	9b 83       	std	Y+3, r25	; 0x03
    56cc:	8a 83       	std	Y+2, r24	; 0x02
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	9b 81       	ldd	r25, Y+3	; 0x03
    56d2:	01 97       	sbiw	r24, 0x01	; 1
    56d4:	f1 f7       	brne	.-4      	; 0x56d2 <LCD_vDisplayString+0x306>
    56d6:	9b 83       	std	Y+3, r25	; 0x03
    56d8:	8a 83       	std	Y+2, r24	; 0x02
    56da:	0f c0       	rjmp	.+30     	; 0x56fa <LCD_vDisplayString+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56dc:	69 89       	ldd	r22, Y+17	; 0x11
    56de:	7a 89       	ldd	r23, Y+18	; 0x12
    56e0:	8b 89       	ldd	r24, Y+19	; 0x13
    56e2:	9c 89       	ldd	r25, Y+20	; 0x14
    56e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56e8:	dc 01       	movw	r26, r24
    56ea:	cb 01       	movw	r24, r22
    56ec:	88 8b       	std	Y+16, r24	; 0x10
    56ee:	88 89       	ldd	r24, Y+16	; 0x10
    56f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	8a 95       	dec	r24
    56f6:	f1 f7       	brne	.-4      	; 0x56f4 <LCD_vDisplayString+0x328>
    56f8:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_vDisplayString(u8 *A_u8Str)
{
    _delay_us(50);
    for (u32 i = 0; A_u8Str[i] != 0; i++) /* Send each char of string till the NULL */
    56fa:	89 a9       	ldd	r24, Y+49	; 0x31
    56fc:	9a a9       	ldd	r25, Y+50	; 0x32
    56fe:	ab a9       	ldd	r26, Y+51	; 0x33
    5700:	bc a9       	ldd	r27, Y+52	; 0x34
    5702:	01 96       	adiw	r24, 0x01	; 1
    5704:	a1 1d       	adc	r26, r1
    5706:	b1 1d       	adc	r27, r1
    5708:	89 ab       	std	Y+49, r24	; 0x31
    570a:	9a ab       	std	Y+50, r25	; 0x32
    570c:	ab ab       	std	Y+51, r26	; 0x33
    570e:	bc ab       	std	Y+52, r27	; 0x34
    5710:	29 a9       	ldd	r18, Y+49	; 0x31
    5712:	3a a9       	ldd	r19, Y+50	; 0x32
    5714:	8d a9       	ldd	r24, Y+53	; 0x35
    5716:	9e a9       	ldd	r25, Y+54	; 0x36
    5718:	fc 01       	movw	r30, r24
    571a:	e2 0f       	add	r30, r18
    571c:	f3 1f       	adc	r31, r19
    571e:	80 81       	ld	r24, Z
    5720:	88 23       	and	r24, r24
    5722:	09 f0       	breq	.+2      	; 0x5726 <LCD_vDisplayString+0x35a>
    5724:	22 cf       	rjmp	.-444    	; 0x556a <LCD_vDisplayString+0x19e>
    {
        LCD_vDisplayChar(A_u8Str[i]);
        _delay_us(10);
    }
}
    5726:	e6 96       	adiw	r28, 0x36	; 54
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	de bf       	out	0x3e, r29	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	cf 91       	pop	r28
    5734:	df 91       	pop	r29
    5736:	08 95       	ret

00005738 <LCD_vDisplayChar>:
void LCD_vDisplayChar(u8 A_u8Char)
{
    5738:	df 93       	push	r29
    573a:	cf 93       	push	r28
    573c:	0f 92       	push	r0
    573e:	cd b7       	in	r28, 0x3d	; 61
    5740:	de b7       	in	r29, 0x3e	; 62
    5742:	89 83       	std	Y+1, r24	; 0x01

#if LCD_MODE == MODE_8_BIT
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	62 e0       	ldi	r22, 0x02	; 2
    5748:	41 e0       	ldi	r20, 0x01	; 1
    574a:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	61 e0       	ldi	r22, 0x01	; 1
    5752:	40 e0       	ldi	r20, 0x00	; 0
    5754:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	41 e0       	ldi	r20, 0x01	; 1
    575e:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPortVal(LCD_DATA_PORT, A_u8Char);
    5762:	82 e0       	ldi	r24, 0x02	; 2
    5764:	69 81       	ldd	r22, Y+1	; 0x01
    5766:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_vSetPortVal>
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	62 e0       	ldi	r22, 0x02	; 2
    576e:	40 e0       	ldi	r20, 0x00	; 0
    5770:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    DIO_vSetPinVal(LCD_RW_PORT, LCD_RW_PIN, LOW);
    DIO_vSetPinVal(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    DIO_vSetPortVal(LCD_DATA_PORT, ((A_u8Char << 4) & 0xF0));
    DIO_vSetPinVal(LCD_EN_PORT, LCD_EN_PIN, LOW);
#endif
}
    5774:	0f 90       	pop	r0
    5776:	cf 91       	pop	r28
    5778:	df 91       	pop	r29
    577a:	08 95       	ret

0000577c <LCD_vDisplayNumInteger>:
void LCD_vDisplayNumInteger(u32 A_u32Num)
{
    577c:	df 93       	push	r29
    577e:	cf 93       	push	r28
    5780:	cd b7       	in	r28, 0x3d	; 61
    5782:	de b7       	in	r29, 0x3e	; 62
    5784:	68 97       	sbiw	r28, 0x18	; 24
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	de bf       	out	0x3e, r29	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	cd bf       	out	0x3d, r28	; 61
    5790:	6d 8b       	std	Y+21, r22	; 0x15
    5792:	7e 8b       	std	Y+22, r23	; 0x16
    5794:	8f 8b       	std	Y+23, r24	; 0x17
    5796:	98 8f       	std	Y+24, r25	; 0x18
    u8 L_u8Str[20];
    sprintf(L_u8Str, "%i", A_u32Num);
    5798:	8d b7       	in	r24, 0x3d	; 61
    579a:	9e b7       	in	r25, 0x3e	; 62
    579c:	08 97       	sbiw	r24, 0x08	; 8
    579e:	0f b6       	in	r0, 0x3f	; 63
    57a0:	f8 94       	cli
    57a2:	9e bf       	out	0x3e, r25	; 62
    57a4:	0f be       	out	0x3f, r0	; 63
    57a6:	8d bf       	out	0x3d, r24	; 61
    57a8:	ed b7       	in	r30, 0x3d	; 61
    57aa:	fe b7       	in	r31, 0x3e	; 62
    57ac:	31 96       	adiw	r30, 0x01	; 1
    57ae:	ce 01       	movw	r24, r28
    57b0:	01 96       	adiw	r24, 0x01	; 1
    57b2:	91 83       	std	Z+1, r25	; 0x01
    57b4:	80 83       	st	Z, r24
    57b6:	80 e6       	ldi	r24, 0x60	; 96
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	93 83       	std	Z+3, r25	; 0x03
    57bc:	82 83       	std	Z+2, r24	; 0x02
    57be:	8d 89       	ldd	r24, Y+21	; 0x15
    57c0:	9e 89       	ldd	r25, Y+22	; 0x16
    57c2:	af 89       	ldd	r26, Y+23	; 0x17
    57c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    57c6:	84 83       	std	Z+4, r24	; 0x04
    57c8:	95 83       	std	Z+5, r25	; 0x05
    57ca:	a6 83       	std	Z+6, r26	; 0x06
    57cc:	b7 83       	std	Z+7, r27	; 0x07
    57ce:	0e 94 5e 31 	call	0x62bc	; 0x62bc <sprintf>
    57d2:	8d b7       	in	r24, 0x3d	; 61
    57d4:	9e b7       	in	r25, 0x3e	; 62
    57d6:	08 96       	adiw	r24, 0x08	; 8
    57d8:	0f b6       	in	r0, 0x3f	; 63
    57da:	f8 94       	cli
    57dc:	9e bf       	out	0x3e, r25	; 62
    57de:	0f be       	out	0x3f, r0	; 63
    57e0:	8d bf       	out	0x3d, r24	; 61
    LCD_vDisplayString(L_u8Str);
    57e2:	ce 01       	movw	r24, r28
    57e4:	01 96       	adiw	r24, 0x01	; 1
    57e6:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
}
    57ea:	68 96       	adiw	r28, 0x18	; 24
    57ec:	0f b6       	in	r0, 0x3f	; 63
    57ee:	f8 94       	cli
    57f0:	de bf       	out	0x3e, r29	; 62
    57f2:	0f be       	out	0x3f, r0	; 63
    57f4:	cd bf       	out	0x3d, r28	; 61
    57f6:	cf 91       	pop	r28
    57f8:	df 91       	pop	r29
    57fa:	08 95       	ret

000057fc <LCD_vDisplayNumFloat>:
void LCD_vDisplayNumFloat(f32 A_f32Num)
{
    57fc:	df 93       	push	r29
    57fe:	cf 93       	push	r28
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	68 97       	sbiw	r28, 0x18	; 24
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
    5810:	6d 8b       	std	Y+21, r22	; 0x15
    5812:	7e 8b       	std	Y+22, r23	; 0x16
    5814:	8f 8b       	std	Y+23, r24	; 0x17
    5816:	98 8f       	std	Y+24, r25	; 0x18
    u8 L_u8Str[20];
    sprintf(L_u8Str, "%f", A_f32Num);
    5818:	8d b7       	in	r24, 0x3d	; 61
    581a:	9e b7       	in	r25, 0x3e	; 62
    581c:	08 97       	sbiw	r24, 0x08	; 8
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	9e bf       	out	0x3e, r25	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	8d bf       	out	0x3d, r24	; 61
    5828:	ed b7       	in	r30, 0x3d	; 61
    582a:	fe b7       	in	r31, 0x3e	; 62
    582c:	31 96       	adiw	r30, 0x01	; 1
    582e:	ce 01       	movw	r24, r28
    5830:	01 96       	adiw	r24, 0x01	; 1
    5832:	91 83       	std	Z+1, r25	; 0x01
    5834:	80 83       	st	Z, r24
    5836:	83 e6       	ldi	r24, 0x63	; 99
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	93 83       	std	Z+3, r25	; 0x03
    583c:	82 83       	std	Z+2, r24	; 0x02
    583e:	8d 89       	ldd	r24, Y+21	; 0x15
    5840:	9e 89       	ldd	r25, Y+22	; 0x16
    5842:	af 89       	ldd	r26, Y+23	; 0x17
    5844:	b8 8d       	ldd	r27, Y+24	; 0x18
    5846:	84 83       	std	Z+4, r24	; 0x04
    5848:	95 83       	std	Z+5, r25	; 0x05
    584a:	a6 83       	std	Z+6, r26	; 0x06
    584c:	b7 83       	std	Z+7, r27	; 0x07
    584e:	0e 94 5e 31 	call	0x62bc	; 0x62bc <sprintf>
    5852:	8d b7       	in	r24, 0x3d	; 61
    5854:	9e b7       	in	r25, 0x3e	; 62
    5856:	08 96       	adiw	r24, 0x08	; 8
    5858:	0f b6       	in	r0, 0x3f	; 63
    585a:	f8 94       	cli
    585c:	9e bf       	out	0x3e, r25	; 62
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	8d bf       	out	0x3d, r24	; 61
    LCD_vDisplayString(L_u8Str);
    5862:	ce 01       	movw	r24, r28
    5864:	01 96       	adiw	r24, 0x01	; 1
    5866:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
}
    586a:	68 96       	adiw	r28, 0x18	; 24
    586c:	0f b6       	in	r0, 0x3f	; 63
    586e:	f8 94       	cli
    5870:	de bf       	out	0x3e, r29	; 62
    5872:	0f be       	out	0x3f, r0	; 63
    5874:	cd bf       	out	0x3d, r28	; 61
    5876:	cf 91       	pop	r28
    5878:	df 91       	pop	r29
    587a:	08 95       	ret

0000587c <LCD_vClearDisplay>:
void LCD_vClearDisplay()
{
    587c:	df 93       	push	r29
    587e:	cf 93       	push	r28
    5880:	cd b7       	in	r28, 0x3d	; 61
    5882:	de b7       	in	r29, 0x3e	; 62
    5884:	2e 97       	sbiw	r28, 0x0e	; 14
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	f8 94       	cli
    588a:	de bf       	out	0x3e, r29	; 62
    588c:	0f be       	out	0x3f, r0	; 63
    588e:	cd bf       	out	0x3d, r28	; 61
    LCD_vWriteCommand(CLEAR);
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	a0 e0       	ldi	r26, 0x00	; 0
    589c:	b0 e4       	ldi	r27, 0x40	; 64
    589e:	8b 87       	std	Y+11, r24	; 0x0b
    58a0:	9c 87       	std	Y+12, r25	; 0x0c
    58a2:	ad 87       	std	Y+13, r26	; 0x0d
    58a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    58a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    58aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    58ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    58ae:	20 e0       	ldi	r18, 0x00	; 0
    58b0:	30 e0       	ldi	r19, 0x00	; 0
    58b2:	4a ef       	ldi	r20, 0xFA	; 250
    58b4:	54 e4       	ldi	r21, 0x44	; 68
    58b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	8f 83       	std	Y+7, r24	; 0x07
    58c0:	98 87       	std	Y+8, r25	; 0x08
    58c2:	a9 87       	std	Y+9, r26	; 0x09
    58c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58c6:	6f 81       	ldd	r22, Y+7	; 0x07
    58c8:	78 85       	ldd	r23, Y+8	; 0x08
    58ca:	89 85       	ldd	r24, Y+9	; 0x09
    58cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ce:	20 e0       	ldi	r18, 0x00	; 0
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	40 e8       	ldi	r20, 0x80	; 128
    58d4:	5f e3       	ldi	r21, 0x3F	; 63
    58d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58da:	88 23       	and	r24, r24
    58dc:	2c f4       	brge	.+10     	; 0x58e8 <LCD_vClearDisplay+0x6c>
		__ticks = 1;
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	9e 83       	std	Y+6, r25	; 0x06
    58e4:	8d 83       	std	Y+5, r24	; 0x05
    58e6:	3f c0       	rjmp	.+126    	; 0x5966 <LCD_vClearDisplay+0xea>
	else if (__tmp > 65535)
    58e8:	6f 81       	ldd	r22, Y+7	; 0x07
    58ea:	78 85       	ldd	r23, Y+8	; 0x08
    58ec:	89 85       	ldd	r24, Y+9	; 0x09
    58ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	3f ef       	ldi	r19, 0xFF	; 255
    58f4:	4f e7       	ldi	r20, 0x7F	; 127
    58f6:	57 e4       	ldi	r21, 0x47	; 71
    58f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58fc:	18 16       	cp	r1, r24
    58fe:	4c f5       	brge	.+82     	; 0x5952 <LCD_vClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5900:	6b 85       	ldd	r22, Y+11	; 0x0b
    5902:	7c 85       	ldd	r23, Y+12	; 0x0c
    5904:	8d 85       	ldd	r24, Y+13	; 0x0d
    5906:	9e 85       	ldd	r25, Y+14	; 0x0e
    5908:	20 e0       	ldi	r18, 0x00	; 0
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	40 e2       	ldi	r20, 0x20	; 32
    590e:	51 e4       	ldi	r21, 0x41	; 65
    5910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	bc 01       	movw	r22, r24
    591a:	cd 01       	movw	r24, r26
    591c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5920:	dc 01       	movw	r26, r24
    5922:	cb 01       	movw	r24, r22
    5924:	9e 83       	std	Y+6, r25	; 0x06
    5926:	8d 83       	std	Y+5, r24	; 0x05
    5928:	0f c0       	rjmp	.+30     	; 0x5948 <LCD_vClearDisplay+0xcc>
    592a:	88 ec       	ldi	r24, 0xC8	; 200
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	9c 83       	std	Y+4, r25	; 0x04
    5930:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5932:	8b 81       	ldd	r24, Y+3	; 0x03
    5934:	9c 81       	ldd	r25, Y+4	; 0x04
    5936:	01 97       	sbiw	r24, 0x01	; 1
    5938:	f1 f7       	brne	.-4      	; 0x5936 <LCD_vClearDisplay+0xba>
    593a:	9c 83       	std	Y+4, r25	; 0x04
    593c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    593e:	8d 81       	ldd	r24, Y+5	; 0x05
    5940:	9e 81       	ldd	r25, Y+6	; 0x06
    5942:	01 97       	sbiw	r24, 0x01	; 1
    5944:	9e 83       	std	Y+6, r25	; 0x06
    5946:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5948:	8d 81       	ldd	r24, Y+5	; 0x05
    594a:	9e 81       	ldd	r25, Y+6	; 0x06
    594c:	00 97       	sbiw	r24, 0x00	; 0
    594e:	69 f7       	brne	.-38     	; 0x592a <LCD_vClearDisplay+0xae>
    5950:	14 c0       	rjmp	.+40     	; 0x597a <LCD_vClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5952:	6f 81       	ldd	r22, Y+7	; 0x07
    5954:	78 85       	ldd	r23, Y+8	; 0x08
    5956:	89 85       	ldd	r24, Y+9	; 0x09
    5958:	9a 85       	ldd	r25, Y+10	; 0x0a
    595a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    595e:	dc 01       	movw	r26, r24
    5960:	cb 01       	movw	r24, r22
    5962:	9e 83       	std	Y+6, r25	; 0x06
    5964:	8d 83       	std	Y+5, r24	; 0x05
    5966:	8d 81       	ldd	r24, Y+5	; 0x05
    5968:	9e 81       	ldd	r25, Y+6	; 0x06
    596a:	9a 83       	std	Y+2, r25	; 0x02
    596c:	89 83       	std	Y+1, r24	; 0x01
    596e:	89 81       	ldd	r24, Y+1	; 0x01
    5970:	9a 81       	ldd	r25, Y+2	; 0x02
    5972:	01 97       	sbiw	r24, 0x01	; 1
    5974:	f1 f7       	brne	.-4      	; 0x5972 <LCD_vClearDisplay+0xf6>
    5976:	9a 83       	std	Y+2, r25	; 0x02
    5978:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
};
    597a:	2e 96       	adiw	r28, 0x0e	; 14
    597c:	0f b6       	in	r0, 0x3f	; 63
    597e:	f8 94       	cli
    5980:	de bf       	out	0x3e, r29	; 62
    5982:	0f be       	out	0x3f, r0	; 63
    5984:	cd bf       	out	0x3d, r28	; 61
    5986:	cf 91       	pop	r28
    5988:	df 91       	pop	r29
    598a:	08 95       	ret

0000598c <LCD_vSetPostion>:
void LCD_vSetPostion(u8 A_u8Row, u8 A_u8Column)
{
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	00 d0       	rcall	.+0      	; 0x5992 <LCD_vSetPostion+0x6>
    5992:	00 d0       	rcall	.+0      	; 0x5994 <LCD_vSetPostion+0x8>
    5994:	cd b7       	in	r28, 0x3d	; 61
    5996:	de b7       	in	r29, 0x3e	; 62
    5998:	89 83       	std	Y+1, r24	; 0x01
    599a:	6a 83       	std	Y+2, r22	; 0x02
    switch (A_u8Row)
    599c:	89 81       	ldd	r24, Y+1	; 0x01
    599e:	28 2f       	mov	r18, r24
    59a0:	30 e0       	ldi	r19, 0x00	; 0
    59a2:	3c 83       	std	Y+4, r19	; 0x04
    59a4:	2b 83       	std	Y+3, r18	; 0x03
    59a6:	8b 81       	ldd	r24, Y+3	; 0x03
    59a8:	9c 81       	ldd	r25, Y+4	; 0x04
    59aa:	00 97       	sbiw	r24, 0x00	; 0
    59ac:	31 f0       	breq	.+12     	; 0x59ba <LCD_vSetPostion+0x2e>
    59ae:	2b 81       	ldd	r18, Y+3	; 0x03
    59b0:	3c 81       	ldd	r19, Y+4	; 0x04
    59b2:	21 30       	cpi	r18, 0x01	; 1
    59b4:	31 05       	cpc	r19, r1
    59b6:	31 f0       	breq	.+12     	; 0x59c4 <LCD_vSetPostion+0x38>
    59b8:	09 c0       	rjmp	.+18     	; 0x59cc <LCD_vSetPostion+0x40>
    {
    case ROW0:
        LCD_vWriteCommand(ROW_0_ADD + A_u8Column);
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	80 58       	subi	r24, 0x80	; 128
    59be:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    59c2:	04 c0       	rjmp	.+8      	; 0x59cc <LCD_vSetPostion+0x40>
        break;
    case ROW1:
        LCD_vWriteCommand(ROW_1_ADD + A_u8Column);
    59c4:	8a 81       	ldd	r24, Y+2	; 0x02
    59c6:	80 54       	subi	r24, 0x40	; 64
    59c8:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
        break;
    default:
        break;
    }
};
    59cc:	0f 90       	pop	r0
    59ce:	0f 90       	pop	r0
    59d0:	0f 90       	pop	r0
    59d2:	0f 90       	pop	r0
    59d4:	cf 91       	pop	r28
    59d6:	df 91       	pop	r29
    59d8:	08 95       	ret

000059da <LCD_vShiftRight>:
void LCD_vShiftRight(u32 A_u8NoCells)
{
    59da:	df 93       	push	r29
    59dc:	cf 93       	push	r28
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <LCD_vShiftRight+0x6>
    59e0:	00 d0       	rcall	.+0      	; 0x59e2 <LCD_vShiftRight+0x8>
    59e2:	cd b7       	in	r28, 0x3d	; 61
    59e4:	de b7       	in	r29, 0x3e	; 62
    59e6:	69 83       	std	Y+1, r22	; 0x01
    59e8:	7a 83       	std	Y+2, r23	; 0x02
    59ea:	8b 83       	std	Y+3, r24	; 0x03
    59ec:	9c 83       	std	Y+4, r25	; 0x04
    59ee:	0e c0       	rjmp	.+28     	; 0x5a0c <LCD_vShiftRight+0x32>
    while (A_u8NoCells > 0)
    {
        LCD_vWriteCommand(SHIFT_RIGHT);
    59f0:	8c e1       	ldi	r24, 0x1C	; 28
    59f2:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
        A_u8NoCells--;
    59f6:	89 81       	ldd	r24, Y+1	; 0x01
    59f8:	9a 81       	ldd	r25, Y+2	; 0x02
    59fa:	ab 81       	ldd	r26, Y+3	; 0x03
    59fc:	bc 81       	ldd	r27, Y+4	; 0x04
    59fe:	01 97       	sbiw	r24, 0x01	; 1
    5a00:	a1 09       	sbc	r26, r1
    5a02:	b1 09       	sbc	r27, r1
    5a04:	89 83       	std	Y+1, r24	; 0x01
    5a06:	9a 83       	std	Y+2, r25	; 0x02
    5a08:	ab 83       	std	Y+3, r26	; 0x03
    5a0a:	bc 83       	std	Y+4, r27	; 0x04
        break;
    }
};
void LCD_vShiftRight(u32 A_u8NoCells)
{
    while (A_u8NoCells > 0)
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a10:	ab 81       	ldd	r26, Y+3	; 0x03
    5a12:	bc 81       	ldd	r27, Y+4	; 0x04
    5a14:	00 97       	sbiw	r24, 0x00	; 0
    5a16:	a1 05       	cpc	r26, r1
    5a18:	b1 05       	cpc	r27, r1
    5a1a:	51 f7       	brne	.-44     	; 0x59f0 <LCD_vShiftRight+0x16>
    {
        LCD_vWriteCommand(SHIFT_RIGHT);
        A_u8NoCells--;
    }
}
    5a1c:	0f 90       	pop	r0
    5a1e:	0f 90       	pop	r0
    5a20:	0f 90       	pop	r0
    5a22:	0f 90       	pop	r0
    5a24:	cf 91       	pop	r28
    5a26:	df 91       	pop	r29
    5a28:	08 95       	ret

00005a2a <LCD_vShiftLeft>:
void LCD_vShiftLeft(u32 A_u8NoCells)
{
    5a2a:	df 93       	push	r29
    5a2c:	cf 93       	push	r28
    5a2e:	00 d0       	rcall	.+0      	; 0x5a30 <LCD_vShiftLeft+0x6>
    5a30:	00 d0       	rcall	.+0      	; 0x5a32 <LCD_vShiftLeft+0x8>
    5a32:	cd b7       	in	r28, 0x3d	; 61
    5a34:	de b7       	in	r29, 0x3e	; 62
    5a36:	69 83       	std	Y+1, r22	; 0x01
    5a38:	7a 83       	std	Y+2, r23	; 0x02
    5a3a:	8b 83       	std	Y+3, r24	; 0x03
    5a3c:	9c 83       	std	Y+4, r25	; 0x04
    5a3e:	0e c0       	rjmp	.+28     	; 0x5a5c <LCD_vShiftLeft+0x32>
    while (A_u8NoCells > 0)
    {
        LCD_vWriteCommand(SHIFT_LEFT);
    5a40:	88 e1       	ldi	r24, 0x18	; 24
    5a42:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
        A_u8NoCells--;
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4a:	ab 81       	ldd	r26, Y+3	; 0x03
    5a4c:	bc 81       	ldd	r27, Y+4	; 0x04
    5a4e:	01 97       	sbiw	r24, 0x01	; 1
    5a50:	a1 09       	sbc	r26, r1
    5a52:	b1 09       	sbc	r27, r1
    5a54:	89 83       	std	Y+1, r24	; 0x01
    5a56:	9a 83       	std	Y+2, r25	; 0x02
    5a58:	ab 83       	std	Y+3, r26	; 0x03
    5a5a:	bc 83       	std	Y+4, r27	; 0x04
        A_u8NoCells--;
    }
}
void LCD_vShiftLeft(u32 A_u8NoCells)
{
    while (A_u8NoCells > 0)
    5a5c:	89 81       	ldd	r24, Y+1	; 0x01
    5a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a60:	ab 81       	ldd	r26, Y+3	; 0x03
    5a62:	bc 81       	ldd	r27, Y+4	; 0x04
    5a64:	00 97       	sbiw	r24, 0x00	; 0
    5a66:	a1 05       	cpc	r26, r1
    5a68:	b1 05       	cpc	r27, r1
    5a6a:	51 f7       	brne	.-44     	; 0x5a40 <LCD_vShiftLeft+0x16>
    {
        LCD_vWriteCommand(SHIFT_LEFT);
        A_u8NoCells--;
    }
}
    5a6c:	0f 90       	pop	r0
    5a6e:	0f 90       	pop	r0
    5a70:	0f 90       	pop	r0
    5a72:	0f 90       	pop	r0
    5a74:	cf 91       	pop	r28
    5a76:	df 91       	pop	r29
    5a78:	08 95       	ret

00005a7a <LCD_vReturnHome>:
void LCD_vReturnHome()
{
    5a7a:	df 93       	push	r29
    5a7c:	cf 93       	push	r28
    5a7e:	cd b7       	in	r28, 0x3d	; 61
    5a80:	de b7       	in	r29, 0x3e	; 62
    5a82:	2e 97       	sbiw	r28, 0x0e	; 14
    5a84:	0f b6       	in	r0, 0x3f	; 63
    5a86:	f8 94       	cli
    5a88:	de bf       	out	0x3e, r29	; 62
    5a8a:	0f be       	out	0x3f, r0	; 63
    5a8c:	cd bf       	out	0x3d, r28	; 61
    LCD_vWriteCommand(RETURN_HOME);
    5a8e:	82 e0       	ldi	r24, 0x02	; 2
    5a90:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	a0 e0       	ldi	r26, 0x00	; 0
    5a9a:	b0 e4       	ldi	r27, 0x40	; 64
    5a9c:	8b 87       	std	Y+11, r24	; 0x0b
    5a9e:	9c 87       	std	Y+12, r25	; 0x0c
    5aa0:	ad 87       	std	Y+13, r26	; 0x0d
    5aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	4a ef       	ldi	r20, 0xFA	; 250
    5ab2:	54 e4       	ldi	r21, 0x44	; 68
    5ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ab8:	dc 01       	movw	r26, r24
    5aba:	cb 01       	movw	r24, r22
    5abc:	8f 83       	std	Y+7, r24	; 0x07
    5abe:	98 87       	std	Y+8, r25	; 0x08
    5ac0:	a9 87       	std	Y+9, r26	; 0x09
    5ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ac6:	78 85       	ldd	r23, Y+8	; 0x08
    5ac8:	89 85       	ldd	r24, Y+9	; 0x09
    5aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5acc:	20 e0       	ldi	r18, 0x00	; 0
    5ace:	30 e0       	ldi	r19, 0x00	; 0
    5ad0:	40 e8       	ldi	r20, 0x80	; 128
    5ad2:	5f e3       	ldi	r21, 0x3F	; 63
    5ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ad8:	88 23       	and	r24, r24
    5ada:	2c f4       	brge	.+10     	; 0x5ae6 <LCD_vReturnHome+0x6c>
		__ticks = 1;
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	9e 83       	std	Y+6, r25	; 0x06
    5ae2:	8d 83       	std	Y+5, r24	; 0x05
    5ae4:	3f c0       	rjmp	.+126    	; 0x5b64 <LCD_vReturnHome+0xea>
	else if (__tmp > 65535)
    5ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ae8:	78 85       	ldd	r23, Y+8	; 0x08
    5aea:	89 85       	ldd	r24, Y+9	; 0x09
    5aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aee:	20 e0       	ldi	r18, 0x00	; 0
    5af0:	3f ef       	ldi	r19, 0xFF	; 255
    5af2:	4f e7       	ldi	r20, 0x7F	; 127
    5af4:	57 e4       	ldi	r21, 0x47	; 71
    5af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5afa:	18 16       	cp	r1, r24
    5afc:	4c f5       	brge	.+82     	; 0x5b50 <LCD_vReturnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b06:	20 e0       	ldi	r18, 0x00	; 0
    5b08:	30 e0       	ldi	r19, 0x00	; 0
    5b0a:	40 e2       	ldi	r20, 0x20	; 32
    5b0c:	51 e4       	ldi	r21, 0x41	; 65
    5b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b12:	dc 01       	movw	r26, r24
    5b14:	cb 01       	movw	r24, r22
    5b16:	bc 01       	movw	r22, r24
    5b18:	cd 01       	movw	r24, r26
    5b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b1e:	dc 01       	movw	r26, r24
    5b20:	cb 01       	movw	r24, r22
    5b22:	9e 83       	std	Y+6, r25	; 0x06
    5b24:	8d 83       	std	Y+5, r24	; 0x05
    5b26:	0f c0       	rjmp	.+30     	; 0x5b46 <LCD_vReturnHome+0xcc>
    5b28:	88 ec       	ldi	r24, 0xC8	; 200
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	9c 83       	std	Y+4, r25	; 0x04
    5b2e:	8b 83       	std	Y+3, r24	; 0x03
    5b30:	8b 81       	ldd	r24, Y+3	; 0x03
    5b32:	9c 81       	ldd	r25, Y+4	; 0x04
    5b34:	01 97       	sbiw	r24, 0x01	; 1
    5b36:	f1 f7       	brne	.-4      	; 0x5b34 <LCD_vReturnHome+0xba>
    5b38:	9c 83       	std	Y+4, r25	; 0x04
    5b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5b40:	01 97       	sbiw	r24, 0x01	; 1
    5b42:	9e 83       	std	Y+6, r25	; 0x06
    5b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b46:	8d 81       	ldd	r24, Y+5	; 0x05
    5b48:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4a:	00 97       	sbiw	r24, 0x00	; 0
    5b4c:	69 f7       	brne	.-38     	; 0x5b28 <LCD_vReturnHome+0xae>
    5b4e:	14 c0       	rjmp	.+40     	; 0x5b78 <LCD_vReturnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b50:	6f 81       	ldd	r22, Y+7	; 0x07
    5b52:	78 85       	ldd	r23, Y+8	; 0x08
    5b54:	89 85       	ldd	r24, Y+9	; 0x09
    5b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	9e 83       	std	Y+6, r25	; 0x06
    5b62:	8d 83       	std	Y+5, r24	; 0x05
    5b64:	8d 81       	ldd	r24, Y+5	; 0x05
    5b66:	9e 81       	ldd	r25, Y+6	; 0x06
    5b68:	9a 83       	std	Y+2, r25	; 0x02
    5b6a:	89 83       	std	Y+1, r24	; 0x01
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
    5b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b70:	01 97       	sbiw	r24, 0x01	; 1
    5b72:	f1 f7       	brne	.-4      	; 0x5b70 <LCD_vReturnHome+0xf6>
    5b74:	9a 83       	std	Y+2, r25	; 0x02
    5b76:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    5b78:	2e 96       	adiw	r28, 0x0e	; 14
    5b7a:	0f b6       	in	r0, 0x3f	; 63
    5b7c:	f8 94       	cli
    5b7e:	de bf       	out	0x3e, r29	; 62
    5b80:	0f be       	out	0x3f, r0	; 63
    5b82:	cd bf       	out	0x3d, r28	; 61
    5b84:	cf 91       	pop	r28
    5b86:	df 91       	pop	r29
    5b88:	08 95       	ret

00005b8a <LCD_vWriteSpecialChar>:
void LCD_vWriteSpecialChar(u8 *A_SpecialChar, u8 A_BlockNo, u8 A_u8Row, u8 A_u8Column)
{
    5b8a:	df 93       	push	r29
    5b8c:	cf 93       	push	r28
    5b8e:	cd b7       	in	r28, 0x3d	; 61
    5b90:	de b7       	in	r29, 0x3e	; 62
    5b92:	27 97       	sbiw	r28, 0x07	; 7
    5b94:	0f b6       	in	r0, 0x3f	; 63
    5b96:	f8 94       	cli
    5b98:	de bf       	out	0x3e, r29	; 62
    5b9a:	0f be       	out	0x3f, r0	; 63
    5b9c:	cd bf       	out	0x3d, r28	; 61
    5b9e:	9c 83       	std	Y+4, r25	; 0x04
    5ba0:	8b 83       	std	Y+3, r24	; 0x03
    5ba2:	6d 83       	std	Y+5, r22	; 0x05
    5ba4:	4e 83       	std	Y+6, r20	; 0x06
    5ba6:	2f 83       	std	Y+7, r18	; 0x07
    u8 L_u8CGRAMAdrress = 0;
    5ba8:	1a 82       	std	Y+2, r1	; 0x02
    /*Write Inside CGRAM*/
    /*Address = BLOCKNO * 8  ;*/
    /*Send Command (Address + 64) //64 0100 0000 */
    L_u8CGRAMAdrress = (A_BlockNo * 8) + CG_RAM_ADDRESS;
    5baa:	8d 81       	ldd	r24, Y+5	; 0x05
    5bac:	88 2f       	mov	r24, r24
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	08 96       	adiw	r24, 0x08	; 8
    5bb2:	88 0f       	add	r24, r24
    5bb4:	99 1f       	adc	r25, r25
    5bb6:	88 0f       	add	r24, r24
    5bb8:	99 1f       	adc	r25, r25
    5bba:	88 0f       	add	r24, r24
    5bbc:	99 1f       	adc	r25, r25
    5bbe:	8a 83       	std	Y+2, r24	; 0x02
    LCD_vWriteCommand(L_u8CGRAMAdrress);
    5bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc2:	0e 94 c4 29 	call	0x5388	; 0x5388 <LCD_vWriteCommand>
    /*LOOP on arary of special char*/
    for (u8 k = 0; k < 8; k++)
    5bc6:	19 82       	std	Y+1, r1	; 0x01
    5bc8:	0e c0       	rjmp	.+28     	; 0x5be6 <LCD_vWriteSpecialChar+0x5c>
    {
        LCD_vDisplayChar(A_SpecialChar[k]);
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	28 2f       	mov	r18, r24
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    5bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	e2 0f       	add	r30, r18
    5bd8:	f3 1f       	adc	r31, r19
    5bda:	80 81       	ld	r24, Z
    5bdc:	0e 94 9c 2b 	call	0x5738	; 0x5738 <LCD_vDisplayChar>
    /*Address = BLOCKNO * 8  ;*/
    /*Send Command (Address + 64) //64 0100 0000 */
    L_u8CGRAMAdrress = (A_BlockNo * 8) + CG_RAM_ADDRESS;
    LCD_vWriteCommand(L_u8CGRAMAdrress);
    /*LOOP on arary of special char*/
    for (u8 k = 0; k < 8; k++)
    5be0:	89 81       	ldd	r24, Y+1	; 0x01
    5be2:	8f 5f       	subi	r24, 0xFF	; 255
    5be4:	89 83       	std	Y+1, r24	; 0x01
    5be6:	89 81       	ldd	r24, Y+1	; 0x01
    5be8:	88 30       	cpi	r24, 0x08	; 8
    5bea:	78 f3       	brcs	.-34     	; 0x5bca <LCD_vWriteSpecialChar+0x40>
    {
        LCD_vDisplayChar(A_SpecialChar[k]);
    }

    /*Set Location To DDRAM*/
    LCD_vSetPostion(A_u8Row, A_u8Column);
    5bec:	8e 81       	ldd	r24, Y+6	; 0x06
    5bee:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf0:	0e 94 c6 2c 	call	0x598c	; 0x598c <LCD_vSetPostion>
    /*Send The location of Block to display */
    LCD_vDisplayChar(A_BlockNo);
    5bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    5bf6:	0e 94 9c 2b 	call	0x5738	; 0x5738 <LCD_vDisplayChar>
}
    5bfa:	27 96       	adiw	r28, 0x07	; 7
    5bfc:	0f b6       	in	r0, 0x3f	; 63
    5bfe:	f8 94       	cli
    5c00:	de bf       	out	0x3e, r29	; 62
    5c02:	0f be       	out	0x3f, r0	; 63
    5c04:	cd bf       	out	0x3d, r28	; 61
    5c06:	cf 91       	pop	r28
    5c08:	df 91       	pop	r29
    5c0a:	08 95       	ret

00005c0c <KP_vInit>:
#include "KEYPAD_pri.h"
#include "KEYPAD_cfg.h"
#include "KEYPAD_int.h"
#include <avr/delay.h>
void KP_vInit()
{
    5c0c:	df 93       	push	r29
    5c0e:	cf 93       	push	r28
    5c10:	cd b7       	in	r28, 0x3d	; 61
    5c12:	de b7       	in	r29, 0x3e	; 62
    5c14:	28 97       	sbiw	r28, 0x08	; 8
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	f8 94       	cli
    5c1a:	de bf       	out	0x3e, r29	; 62
    5c1c:	0f be       	out	0x3f, r0	; 63
    5c1e:	cd bf       	out	0x3d, r28	; 61
    // SET ROWS AS INPUTS
    for (u32 PIN = ROW_START_PIN; PIN <= ROW_END_PIN; PIN++)
    5c20:	84 e0       	ldi	r24, 0x04	; 4
    5c22:	90 e0       	ldi	r25, 0x00	; 0
    5c24:	a0 e0       	ldi	r26, 0x00	; 0
    5c26:	b0 e0       	ldi	r27, 0x00	; 0
    5c28:	8d 83       	std	Y+5, r24	; 0x05
    5c2a:	9e 83       	std	Y+6, r25	; 0x06
    5c2c:	af 83       	std	Y+7, r26	; 0x07
    5c2e:	b8 87       	std	Y+8, r27	; 0x08
    5c30:	17 c0       	rjmp	.+46     	; 0x5c60 <KP_vInit+0x54>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
    5c32:	9d 81       	ldd	r25, Y+5	; 0x05
    5c34:	83 e0       	ldi	r24, 0x03	; 3
    5c36:	69 2f       	mov	r22, r25
    5c38:	40 e0       	ldi	r20, 0x00	; 0
    5c3a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    5c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c40:	83 e0       	ldi	r24, 0x03	; 3
    5c42:	69 2f       	mov	r22, r25
    5c44:	41 e0       	ldi	r20, 0x01	; 1
    5c46:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
#include "KEYPAD_int.h"
#include <avr/delay.h>
void KP_vInit()
{
    // SET ROWS AS INPUTS
    for (u32 PIN = ROW_START_PIN; PIN <= ROW_END_PIN; PIN++)
    5c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c4e:	af 81       	ldd	r26, Y+7	; 0x07
    5c50:	b8 85       	ldd	r27, Y+8	; 0x08
    5c52:	01 96       	adiw	r24, 0x01	; 1
    5c54:	a1 1d       	adc	r26, r1
    5c56:	b1 1d       	adc	r27, r1
    5c58:	8d 83       	std	Y+5, r24	; 0x05
    5c5a:	9e 83       	std	Y+6, r25	; 0x06
    5c5c:	af 83       	std	Y+7, r26	; 0x07
    5c5e:	b8 87       	std	Y+8, r27	; 0x08
    5c60:	8d 81       	ldd	r24, Y+5	; 0x05
    5c62:	9e 81       	ldd	r25, Y+6	; 0x06
    5c64:	af 81       	ldd	r26, Y+7	; 0x07
    5c66:	b8 85       	ldd	r27, Y+8	; 0x08
    5c68:	88 30       	cpi	r24, 0x08	; 8
    5c6a:	91 05       	cpc	r25, r1
    5c6c:	a1 05       	cpc	r26, r1
    5c6e:	b1 05       	cpc	r27, r1
    5c70:	00 f3       	brcs	.-64     	; 0x5c32 <KP_vInit+0x26>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
    // SET COLUMS AS OUTPUTS
    for (u32 PIN = COLUMN_START_PIN; PIN <= COLUMN_END_PIN; PIN++)
    5c72:	19 82       	std	Y+1, r1	; 0x01
    5c74:	1a 82       	std	Y+2, r1	; 0x02
    5c76:	1b 82       	std	Y+3, r1	; 0x03
    5c78:	1c 82       	std	Y+4, r1	; 0x04
    5c7a:	17 c0       	rjmp	.+46     	; 0x5caa <KP_vInit+0x9e>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_OUTPUT);
    5c7c:	99 81       	ldd	r25, Y+1	; 0x01
    5c7e:	83 e0       	ldi	r24, 0x03	; 3
    5c80:	69 2f       	mov	r22, r25
    5c82:	41 e0       	ldi	r20, 0x01	; 1
    5c84:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <DIO_vSetPinDir>
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    5c88:	99 81       	ldd	r25, Y+1	; 0x01
    5c8a:	83 e0       	ldi	r24, 0x03	; 3
    5c8c:	69 2f       	mov	r22, r25
    5c8e:	41 e0       	ldi	r20, 0x01	; 1
    5c90:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_INPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
    // SET COLUMS AS OUTPUTS
    for (u32 PIN = COLUMN_START_PIN; PIN <= COLUMN_END_PIN; PIN++)
    5c94:	89 81       	ldd	r24, Y+1	; 0x01
    5c96:	9a 81       	ldd	r25, Y+2	; 0x02
    5c98:	ab 81       	ldd	r26, Y+3	; 0x03
    5c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    5c9c:	01 96       	adiw	r24, 0x01	; 1
    5c9e:	a1 1d       	adc	r26, r1
    5ca0:	b1 1d       	adc	r27, r1
    5ca2:	89 83       	std	Y+1, r24	; 0x01
    5ca4:	9a 83       	std	Y+2, r25	; 0x02
    5ca6:	ab 83       	std	Y+3, r26	; 0x03
    5ca8:	bc 83       	std	Y+4, r27	; 0x04
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	ab 81       	ldd	r26, Y+3	; 0x03
    5cb0:	bc 81       	ldd	r27, Y+4	; 0x04
    5cb2:	84 30       	cpi	r24, 0x04	; 4
    5cb4:	91 05       	cpc	r25, r1
    5cb6:	a1 05       	cpc	r26, r1
    5cb8:	b1 05       	cpc	r27, r1
    5cba:	00 f3       	brcs	.-64     	; 0x5c7c <KP_vInit+0x70>
    {
        DIO_vSetPinDir(KEYPAD_PORT, PIN, DIR_OUTPUT);
        DIO_vSetPinVal(KEYPAD_PORT, PIN, HIGH);
    }
}
    5cbc:	28 96       	adiw	r28, 0x08	; 8
    5cbe:	0f b6       	in	r0, 0x3f	; 63
    5cc0:	f8 94       	cli
    5cc2:	de bf       	out	0x3e, r29	; 62
    5cc4:	0f be       	out	0x3f, r0	; 63
    5cc6:	cd bf       	out	0x3d, r28	; 61
    5cc8:	cf 91       	pop	r28
    5cca:	df 91       	pop	r29
    5ccc:	08 95       	ret

00005cce <KP_u8ReadKP>:
u8 KP_u8ReadKP()
{
    5cce:	df 93       	push	r29
    5cd0:	cf 93       	push	r28
    5cd2:	cd b7       	in	r28, 0x3d	; 61
    5cd4:	de b7       	in	r29, 0x3e	; 62
    5cd6:	a0 97       	sbiw	r28, 0x20	; 32
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	f8 94       	cli
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	cd bf       	out	0x3d, r28	; 61
    u32 L_u8SaveRow = -1, L_u8SaveColumn = -1;
    5ce2:	8f ef       	ldi	r24, 0xFF	; 255
    5ce4:	9f ef       	ldi	r25, 0xFF	; 255
    5ce6:	af ef       	ldi	r26, 0xFF	; 255
    5ce8:	bf ef       	ldi	r27, 0xFF	; 255
    5cea:	8d 8f       	std	Y+29, r24	; 0x1d
    5cec:	9e 8f       	std	Y+30, r25	; 0x1e
    5cee:	af 8f       	std	Y+31, r26	; 0x1f
    5cf0:	b8 a3       	std	Y+32, r27	; 0x20
    5cf2:	8f ef       	ldi	r24, 0xFF	; 255
    5cf4:	9f ef       	ldi	r25, 0xFF	; 255
    5cf6:	af ef       	ldi	r26, 0xFF	; 255
    5cf8:	bf ef       	ldi	r27, 0xFF	; 255
    5cfa:	89 8f       	std	Y+25, r24	; 0x19
    5cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    5cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    5d00:	bc 8f       	std	Y+28, r27	; 0x1c
    u8 L_u8Value, L_u8Flag = 1;
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	8f 8b       	std	Y+23, r24	; 0x17
        {{'7', '8', '9', '-'},
         {'4', '5', '6', '+'},
         {'1', '2', '3', '*'},
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    5d06:	1b 8a       	std	Y+19, r1	; 0x13
    5d08:	1c 8a       	std	Y+20, r1	; 0x14
    5d0a:	1d 8a       	std	Y+21, r1	; 0x15
    5d0c:	1e 8a       	std	Y+22, r1	; 0x16
    5d0e:	cb c0       	rjmp	.+406    	; 0x5ea6 <KP_u8ReadKP+0x1d8>
    {
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, LOW);
    5d10:	9b 89       	ldd	r25, Y+19	; 0x13
    5d12:	83 e0       	ldi	r24, 0x03	; 3
    5d14:	69 2f       	mov	r22, r25
    5d16:	40 e0       	ldi	r20, 0x00	; 0
    5d18:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        for (u32 r = 0; r < 4; r++)
    5d1c:	1f 86       	std	Y+15, r1	; 0x0f
    5d1e:	18 8a       	std	Y+16, r1	; 0x10
    5d20:	19 8a       	std	Y+17, r1	; 0x11
    5d22:	1a 8a       	std	Y+18, r1	; 0x12
    5d24:	a2 c0       	rjmp	.+324    	; 0x5e6a <KP_u8ReadKP+0x19c>
        {
            if (DIO_u8GetPinVal(KEYPAD_PORT, ROW_START_PIN + r) == 0)
    5d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d28:	98 2f       	mov	r25, r24
    5d2a:	9c 5f       	subi	r25, 0xFC	; 252
    5d2c:	83 e0       	ldi	r24, 0x03	; 3
    5d2e:	69 2f       	mov	r22, r25
    5d30:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    5d34:	88 23       	and	r24, r24
    5d36:	09 f0       	breq	.+2      	; 0x5d3a <KP_u8ReadKP+0x6c>
    5d38:	8d c0       	rjmp	.+282    	; 0x5e54 <KP_u8ReadKP+0x186>
            {
                while (DIO_u8GetPinVal(KEYPAD_PORT, ROW_START_PIN + r) == 0)
    5d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d3c:	98 2f       	mov	r25, r24
    5d3e:	9c 5f       	subi	r25, 0xFC	; 252
    5d40:	83 e0       	ldi	r24, 0x03	; 3
    5d42:	69 2f       	mov	r22, r25
    5d44:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <DIO_u8GetPinVal>
    5d48:	88 23       	and	r24, r24
    5d4a:	b9 f3       	breq	.-18     	; 0x5d3a <KP_u8ReadKP+0x6c>
                    ;
                L_u8SaveRow = r;
    5d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d4e:	98 89       	ldd	r25, Y+16	; 0x10
    5d50:	a9 89       	ldd	r26, Y+17	; 0x11
    5d52:	ba 89       	ldd	r27, Y+18	; 0x12
    5d54:	8d 8f       	std	Y+29, r24	; 0x1d
    5d56:	9e 8f       	std	Y+30, r25	; 0x1e
    5d58:	af 8f       	std	Y+31, r26	; 0x1f
    5d5a:	b8 a3       	std	Y+32, r27	; 0x20
                L_u8SaveColumn = c;
    5d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    5d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    5d60:	ad 89       	ldd	r26, Y+21	; 0x15
    5d62:	be 89       	ldd	r27, Y+22	; 0x16
    5d64:	89 8f       	std	Y+25, r24	; 0x19
    5d66:	9a 8f       	std	Y+26, r25	; 0x1a
    5d68:	ab 8f       	std	Y+27, r26	; 0x1b
    5d6a:	bc 8f       	std	Y+28, r27	; 0x1c
                L_u8Flag = 0;
    5d6c:	1f 8a       	std	Y+23, r1	; 0x17
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	a0 e7       	ldi	r26, 0x70	; 112
    5d74:	b1 e4       	ldi	r27, 0x41	; 65
    5d76:	8b 87       	std	Y+11, r24	; 0x0b
    5d78:	9c 87       	std	Y+12, r25	; 0x0c
    5d7a:	ad 87       	std	Y+13, r26	; 0x0d
    5d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	30 e0       	ldi	r19, 0x00	; 0
    5d8a:	4a ef       	ldi	r20, 0xFA	; 250
    5d8c:	54 e4       	ldi	r21, 0x44	; 68
    5d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d92:	dc 01       	movw	r26, r24
    5d94:	cb 01       	movw	r24, r22
    5d96:	8f 83       	std	Y+7, r24	; 0x07
    5d98:	98 87       	std	Y+8, r25	; 0x08
    5d9a:	a9 87       	std	Y+9, r26	; 0x09
    5d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    5da0:	78 85       	ldd	r23, Y+8	; 0x08
    5da2:	89 85       	ldd	r24, Y+9	; 0x09
    5da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5da6:	20 e0       	ldi	r18, 0x00	; 0
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	40 e8       	ldi	r20, 0x80	; 128
    5dac:	5f e3       	ldi	r21, 0x3F	; 63
    5dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5db2:	88 23       	and	r24, r24
    5db4:	2c f4       	brge	.+10     	; 0x5dc0 <KP_u8ReadKP+0xf2>
		__ticks = 1;
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	9e 83       	std	Y+6, r25	; 0x06
    5dbc:	8d 83       	std	Y+5, r24	; 0x05
    5dbe:	3f c0       	rjmp	.+126    	; 0x5e3e <KP_u8ReadKP+0x170>
	else if (__tmp > 65535)
    5dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    5dc2:	78 85       	ldd	r23, Y+8	; 0x08
    5dc4:	89 85       	ldd	r24, Y+9	; 0x09
    5dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dc8:	20 e0       	ldi	r18, 0x00	; 0
    5dca:	3f ef       	ldi	r19, 0xFF	; 255
    5dcc:	4f e7       	ldi	r20, 0x7F	; 127
    5dce:	57 e4       	ldi	r21, 0x47	; 71
    5dd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5dd4:	18 16       	cp	r1, r24
    5dd6:	4c f5       	brge	.+82     	; 0x5e2a <KP_u8ReadKP+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    5de0:	20 e0       	ldi	r18, 0x00	; 0
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	40 e2       	ldi	r20, 0x20	; 32
    5de6:	51 e4       	ldi	r21, 0x41	; 65
    5de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dec:	dc 01       	movw	r26, r24
    5dee:	cb 01       	movw	r24, r22
    5df0:	bc 01       	movw	r22, r24
    5df2:	cd 01       	movw	r24, r26
    5df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	9e 83       	std	Y+6, r25	; 0x06
    5dfe:	8d 83       	std	Y+5, r24	; 0x05
    5e00:	0f c0       	rjmp	.+30     	; 0x5e20 <KP_u8ReadKP+0x152>
    5e02:	88 ec       	ldi	r24, 0xC8	; 200
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	9c 83       	std	Y+4, r25	; 0x04
    5e08:	8b 83       	std	Y+3, r24	; 0x03
    5e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e0e:	01 97       	sbiw	r24, 0x01	; 1
    5e10:	f1 f7       	brne	.-4      	; 0x5e0e <KP_u8ReadKP+0x140>
    5e12:	9c 83       	std	Y+4, r25	; 0x04
    5e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e16:	8d 81       	ldd	r24, Y+5	; 0x05
    5e18:	9e 81       	ldd	r25, Y+6	; 0x06
    5e1a:	01 97       	sbiw	r24, 0x01	; 1
    5e1c:	9e 83       	std	Y+6, r25	; 0x06
    5e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e20:	8d 81       	ldd	r24, Y+5	; 0x05
    5e22:	9e 81       	ldd	r25, Y+6	; 0x06
    5e24:	00 97       	sbiw	r24, 0x00	; 0
    5e26:	69 f7       	brne	.-38     	; 0x5e02 <KP_u8ReadKP+0x134>
    5e28:	2a c0       	rjmp	.+84     	; 0x5e7e <KP_u8ReadKP+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e2c:	78 85       	ldd	r23, Y+8	; 0x08
    5e2e:	89 85       	ldd	r24, Y+9	; 0x09
    5e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e36:	dc 01       	movw	r26, r24
    5e38:	cb 01       	movw	r24, r22
    5e3a:	9e 83       	std	Y+6, r25	; 0x06
    5e3c:	8d 83       	std	Y+5, r24	; 0x05
    5e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e40:	9e 81       	ldd	r25, Y+6	; 0x06
    5e42:	9a 83       	std	Y+2, r25	; 0x02
    5e44:	89 83       	std	Y+1, r24	; 0x01
    5e46:	89 81       	ldd	r24, Y+1	; 0x01
    5e48:	9a 81       	ldd	r25, Y+2	; 0x02
    5e4a:	01 97       	sbiw	r24, 0x01	; 1
    5e4c:	f1 f7       	brne	.-4      	; 0x5e4a <KP_u8ReadKP+0x17c>
    5e4e:	9a 83       	std	Y+2, r25	; 0x02
    5e50:	89 83       	std	Y+1, r24	; 0x01
    5e52:	15 c0       	rjmp	.+42     	; 0x5e7e <KP_u8ReadKP+0x1b0>
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    {
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, LOW);
        for (u32 r = 0; r < 4; r++)
    5e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e56:	98 89       	ldd	r25, Y+16	; 0x10
    5e58:	a9 89       	ldd	r26, Y+17	; 0x11
    5e5a:	ba 89       	ldd	r27, Y+18	; 0x12
    5e5c:	01 96       	adiw	r24, 0x01	; 1
    5e5e:	a1 1d       	adc	r26, r1
    5e60:	b1 1d       	adc	r27, r1
    5e62:	8f 87       	std	Y+15, r24	; 0x0f
    5e64:	98 8b       	std	Y+16, r25	; 0x10
    5e66:	a9 8b       	std	Y+17, r26	; 0x11
    5e68:	ba 8b       	std	Y+18, r27	; 0x12
    5e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e6c:	98 89       	ldd	r25, Y+16	; 0x10
    5e6e:	a9 89       	ldd	r26, Y+17	; 0x11
    5e70:	ba 89       	ldd	r27, Y+18	; 0x12
    5e72:	84 30       	cpi	r24, 0x04	; 4
    5e74:	91 05       	cpc	r25, r1
    5e76:	a1 05       	cpc	r26, r1
    5e78:	b1 05       	cpc	r27, r1
    5e7a:	08 f4       	brcc	.+2      	; 0x5e7e <KP_u8ReadKP+0x1b0>
    5e7c:	54 cf       	rjmp	.-344    	; 0x5d26 <KP_u8ReadKP+0x58>
                L_u8Flag = 0;
                _delay_ms(15);
                break;
            }
        }
        DIO_vSetPinVal(KEYPAD_PORT, COLUMN_START_PIN + c, HIGH);
    5e7e:	9b 89       	ldd	r25, Y+19	; 0x13
    5e80:	83 e0       	ldi	r24, 0x03	; 3
    5e82:	69 2f       	mov	r22, r25
    5e84:	41 e0       	ldi	r20, 0x01	; 1
    5e86:	0e 94 9b 10 	call	0x2136	; 0x2136 <DIO_vSetPinVal>
        if (L_u8Flag == 0)
    5e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    5e8c:	88 23       	and	r24, r24
    5e8e:	a9 f0       	breq	.+42     	; 0x5eba <KP_u8ReadKP+0x1ec>
        {{'7', '8', '9', '-'},
         {'4', '5', '6', '+'},
         {'1', '2', '3', '*'},
         {'0', 'c', '=', '/'}};

    for (u32 c = 0; c < 4; c++)
    5e90:	8b 89       	ldd	r24, Y+19	; 0x13
    5e92:	9c 89       	ldd	r25, Y+20	; 0x14
    5e94:	ad 89       	ldd	r26, Y+21	; 0x15
    5e96:	be 89       	ldd	r27, Y+22	; 0x16
    5e98:	01 96       	adiw	r24, 0x01	; 1
    5e9a:	a1 1d       	adc	r26, r1
    5e9c:	b1 1d       	adc	r27, r1
    5e9e:	8b 8b       	std	Y+19, r24	; 0x13
    5ea0:	9c 8b       	std	Y+20, r25	; 0x14
    5ea2:	ad 8b       	std	Y+21, r26	; 0x15
    5ea4:	be 8b       	std	Y+22, r27	; 0x16
    5ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    5ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    5eaa:	ad 89       	ldd	r26, Y+21	; 0x15
    5eac:	be 89       	ldd	r27, Y+22	; 0x16
    5eae:	84 30       	cpi	r24, 0x04	; 4
    5eb0:	91 05       	cpc	r25, r1
    5eb2:	a1 05       	cpc	r26, r1
    5eb4:	b1 05       	cpc	r27, r1
    5eb6:	08 f4       	brcc	.+2      	; 0x5eba <KP_u8ReadKP+0x1ec>
    5eb8:	2b cf       	rjmp	.-426    	; 0x5d10 <KP_u8ReadKP+0x42>
        {
            break;
        }
    }

    if (L_u8SaveRow == -1 && L_u8SaveColumn == -1)
    5eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ebc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ebe:	af 8d       	ldd	r26, Y+31	; 0x1f
    5ec0:	b8 a1       	ldd	r27, Y+32	; 0x20
    5ec2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ec4:	2f ef       	ldi	r18, 0xFF	; 255
    5ec6:	92 07       	cpc	r25, r18
    5ec8:	2f ef       	ldi	r18, 0xFF	; 255
    5eca:	a2 07       	cpc	r26, r18
    5ecc:	2f ef       	ldi	r18, 0xFF	; 255
    5ece:	b2 07       	cpc	r27, r18
    5ed0:	79 f4       	brne	.+30     	; 0x5ef0 <KP_u8ReadKP+0x222>
    5ed2:	89 8d       	ldd	r24, Y+25	; 0x19
    5ed4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ed6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5ed8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5eda:	8f 3f       	cpi	r24, 0xFF	; 255
    5edc:	2f ef       	ldi	r18, 0xFF	; 255
    5ede:	92 07       	cpc	r25, r18
    5ee0:	2f ef       	ldi	r18, 0xFF	; 255
    5ee2:	a2 07       	cpc	r26, r18
    5ee4:	2f ef       	ldi	r18, 0xFF	; 255
    5ee6:	b2 07       	cpc	r27, r18
    5ee8:	19 f4       	brne	.+6      	; 0x5ef0 <KP_u8ReadKP+0x222>
    {
        L_u8Value = NOT_PRESSED;
    5eea:	81 e4       	ldi	r24, 0x41	; 65
    5eec:	88 8f       	std	Y+24, r24	; 0x18
    5eee:	13 c0       	rjmp	.+38     	; 0x5f16 <KP_u8ReadKP+0x248>
    }
    else
    {
        L_u8Value = L_u8KeyPad[L_u8SaveRow][L_u8SaveColumn];
    5ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ef4:	af 8d       	ldd	r26, Y+31	; 0x1f
    5ef6:	b8 a1       	ldd	r27, Y+32	; 0x20
    5ef8:	29 8d       	ldd	r18, Y+25	; 0x19
    5efa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5efc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5efe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5f00:	88 0f       	add	r24, r24
    5f02:	99 1f       	adc	r25, r25
    5f04:	88 0f       	add	r24, r24
    5f06:	99 1f       	adc	r25, r25
    5f08:	82 0f       	add	r24, r18
    5f0a:	93 1f       	adc	r25, r19
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	e3 53       	subi	r30, 0x33	; 51
    5f10:	fe 4f       	sbci	r31, 0xFE	; 254
    5f12:	80 81       	ld	r24, Z
    5f14:	88 8f       	std	Y+24, r24	; 0x18
    }

    return L_u8Value;
    5f16:	88 8d       	ldd	r24, Y+24	; 0x18
}
    5f18:	a0 96       	adiw	r28, 0x20	; 32
    5f1a:	0f b6       	in	r0, 0x3f	; 63
    5f1c:	f8 94       	cli
    5f1e:	de bf       	out	0x3e, r29	; 62
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	cd bf       	out	0x3d, r28	; 61
    5f24:	cf 91       	pop	r28
    5f26:	df 91       	pop	r29
    5f28:	08 95       	ret

00005f2a <DCM_vInit>:
#include "DCM_cfg.h"
#include "DCM_int.h"
#include "../TRANSISTORS/TRANSISTORS_int.h"

DCM_vInit()
{
    5f2a:	df 93       	push	r29
    5f2c:	cf 93       	push	r28
    5f2e:	cd b7       	in	r28, 0x3d	; 61
    5f30:	de b7       	in	r29, 0x3e	; 62
    TRANSISTOR_vInit(TRANS1);
    5f32:	81 e0       	ldi	r24, 0x01	; 1
    5f34:	0e 94 1b 14 	call	0x2836	; 0x2836 <TRANSISTOR_vInit>
    TRANSISTOR_vInit(TRANS2);
    5f38:	82 e0       	ldi	r24, 0x02	; 2
    5f3a:	0e 94 1b 14 	call	0x2836	; 0x2836 <TRANSISTOR_vInit>
}
    5f3e:	cf 91       	pop	r28
    5f40:	df 91       	pop	r29
    5f42:	08 95       	ret

00005f44 <DCM_vSetDirection>:
DCM_vSetDirection(u8 A_u8Direction)
{
    5f44:	df 93       	push	r29
    5f46:	cf 93       	push	r28
    5f48:	00 d0       	rcall	.+0      	; 0x5f4a <DCM_vSetDirection+0x6>
    5f4a:	0f 92       	push	r0
    5f4c:	cd b7       	in	r28, 0x3d	; 61
    5f4e:	de b7       	in	r29, 0x3e	; 62
    5f50:	89 83       	std	Y+1, r24	; 0x01
    switch (A_u8Direction)
    5f52:	89 81       	ldd	r24, Y+1	; 0x01
    5f54:	28 2f       	mov	r18, r24
    5f56:	30 e0       	ldi	r19, 0x00	; 0
    5f58:	3b 83       	std	Y+3, r19	; 0x03
    5f5a:	2a 83       	std	Y+2, r18	; 0x02
    5f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f60:	81 30       	cpi	r24, 0x01	; 1
    5f62:	91 05       	cpc	r25, r1
    5f64:	81 f0       	breq	.+32     	; 0x5f86 <DCM_vSetDirection+0x42>
    5f66:	2a 81       	ldd	r18, Y+2	; 0x02
    5f68:	3b 81       	ldd	r19, Y+3	; 0x03
    5f6a:	22 30       	cpi	r18, 0x02	; 2
    5f6c:	31 05       	cpc	r19, r1
    5f6e:	91 f0       	breq	.+36     	; 0x5f94 <DCM_vSetDirection+0x50>
    5f70:	8a 81       	ldd	r24, Y+2	; 0x02
    5f72:	9b 81       	ldd	r25, Y+3	; 0x03
    5f74:	00 97       	sbiw	r24, 0x00	; 0
    5f76:	a1 f4       	brne	.+40     	; 0x5fa0 <DCM_vSetDirection+0x5c>
    {
    case CLOCKWISE:
        TRANSISTOR_vTurnOn(TRANS1);
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TRANSISTOR_vTurnOn>
        TRANSISTOR_vTurnOff(TRANS2);
    5f7e:	82 e0       	ldi	r24, 0x02	; 2
    5f80:	0e 94 a1 14 	call	0x2942	; 0x2942 <TRANSISTOR_vTurnOff>
    5f84:	0d c0       	rjmp	.+26     	; 0x5fa0 <DCM_vSetDirection+0x5c>

        break;
    case ANTI_CLOCKWISE:
        TRANSISTOR_vTurnOff(TRANS1);
    5f86:	81 e0       	ldi	r24, 0x01	; 1
    5f88:	0e 94 a1 14 	call	0x2942	; 0x2942 <TRANSISTOR_vTurnOff>
        TRANSISTOR_vTurnOn(TRANS2);
    5f8c:	82 e0       	ldi	r24, 0x02	; 2
    5f8e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <TRANSISTOR_vTurnOn>
    5f92:	06 c0       	rjmp	.+12     	; 0x5fa0 <DCM_vSetDirection+0x5c>
        break;
    case STOP:
        TRANSISTOR_vTurnOff(TRANS1);
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	0e 94 a1 14 	call	0x2942	; 0x2942 <TRANSISTOR_vTurnOff>
        TRANSISTOR_vTurnOff(TRANS2);
    5f9a:	82 e0       	ldi	r24, 0x02	; 2
    5f9c:	0e 94 a1 14 	call	0x2942	; 0x2942 <TRANSISTOR_vTurnOff>
        break;
    default:
        break;
    }
}
    5fa0:	0f 90       	pop	r0
    5fa2:	0f 90       	pop	r0
    5fa4:	0f 90       	pop	r0
    5fa6:	cf 91       	pop	r28
    5fa8:	df 91       	pop	r29
    5faa:	08 95       	ret

00005fac <main>:
#include "../HAL/LCD/LCD_int.h"
#include <avr/delay.h>

void ReceiveData(u8 data);
int main()
{
    5fac:	df 93       	push	r29
    5fae:	cf 93       	push	r28
    5fb0:	cd b7       	in	r28, 0x3d	; 61
    5fb2:	de b7       	in	r29, 0x3e	; 62
	SPI_vMasterInit();
    5fb4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <SPI_vMasterInit>
	SPI_u8Traceiver('A');
    5fb8:	81 e4       	ldi	r24, 0x41	; 65
    5fba:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <SPI_u8Traceiver>
	LCD_vInit();
    5fbe:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_vInit>
    5fc2:	ff cf       	rjmp	.-2      	; 0x5fc2 <main+0x16>

00005fc4 <mainICU>:
volatile u16 G_u16Cov = 0;
void ICU_HW();
void TIM1_OVF();

int mainICU()
{
    5fc4:	ef 92       	push	r14
    5fc6:	ff 92       	push	r15
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	df 93       	push	r29
    5fce:	cf 93       	push	r28
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
	/* INIT LCD */
	LCD_vInit();
    5fd4:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <LCD_vInit>
	LCD_vDisplayString("Start");
    5fd8:	86 e6       	ldi	r24, 0x66	; 102
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>

	/* Enable Global Interrupt */
	GIE_vSetGlobalInterrupt();
    5fe0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <GIE_vSetGlobalInterrupt>
	/* SWT PWM to 25 Duty Cycle This Sets OCR0 to 64 */
	TIMER_vPWMSignal(TIMER0, 35);
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	40 e0       	ldi	r20, 0x00	; 0
    5fe8:	50 e0       	ldi	r21, 0x00	; 0
    5fea:	6c e0       	ldi	r22, 0x0C	; 12
    5fec:	72 e4       	ldi	r23, 0x42	; 66
    5fee:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <TIMER_vPWMSignal>
	/* Init Timer 0 */
	TIMER_vInit(TIMER0);
    5ff2:	80 e0       	ldi	r24, 0x00	; 0
    5ff4:	0e 94 1b 09 	call	0x1236	; 0x1236 <TIMER_vInit>
	/* ******************************* */

	/* Enanle ICU TIMER 1 */
	TIMER_vsetCallBackFunctionIcuTIMER1(&ICU_HW);
    5ff8:	82 e7       	ldi	r24, 0x72	; 114
    5ffa:	90 e3       	ldi	r25, 0x30	; 48
    5ffc:	0e 94 05 0b 	call	0x160a	; 0x160a <TIMER_vsetCallBackFunctionIcuTIMER1>
	TIMER_vsetCallBackFunctionOvfTIMER1(&TIM1_OVF);
    6000:	87 e1       	ldi	r24, 0x17	; 23
    6002:	91 e3       	ldi	r25, 0x31	; 49
    6004:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <TIMER_vsetCallBackFunctionOvfTIMER1>
	TIMER_vCongfigureICU();
    6008:	0e 94 17 0b 	call	0x162e	; 0x162e <TIMER_vCongfigureICU>
	TIMER_vSetTriggeringICU(RISING);
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TIMER_vSetTriggeringICU>

	while (1)
	{
		if (Flag == 1)
    6012:	80 91 1e 02 	lds	r24, 0x021E
    6016:	81 30       	cpi	r24, 0x01	; 1
    6018:	e1 f7       	brne	.-8      	; 0x6012 <mainICU+0x4e>
		{
			DutyCycle = (TimeOn * 1.0 / PeriodTime) * 100;
    601a:	80 91 23 02 	lds	r24, 0x0223
    601e:	90 91 24 02 	lds	r25, 0x0224
    6022:	cc 01       	movw	r24, r24
    6024:	a0 e0       	ldi	r26, 0x00	; 0
    6026:	b0 e0       	ldi	r27, 0x00	; 0
    6028:	bc 01       	movw	r22, r24
    602a:	cd 01       	movw	r24, r26
    602c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    6030:	7b 01       	movw	r14, r22
    6032:	8c 01       	movw	r16, r24
    6034:	80 91 1f 02 	lds	r24, 0x021F
    6038:	90 91 20 02 	lds	r25, 0x0220
    603c:	cc 01       	movw	r24, r24
    603e:	a0 e0       	ldi	r26, 0x00	; 0
    6040:	b0 e0       	ldi	r27, 0x00	; 0
    6042:	bc 01       	movw	r22, r24
    6044:	cd 01       	movw	r24, r26
    6046:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    604a:	9b 01       	movw	r18, r22
    604c:	ac 01       	movw	r20, r24
    604e:	c8 01       	movw	r24, r16
    6050:	b7 01       	movw	r22, r14
    6052:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6056:	dc 01       	movw	r26, r24
    6058:	cb 01       	movw	r24, r22
    605a:	bc 01       	movw	r22, r24
    605c:	cd 01       	movw	r24, r26
    605e:	20 e0       	ldi	r18, 0x00	; 0
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	48 ec       	ldi	r20, 0xC8	; 200
    6064:	52 e4       	ldi	r21, 0x42	; 66
    6066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    606a:	dc 01       	movw	r26, r24
    606c:	cb 01       	movw	r24, r22
    606e:	bc 01       	movw	r22, r24
    6070:	cd 01       	movw	r24, r26
    6072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	90 93 22 02 	sts	0x0222, r25
    607e:	80 93 21 02 	sts	0x0221, r24
			LCD_vSetPostion(ROW0, COLUMN0);
    6082:	80 e0       	ldi	r24, 0x00	; 0
    6084:	60 e0       	ldi	r22, 0x00	; 0
    6086:	0e 94 c6 2c 	call	0x598c	; 0x598c <LCD_vSetPostion>
			LCD_vDisplayString("TimePeriod:");
    608a:	8c e6       	ldi	r24, 0x6C	; 108
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
			LCD_vDisplayNumInteger(PeriodTime);
    6092:	80 91 1f 02 	lds	r24, 0x021F
    6096:	90 91 20 02 	lds	r25, 0x0220
    609a:	cc 01       	movw	r24, r24
    609c:	a0 e0       	ldi	r26, 0x00	; 0
    609e:	b0 e0       	ldi	r27, 0x00	; 0
    60a0:	bc 01       	movw	r22, r24
    60a2:	cd 01       	movw	r24, r26
    60a4:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_vDisplayNumInteger>
			LCD_vDisplayString("us");
    60a8:	88 e7       	ldi	r24, 0x78	; 120
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
			LCD_vSetPostion(ROW1, COLUMN0);
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	60 e0       	ldi	r22, 0x00	; 0
    60b4:	0e 94 c6 2c 	call	0x598c	; 0x598c <LCD_vSetPostion>
			LCD_vDisplayString("DutyCycle : ");
    60b8:	8b e7       	ldi	r24, 0x7B	; 123
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
			LCD_vDisplayNumInteger(DutyCycle);
    60c0:	80 91 21 02 	lds	r24, 0x0221
    60c4:	90 91 22 02 	lds	r25, 0x0222
    60c8:	cc 01       	movw	r24, r24
    60ca:	a0 e0       	ldi	r26, 0x00	; 0
    60cc:	b0 e0       	ldi	r27, 0x00	; 0
    60ce:	bc 01       	movw	r22, r24
    60d0:	cd 01       	movw	r24, r26
    60d2:	0e 94 be 2b 	call	0x577c	; 0x577c <LCD_vDisplayNumInteger>
			LCD_vDisplayString("%");
    60d6:	88 e8       	ldi	r24, 0x88	; 136
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	0e 94 e6 29 	call	0x53cc	; 0x53cc <LCD_vDisplayString>
			Flag = 0;
    60de:	10 92 1e 02 	sts	0x021E, r1
    60e2:	97 cf       	rjmp	.-210    	; 0x6012 <mainICU+0x4e>

000060e4 <ICU_HW>:
		}
	}
	return 0;
}
void ICU_HW(void)
{
    60e4:	df 93       	push	r29
    60e6:	cf 93       	push	r28
    60e8:	cd b7       	in	r28, 0x3d	; 61
    60ea:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0;
	counter++;
    60ec:	80 91 27 02 	lds	r24, 0x0227
    60f0:	8f 5f       	subi	r24, 0xFF	; 255
    60f2:	80 93 27 02 	sts	0x0227, r24
	if (counter == 2)
    60f6:	80 91 27 02 	lds	r24, 0x0227
    60fa:	82 30       	cpi	r24, 0x02	; 2
    60fc:	e1 f4       	brne	.+56     	; 0x6136 <ICU_HW+0x52>
	{
		G_u32Counts_Read1 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    60fe:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <TIMER_u16GetICU>
    6102:	9c 01       	movw	r18, r24
    6104:	40 e0       	ldi	r20, 0x00	; 0
    6106:	50 e0       	ldi	r21, 0x00	; 0
    6108:	80 91 25 02 	lds	r24, 0x0225
    610c:	90 91 26 02 	lds	r25, 0x0226
    6110:	cc 01       	movw	r24, r24
    6112:	a0 e0       	ldi	r26, 0x00	; 0
    6114:	b0 e0       	ldi	r27, 0x00	; 0
    6116:	dc 01       	movw	r26, r24
    6118:	99 27       	eor	r25, r25
    611a:	88 27       	eor	r24, r24
    611c:	82 0f       	add	r24, r18
    611e:	93 1f       	adc	r25, r19
    6120:	a4 1f       	adc	r26, r20
    6122:	b5 1f       	adc	r27, r21
    6124:	80 93 12 02 	sts	0x0212, r24
    6128:	90 93 13 02 	sts	0x0213, r25
    612c:	a0 93 14 02 	sts	0x0214, r26
    6130:	b0 93 15 02 	sts	0x0215, r27
    6134:	79 c0       	rjmp	.+242    	; 0x6228 <ICU_HW+0x144>
	}
	else if (counter == 3)
    6136:	80 91 27 02 	lds	r24, 0x0227
    613a:	83 30       	cpi	r24, 0x03	; 3
    613c:	c1 f5       	brne	.+112    	; 0x61ae <ICU_HW+0xca>
	{
		G_u32Counts_Read2 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    613e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <TIMER_u16GetICU>
    6142:	9c 01       	movw	r18, r24
    6144:	40 e0       	ldi	r20, 0x00	; 0
    6146:	50 e0       	ldi	r21, 0x00	; 0
    6148:	80 91 25 02 	lds	r24, 0x0225
    614c:	90 91 26 02 	lds	r25, 0x0226
    6150:	cc 01       	movw	r24, r24
    6152:	a0 e0       	ldi	r26, 0x00	; 0
    6154:	b0 e0       	ldi	r27, 0x00	; 0
    6156:	dc 01       	movw	r26, r24
    6158:	99 27       	eor	r25, r25
    615a:	88 27       	eor	r24, r24
    615c:	82 0f       	add	r24, r18
    615e:	93 1f       	adc	r25, r19
    6160:	a4 1f       	adc	r26, r20
    6162:	b5 1f       	adc	r27, r21
    6164:	80 93 16 02 	sts	0x0216, r24
    6168:	90 93 17 02 	sts	0x0217, r25
    616c:	a0 93 18 02 	sts	0x0218, r26
    6170:	b0 93 19 02 	sts	0x0219, r27
		PeriodTime = G_u32Counts_Read2 - G_u32Counts_Read1;
    6174:	80 91 16 02 	lds	r24, 0x0216
    6178:	90 91 17 02 	lds	r25, 0x0217
    617c:	a0 91 18 02 	lds	r26, 0x0218
    6180:	b0 91 19 02 	lds	r27, 0x0219
    6184:	9c 01       	movw	r18, r24
    6186:	80 91 12 02 	lds	r24, 0x0212
    618a:	90 91 13 02 	lds	r25, 0x0213
    618e:	a0 91 14 02 	lds	r26, 0x0214
    6192:	b0 91 15 02 	lds	r27, 0x0215
    6196:	a9 01       	movw	r20, r18
    6198:	48 1b       	sub	r20, r24
    619a:	59 0b       	sbc	r21, r25
    619c:	ca 01       	movw	r24, r20
    619e:	90 93 20 02 	sts	0x0220, r25
    61a2:	80 93 1f 02 	sts	0x021F, r24
		/* SET TRTIGGER TO Falling EDGE */
		TIMER_vSetTriggeringICU(FALLING);
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TIMER_vSetTriggeringICU>
    61ac:	3d c0       	rjmp	.+122    	; 0x6228 <ICU_HW+0x144>
	}
	else if (counter == 4)
    61ae:	80 91 27 02 	lds	r24, 0x0227
    61b2:	84 30       	cpi	r24, 0x04	; 4
    61b4:	c9 f5       	brne	.+114    	; 0x6228 <ICU_HW+0x144>
	{
		G_u32Counts_Read3 = TIMER_u16GetICU() + (G_u16Cov * 65536);
    61b6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <TIMER_u16GetICU>
    61ba:	9c 01       	movw	r18, r24
    61bc:	40 e0       	ldi	r20, 0x00	; 0
    61be:	50 e0       	ldi	r21, 0x00	; 0
    61c0:	80 91 25 02 	lds	r24, 0x0225
    61c4:	90 91 26 02 	lds	r25, 0x0226
    61c8:	cc 01       	movw	r24, r24
    61ca:	a0 e0       	ldi	r26, 0x00	; 0
    61cc:	b0 e0       	ldi	r27, 0x00	; 0
    61ce:	dc 01       	movw	r26, r24
    61d0:	99 27       	eor	r25, r25
    61d2:	88 27       	eor	r24, r24
    61d4:	82 0f       	add	r24, r18
    61d6:	93 1f       	adc	r25, r19
    61d8:	a4 1f       	adc	r26, r20
    61da:	b5 1f       	adc	r27, r21
    61dc:	80 93 1a 02 	sts	0x021A, r24
    61e0:	90 93 1b 02 	sts	0x021B, r25
    61e4:	a0 93 1c 02 	sts	0x021C, r26
    61e8:	b0 93 1d 02 	sts	0x021D, r27
		TimeOn = G_u32Counts_Read3 - G_u32Counts_Read2;
    61ec:	80 91 1a 02 	lds	r24, 0x021A
    61f0:	90 91 1b 02 	lds	r25, 0x021B
    61f4:	a0 91 1c 02 	lds	r26, 0x021C
    61f8:	b0 91 1d 02 	lds	r27, 0x021D
    61fc:	9c 01       	movw	r18, r24
    61fe:	80 91 16 02 	lds	r24, 0x0216
    6202:	90 91 17 02 	lds	r25, 0x0217
    6206:	a0 91 18 02 	lds	r26, 0x0218
    620a:	b0 91 19 02 	lds	r27, 0x0219
    620e:	a9 01       	movw	r20, r18
    6210:	48 1b       	sub	r20, r24
    6212:	59 0b       	sbc	r21, r25
    6214:	ca 01       	movw	r24, r20
    6216:	90 93 24 02 	sts	0x0224, r25
    621a:	80 93 23 02 	sts	0x0223, r24
		TIMER_vDisableIntICU();
    621e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <TIMER_vDisableIntICU>
		Flag = 1;
    6222:	81 e0       	ldi	r24, 0x01	; 1
    6224:	80 93 1e 02 	sts	0x021E, r24
	}
	else
	{
		// DO Nothing
	}
}
    6228:	cf 91       	pop	r28
    622a:	df 91       	pop	r29
    622c:	08 95       	ret

0000622e <TIM1_OVF>:
void TIM1_OVF()
{
    622e:	df 93       	push	r29
    6230:	cf 93       	push	r28
    6232:	cd b7       	in	r28, 0x3d	; 61
    6234:	de b7       	in	r29, 0x3e	; 62
	G_u16Cov++;
    6236:	80 91 25 02 	lds	r24, 0x0225
    623a:	90 91 26 02 	lds	r25, 0x0226
    623e:	01 96       	adiw	r24, 0x01	; 1
    6240:	90 93 26 02 	sts	0x0226, r25
    6244:	80 93 25 02 	sts	0x0225, r24
}
    6248:	cf 91       	pop	r28
    624a:	df 91       	pop	r29
    624c:	08 95       	ret

0000624e <__prologue_saves__>:
    624e:	2f 92       	push	r2
    6250:	3f 92       	push	r3
    6252:	4f 92       	push	r4
    6254:	5f 92       	push	r5
    6256:	6f 92       	push	r6
    6258:	7f 92       	push	r7
    625a:	8f 92       	push	r8
    625c:	9f 92       	push	r9
    625e:	af 92       	push	r10
    6260:	bf 92       	push	r11
    6262:	cf 92       	push	r12
    6264:	df 92       	push	r13
    6266:	ef 92       	push	r14
    6268:	ff 92       	push	r15
    626a:	0f 93       	push	r16
    626c:	1f 93       	push	r17
    626e:	cf 93       	push	r28
    6270:	df 93       	push	r29
    6272:	cd b7       	in	r28, 0x3d	; 61
    6274:	de b7       	in	r29, 0x3e	; 62
    6276:	ca 1b       	sub	r28, r26
    6278:	db 0b       	sbc	r29, r27
    627a:	0f b6       	in	r0, 0x3f	; 63
    627c:	f8 94       	cli
    627e:	de bf       	out	0x3e, r29	; 62
    6280:	0f be       	out	0x3f, r0	; 63
    6282:	cd bf       	out	0x3d, r28	; 61
    6284:	09 94       	ijmp

00006286 <__epilogue_restores__>:
    6286:	2a 88       	ldd	r2, Y+18	; 0x12
    6288:	39 88       	ldd	r3, Y+17	; 0x11
    628a:	48 88       	ldd	r4, Y+16	; 0x10
    628c:	5f 84       	ldd	r5, Y+15	; 0x0f
    628e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6290:	7d 84       	ldd	r7, Y+13	; 0x0d
    6292:	8c 84       	ldd	r8, Y+12	; 0x0c
    6294:	9b 84       	ldd	r9, Y+11	; 0x0b
    6296:	aa 84       	ldd	r10, Y+10	; 0x0a
    6298:	b9 84       	ldd	r11, Y+9	; 0x09
    629a:	c8 84       	ldd	r12, Y+8	; 0x08
    629c:	df 80       	ldd	r13, Y+7	; 0x07
    629e:	ee 80       	ldd	r14, Y+6	; 0x06
    62a0:	fd 80       	ldd	r15, Y+5	; 0x05
    62a2:	0c 81       	ldd	r16, Y+4	; 0x04
    62a4:	1b 81       	ldd	r17, Y+3	; 0x03
    62a6:	aa 81       	ldd	r26, Y+2	; 0x02
    62a8:	b9 81       	ldd	r27, Y+1	; 0x01
    62aa:	ce 0f       	add	r28, r30
    62ac:	d1 1d       	adc	r29, r1
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	f8 94       	cli
    62b2:	de bf       	out	0x3e, r29	; 62
    62b4:	0f be       	out	0x3f, r0	; 63
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	ed 01       	movw	r28, r26
    62ba:	08 95       	ret

000062bc <sprintf>:
    62bc:	ae e0       	ldi	r26, 0x0E	; 14
    62be:	b0 e0       	ldi	r27, 0x00	; 0
    62c0:	e4 e6       	ldi	r30, 0x64	; 100
    62c2:	f1 e3       	ldi	r31, 0x31	; 49
    62c4:	0c 94 35 31 	jmp	0x626a	; 0x626a <__prologue_saves__+0x1c>
    62c8:	0d 89       	ldd	r16, Y+21	; 0x15
    62ca:	1e 89       	ldd	r17, Y+22	; 0x16
    62cc:	86 e0       	ldi	r24, 0x06	; 6
    62ce:	8c 83       	std	Y+4, r24	; 0x04
    62d0:	1a 83       	std	Y+2, r17	; 0x02
    62d2:	09 83       	std	Y+1, r16	; 0x01
    62d4:	8f ef       	ldi	r24, 0xFF	; 255
    62d6:	9f e7       	ldi	r25, 0x7F	; 127
    62d8:	9e 83       	std	Y+6, r25	; 0x06
    62da:	8d 83       	std	Y+5, r24	; 0x05
    62dc:	9e 01       	movw	r18, r28
    62de:	27 5e       	subi	r18, 0xE7	; 231
    62e0:	3f 4f       	sbci	r19, 0xFF	; 255
    62e2:	ce 01       	movw	r24, r28
    62e4:	01 96       	adiw	r24, 0x01	; 1
    62e6:	6f 89       	ldd	r22, Y+23	; 0x17
    62e8:	78 8d       	ldd	r23, Y+24	; 0x18
    62ea:	a9 01       	movw	r20, r18
    62ec:	0e 94 a2 31 	call	0x6344	; 0x6344 <vfprintf>
    62f0:	2f 81       	ldd	r18, Y+7	; 0x07
    62f2:	38 85       	ldd	r19, Y+8	; 0x08
    62f4:	02 0f       	add	r16, r18
    62f6:	13 1f       	adc	r17, r19
    62f8:	f8 01       	movw	r30, r16
    62fa:	10 82       	st	Z, r1
    62fc:	2e 96       	adiw	r28, 0x0e	; 14
    62fe:	e4 e0       	ldi	r30, 0x04	; 4
    6300:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__epilogue_restores__+0x1c>

00006304 <round>:
    6304:	cd d2       	rcall	.+1434   	; 0x68a0 <__fp_splitA>
    6306:	e0 f0       	brcs	.+56     	; 0x6340 <round+0x3c>
    6308:	9e 37       	cpi	r25, 0x7E	; 126
    630a:	d8 f0       	brcs	.+54     	; 0x6342 <round+0x3e>
    630c:	96 39       	cpi	r25, 0x96	; 150
    630e:	b8 f4       	brcc	.+46     	; 0x633e <round+0x3a>
    6310:	9e 38       	cpi	r25, 0x8E	; 142
    6312:	48 f4       	brcc	.+18     	; 0x6326 <round+0x22>
    6314:	67 2f       	mov	r22, r23
    6316:	78 2f       	mov	r23, r24
    6318:	88 27       	eor	r24, r24
    631a:	98 5f       	subi	r25, 0xF8	; 248
    631c:	f9 cf       	rjmp	.-14     	; 0x6310 <round+0xc>
    631e:	86 95       	lsr	r24
    6320:	77 95       	ror	r23
    6322:	67 95       	ror	r22
    6324:	93 95       	inc	r25
    6326:	95 39       	cpi	r25, 0x95	; 149
    6328:	d0 f3       	brcs	.-12     	; 0x631e <round+0x1a>
    632a:	b6 2f       	mov	r27, r22
    632c:	b1 70       	andi	r27, 0x01	; 1
    632e:	6b 0f       	add	r22, r27
    6330:	71 1d       	adc	r23, r1
    6332:	81 1d       	adc	r24, r1
    6334:	20 f4       	brcc	.+8      	; 0x633e <round+0x3a>
    6336:	87 95       	ror	r24
    6338:	77 95       	ror	r23
    633a:	67 95       	ror	r22
    633c:	93 95       	inc	r25
    633e:	7f c2       	rjmp	.+1278   	; 0x683e <__fp_mintl>
    6340:	99 c2       	rjmp	.+1330   	; 0x6874 <__fp_mpack>
    6342:	c9 c2       	rjmp	.+1426   	; 0x68d6 <__fp_szero>

00006344 <vfprintf>:
    6344:	ab e0       	ldi	r26, 0x0B	; 11
    6346:	b0 e0       	ldi	r27, 0x00	; 0
    6348:	e8 ea       	ldi	r30, 0xA8	; 168
    634a:	f1 e3       	ldi	r31, 0x31	; 49
    634c:	0c 94 27 31 	jmp	0x624e	; 0x624e <__prologue_saves__>
    6350:	3c 01       	movw	r6, r24
    6352:	2b 01       	movw	r4, r22
    6354:	5a 01       	movw	r10, r20
    6356:	fc 01       	movw	r30, r24
    6358:	17 82       	std	Z+7, r1	; 0x07
    635a:	16 82       	std	Z+6, r1	; 0x06
    635c:	83 81       	ldd	r24, Z+3	; 0x03
    635e:	81 fd       	sbrc	r24, 1
    6360:	03 c0       	rjmp	.+6      	; 0x6368 <vfprintf+0x24>
    6362:	6f ef       	ldi	r22, 0xFF	; 255
    6364:	7f ef       	ldi	r23, 0xFF	; 255
    6366:	c6 c1       	rjmp	.+908    	; 0x66f4 <vfprintf+0x3b0>
    6368:	9a e0       	ldi	r25, 0x0A	; 10
    636a:	89 2e       	mov	r8, r25
    636c:	1e 01       	movw	r2, r28
    636e:	08 94       	sec
    6370:	21 1c       	adc	r2, r1
    6372:	31 1c       	adc	r3, r1
    6374:	f3 01       	movw	r30, r6
    6376:	23 81       	ldd	r18, Z+3	; 0x03
    6378:	f2 01       	movw	r30, r4
    637a:	23 fd       	sbrc	r18, 3
    637c:	85 91       	lpm	r24, Z+
    637e:	23 ff       	sbrs	r18, 3
    6380:	81 91       	ld	r24, Z+
    6382:	2f 01       	movw	r4, r30
    6384:	88 23       	and	r24, r24
    6386:	09 f4       	brne	.+2      	; 0x638a <vfprintf+0x46>
    6388:	b2 c1       	rjmp	.+868    	; 0x66ee <vfprintf+0x3aa>
    638a:	85 32       	cpi	r24, 0x25	; 37
    638c:	39 f4       	brne	.+14     	; 0x639c <vfprintf+0x58>
    638e:	23 fd       	sbrc	r18, 3
    6390:	85 91       	lpm	r24, Z+
    6392:	23 ff       	sbrs	r18, 3
    6394:	81 91       	ld	r24, Z+
    6396:	2f 01       	movw	r4, r30
    6398:	85 32       	cpi	r24, 0x25	; 37
    639a:	29 f4       	brne	.+10     	; 0x63a6 <vfprintf+0x62>
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	b3 01       	movw	r22, r6
    63a0:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    63a4:	e7 cf       	rjmp	.-50     	; 0x6374 <vfprintf+0x30>
    63a6:	98 2f       	mov	r25, r24
    63a8:	ff 24       	eor	r15, r15
    63aa:	ee 24       	eor	r14, r14
    63ac:	99 24       	eor	r9, r9
    63ae:	ff e1       	ldi	r31, 0x1F	; 31
    63b0:	ff 15       	cp	r31, r15
    63b2:	d0 f0       	brcs	.+52     	; 0x63e8 <vfprintf+0xa4>
    63b4:	9b 32       	cpi	r25, 0x2B	; 43
    63b6:	69 f0       	breq	.+26     	; 0x63d2 <vfprintf+0x8e>
    63b8:	9c 32       	cpi	r25, 0x2C	; 44
    63ba:	28 f4       	brcc	.+10     	; 0x63c6 <vfprintf+0x82>
    63bc:	90 32       	cpi	r25, 0x20	; 32
    63be:	59 f0       	breq	.+22     	; 0x63d6 <vfprintf+0x92>
    63c0:	93 32       	cpi	r25, 0x23	; 35
    63c2:	91 f4       	brne	.+36     	; 0x63e8 <vfprintf+0xa4>
    63c4:	0e c0       	rjmp	.+28     	; 0x63e2 <vfprintf+0x9e>
    63c6:	9d 32       	cpi	r25, 0x2D	; 45
    63c8:	49 f0       	breq	.+18     	; 0x63dc <vfprintf+0x98>
    63ca:	90 33       	cpi	r25, 0x30	; 48
    63cc:	69 f4       	brne	.+26     	; 0x63e8 <vfprintf+0xa4>
    63ce:	41 e0       	ldi	r20, 0x01	; 1
    63d0:	24 c0       	rjmp	.+72     	; 0x641a <vfprintf+0xd6>
    63d2:	52 e0       	ldi	r21, 0x02	; 2
    63d4:	f5 2a       	or	r15, r21
    63d6:	84 e0       	ldi	r24, 0x04	; 4
    63d8:	f8 2a       	or	r15, r24
    63da:	28 c0       	rjmp	.+80     	; 0x642c <vfprintf+0xe8>
    63dc:	98 e0       	ldi	r25, 0x08	; 8
    63de:	f9 2a       	or	r15, r25
    63e0:	25 c0       	rjmp	.+74     	; 0x642c <vfprintf+0xe8>
    63e2:	e0 e1       	ldi	r30, 0x10	; 16
    63e4:	fe 2a       	or	r15, r30
    63e6:	22 c0       	rjmp	.+68     	; 0x642c <vfprintf+0xe8>
    63e8:	f7 fc       	sbrc	r15, 7
    63ea:	29 c0       	rjmp	.+82     	; 0x643e <vfprintf+0xfa>
    63ec:	89 2f       	mov	r24, r25
    63ee:	80 53       	subi	r24, 0x30	; 48
    63f0:	8a 30       	cpi	r24, 0x0A	; 10
    63f2:	70 f4       	brcc	.+28     	; 0x6410 <vfprintf+0xcc>
    63f4:	f6 fe       	sbrs	r15, 6
    63f6:	05 c0       	rjmp	.+10     	; 0x6402 <vfprintf+0xbe>
    63f8:	98 9c       	mul	r9, r8
    63fa:	90 2c       	mov	r9, r0
    63fc:	11 24       	eor	r1, r1
    63fe:	98 0e       	add	r9, r24
    6400:	15 c0       	rjmp	.+42     	; 0x642c <vfprintf+0xe8>
    6402:	e8 9c       	mul	r14, r8
    6404:	e0 2c       	mov	r14, r0
    6406:	11 24       	eor	r1, r1
    6408:	e8 0e       	add	r14, r24
    640a:	f0 e2       	ldi	r31, 0x20	; 32
    640c:	ff 2a       	or	r15, r31
    640e:	0e c0       	rjmp	.+28     	; 0x642c <vfprintf+0xe8>
    6410:	9e 32       	cpi	r25, 0x2E	; 46
    6412:	29 f4       	brne	.+10     	; 0x641e <vfprintf+0xda>
    6414:	f6 fc       	sbrc	r15, 6
    6416:	6b c1       	rjmp	.+726    	; 0x66ee <vfprintf+0x3aa>
    6418:	40 e4       	ldi	r20, 0x40	; 64
    641a:	f4 2a       	or	r15, r20
    641c:	07 c0       	rjmp	.+14     	; 0x642c <vfprintf+0xe8>
    641e:	9c 36       	cpi	r25, 0x6C	; 108
    6420:	19 f4       	brne	.+6      	; 0x6428 <vfprintf+0xe4>
    6422:	50 e8       	ldi	r21, 0x80	; 128
    6424:	f5 2a       	or	r15, r21
    6426:	02 c0       	rjmp	.+4      	; 0x642c <vfprintf+0xe8>
    6428:	98 36       	cpi	r25, 0x68	; 104
    642a:	49 f4       	brne	.+18     	; 0x643e <vfprintf+0xfa>
    642c:	f2 01       	movw	r30, r4
    642e:	23 fd       	sbrc	r18, 3
    6430:	95 91       	lpm	r25, Z+
    6432:	23 ff       	sbrs	r18, 3
    6434:	91 91       	ld	r25, Z+
    6436:	2f 01       	movw	r4, r30
    6438:	99 23       	and	r25, r25
    643a:	09 f0       	breq	.+2      	; 0x643e <vfprintf+0xfa>
    643c:	b8 cf       	rjmp	.-144    	; 0x63ae <vfprintf+0x6a>
    643e:	89 2f       	mov	r24, r25
    6440:	85 54       	subi	r24, 0x45	; 69
    6442:	83 30       	cpi	r24, 0x03	; 3
    6444:	18 f0       	brcs	.+6      	; 0x644c <vfprintf+0x108>
    6446:	80 52       	subi	r24, 0x20	; 32
    6448:	83 30       	cpi	r24, 0x03	; 3
    644a:	38 f4       	brcc	.+14     	; 0x645a <vfprintf+0x116>
    644c:	44 e0       	ldi	r20, 0x04	; 4
    644e:	50 e0       	ldi	r21, 0x00	; 0
    6450:	a4 0e       	add	r10, r20
    6452:	b5 1e       	adc	r11, r21
    6454:	5f e3       	ldi	r21, 0x3F	; 63
    6456:	59 83       	std	Y+1, r21	; 0x01
    6458:	0f c0       	rjmp	.+30     	; 0x6478 <vfprintf+0x134>
    645a:	93 36       	cpi	r25, 0x63	; 99
    645c:	31 f0       	breq	.+12     	; 0x646a <vfprintf+0x126>
    645e:	93 37       	cpi	r25, 0x73	; 115
    6460:	79 f0       	breq	.+30     	; 0x6480 <vfprintf+0x13c>
    6462:	93 35       	cpi	r25, 0x53	; 83
    6464:	09 f0       	breq	.+2      	; 0x6468 <vfprintf+0x124>
    6466:	56 c0       	rjmp	.+172    	; 0x6514 <vfprintf+0x1d0>
    6468:	20 c0       	rjmp	.+64     	; 0x64aa <vfprintf+0x166>
    646a:	f5 01       	movw	r30, r10
    646c:	80 81       	ld	r24, Z
    646e:	89 83       	std	Y+1, r24	; 0x01
    6470:	42 e0       	ldi	r20, 0x02	; 2
    6472:	50 e0       	ldi	r21, 0x00	; 0
    6474:	a4 0e       	add	r10, r20
    6476:	b5 1e       	adc	r11, r21
    6478:	61 01       	movw	r12, r2
    647a:	01 e0       	ldi	r16, 0x01	; 1
    647c:	10 e0       	ldi	r17, 0x00	; 0
    647e:	12 c0       	rjmp	.+36     	; 0x64a4 <vfprintf+0x160>
    6480:	f5 01       	movw	r30, r10
    6482:	c0 80       	ld	r12, Z
    6484:	d1 80       	ldd	r13, Z+1	; 0x01
    6486:	f6 fc       	sbrc	r15, 6
    6488:	03 c0       	rjmp	.+6      	; 0x6490 <vfprintf+0x14c>
    648a:	6f ef       	ldi	r22, 0xFF	; 255
    648c:	7f ef       	ldi	r23, 0xFF	; 255
    648e:	02 c0       	rjmp	.+4      	; 0x6494 <vfprintf+0x150>
    6490:	69 2d       	mov	r22, r9
    6492:	70 e0       	ldi	r23, 0x00	; 0
    6494:	42 e0       	ldi	r20, 0x02	; 2
    6496:	50 e0       	ldi	r21, 0x00	; 0
    6498:	a4 0e       	add	r10, r20
    649a:	b5 1e       	adc	r11, r21
    649c:	c6 01       	movw	r24, r12
    649e:	0e 94 8a 33 	call	0x6714	; 0x6714 <strnlen>
    64a2:	8c 01       	movw	r16, r24
    64a4:	5f e7       	ldi	r21, 0x7F	; 127
    64a6:	f5 22       	and	r15, r21
    64a8:	14 c0       	rjmp	.+40     	; 0x64d2 <vfprintf+0x18e>
    64aa:	f5 01       	movw	r30, r10
    64ac:	c0 80       	ld	r12, Z
    64ae:	d1 80       	ldd	r13, Z+1	; 0x01
    64b0:	f6 fc       	sbrc	r15, 6
    64b2:	03 c0       	rjmp	.+6      	; 0x64ba <vfprintf+0x176>
    64b4:	6f ef       	ldi	r22, 0xFF	; 255
    64b6:	7f ef       	ldi	r23, 0xFF	; 255
    64b8:	02 c0       	rjmp	.+4      	; 0x64be <vfprintf+0x17a>
    64ba:	69 2d       	mov	r22, r9
    64bc:	70 e0       	ldi	r23, 0x00	; 0
    64be:	42 e0       	ldi	r20, 0x02	; 2
    64c0:	50 e0       	ldi	r21, 0x00	; 0
    64c2:	a4 0e       	add	r10, r20
    64c4:	b5 1e       	adc	r11, r21
    64c6:	c6 01       	movw	r24, r12
    64c8:	0e 94 7f 33 	call	0x66fe	; 0x66fe <strnlen_P>
    64cc:	8c 01       	movw	r16, r24
    64ce:	50 e8       	ldi	r21, 0x80	; 128
    64d0:	f5 2a       	or	r15, r21
    64d2:	f3 fe       	sbrs	r15, 3
    64d4:	07 c0       	rjmp	.+14     	; 0x64e4 <vfprintf+0x1a0>
    64d6:	1a c0       	rjmp	.+52     	; 0x650c <vfprintf+0x1c8>
    64d8:	80 e2       	ldi	r24, 0x20	; 32
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	b3 01       	movw	r22, r6
    64de:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    64e2:	ea 94       	dec	r14
    64e4:	8e 2d       	mov	r24, r14
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	08 17       	cp	r16, r24
    64ea:	19 07       	cpc	r17, r25
    64ec:	a8 f3       	brcs	.-22     	; 0x64d8 <vfprintf+0x194>
    64ee:	0e c0       	rjmp	.+28     	; 0x650c <vfprintf+0x1c8>
    64f0:	f6 01       	movw	r30, r12
    64f2:	f7 fc       	sbrc	r15, 7
    64f4:	85 91       	lpm	r24, Z+
    64f6:	f7 fe       	sbrs	r15, 7
    64f8:	81 91       	ld	r24, Z+
    64fa:	6f 01       	movw	r12, r30
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	b3 01       	movw	r22, r6
    6500:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    6504:	e1 10       	cpse	r14, r1
    6506:	ea 94       	dec	r14
    6508:	01 50       	subi	r16, 0x01	; 1
    650a:	10 40       	sbci	r17, 0x00	; 0
    650c:	01 15       	cp	r16, r1
    650e:	11 05       	cpc	r17, r1
    6510:	79 f7       	brne	.-34     	; 0x64f0 <vfprintf+0x1ac>
    6512:	ea c0       	rjmp	.+468    	; 0x66e8 <vfprintf+0x3a4>
    6514:	94 36       	cpi	r25, 0x64	; 100
    6516:	11 f0       	breq	.+4      	; 0x651c <vfprintf+0x1d8>
    6518:	99 36       	cpi	r25, 0x69	; 105
    651a:	69 f5       	brne	.+90     	; 0x6576 <vfprintf+0x232>
    651c:	f7 fe       	sbrs	r15, 7
    651e:	08 c0       	rjmp	.+16     	; 0x6530 <vfprintf+0x1ec>
    6520:	f5 01       	movw	r30, r10
    6522:	20 81       	ld	r18, Z
    6524:	31 81       	ldd	r19, Z+1	; 0x01
    6526:	42 81       	ldd	r20, Z+2	; 0x02
    6528:	53 81       	ldd	r21, Z+3	; 0x03
    652a:	84 e0       	ldi	r24, 0x04	; 4
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	0a c0       	rjmp	.+20     	; 0x6544 <vfprintf+0x200>
    6530:	f5 01       	movw	r30, r10
    6532:	80 81       	ld	r24, Z
    6534:	91 81       	ldd	r25, Z+1	; 0x01
    6536:	9c 01       	movw	r18, r24
    6538:	44 27       	eor	r20, r20
    653a:	37 fd       	sbrc	r19, 7
    653c:	40 95       	com	r20
    653e:	54 2f       	mov	r21, r20
    6540:	82 e0       	ldi	r24, 0x02	; 2
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	a8 0e       	add	r10, r24
    6546:	b9 1e       	adc	r11, r25
    6548:	9f e6       	ldi	r25, 0x6F	; 111
    654a:	f9 22       	and	r15, r25
    654c:	57 ff       	sbrs	r21, 7
    654e:	09 c0       	rjmp	.+18     	; 0x6562 <vfprintf+0x21e>
    6550:	50 95       	com	r21
    6552:	40 95       	com	r20
    6554:	30 95       	com	r19
    6556:	21 95       	neg	r18
    6558:	3f 4f       	sbci	r19, 0xFF	; 255
    655a:	4f 4f       	sbci	r20, 0xFF	; 255
    655c:	5f 4f       	sbci	r21, 0xFF	; 255
    655e:	e0 e8       	ldi	r30, 0x80	; 128
    6560:	fe 2a       	or	r15, r30
    6562:	ca 01       	movw	r24, r20
    6564:	b9 01       	movw	r22, r18
    6566:	a1 01       	movw	r20, r2
    6568:	2a e0       	ldi	r18, 0x0A	; 10
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	0e 94 c1 33 	call	0x6782	; 0x6782 <__ultoa_invert>
    6570:	d8 2e       	mov	r13, r24
    6572:	d2 18       	sub	r13, r2
    6574:	40 c0       	rjmp	.+128    	; 0x65f6 <vfprintf+0x2b2>
    6576:	95 37       	cpi	r25, 0x75	; 117
    6578:	29 f4       	brne	.+10     	; 0x6584 <vfprintf+0x240>
    657a:	1f 2d       	mov	r17, r15
    657c:	1f 7e       	andi	r17, 0xEF	; 239
    657e:	2a e0       	ldi	r18, 0x0A	; 10
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	1d c0       	rjmp	.+58     	; 0x65be <vfprintf+0x27a>
    6584:	1f 2d       	mov	r17, r15
    6586:	19 7f       	andi	r17, 0xF9	; 249
    6588:	9f 36       	cpi	r25, 0x6F	; 111
    658a:	61 f0       	breq	.+24     	; 0x65a4 <vfprintf+0x260>
    658c:	90 37       	cpi	r25, 0x70	; 112
    658e:	20 f4       	brcc	.+8      	; 0x6598 <vfprintf+0x254>
    6590:	98 35       	cpi	r25, 0x58	; 88
    6592:	09 f0       	breq	.+2      	; 0x6596 <vfprintf+0x252>
    6594:	ac c0       	rjmp	.+344    	; 0x66ee <vfprintf+0x3aa>
    6596:	0f c0       	rjmp	.+30     	; 0x65b6 <vfprintf+0x272>
    6598:	90 37       	cpi	r25, 0x70	; 112
    659a:	39 f0       	breq	.+14     	; 0x65aa <vfprintf+0x266>
    659c:	98 37       	cpi	r25, 0x78	; 120
    659e:	09 f0       	breq	.+2      	; 0x65a2 <vfprintf+0x25e>
    65a0:	a6 c0       	rjmp	.+332    	; 0x66ee <vfprintf+0x3aa>
    65a2:	04 c0       	rjmp	.+8      	; 0x65ac <vfprintf+0x268>
    65a4:	28 e0       	ldi	r18, 0x08	; 8
    65a6:	30 e0       	ldi	r19, 0x00	; 0
    65a8:	0a c0       	rjmp	.+20     	; 0x65be <vfprintf+0x27a>
    65aa:	10 61       	ori	r17, 0x10	; 16
    65ac:	14 fd       	sbrc	r17, 4
    65ae:	14 60       	ori	r17, 0x04	; 4
    65b0:	20 e1       	ldi	r18, 0x10	; 16
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	04 c0       	rjmp	.+8      	; 0x65be <vfprintf+0x27a>
    65b6:	14 fd       	sbrc	r17, 4
    65b8:	16 60       	ori	r17, 0x06	; 6
    65ba:	20 e1       	ldi	r18, 0x10	; 16
    65bc:	32 e0       	ldi	r19, 0x02	; 2
    65be:	17 ff       	sbrs	r17, 7
    65c0:	08 c0       	rjmp	.+16     	; 0x65d2 <vfprintf+0x28e>
    65c2:	f5 01       	movw	r30, r10
    65c4:	60 81       	ld	r22, Z
    65c6:	71 81       	ldd	r23, Z+1	; 0x01
    65c8:	82 81       	ldd	r24, Z+2	; 0x02
    65ca:	93 81       	ldd	r25, Z+3	; 0x03
    65cc:	44 e0       	ldi	r20, 0x04	; 4
    65ce:	50 e0       	ldi	r21, 0x00	; 0
    65d0:	08 c0       	rjmp	.+16     	; 0x65e2 <vfprintf+0x29e>
    65d2:	f5 01       	movw	r30, r10
    65d4:	80 81       	ld	r24, Z
    65d6:	91 81       	ldd	r25, Z+1	; 0x01
    65d8:	bc 01       	movw	r22, r24
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	42 e0       	ldi	r20, 0x02	; 2
    65e0:	50 e0       	ldi	r21, 0x00	; 0
    65e2:	a4 0e       	add	r10, r20
    65e4:	b5 1e       	adc	r11, r21
    65e6:	a1 01       	movw	r20, r2
    65e8:	0e 94 c1 33 	call	0x6782	; 0x6782 <__ultoa_invert>
    65ec:	d8 2e       	mov	r13, r24
    65ee:	d2 18       	sub	r13, r2
    65f0:	8f e7       	ldi	r24, 0x7F	; 127
    65f2:	f8 2e       	mov	r15, r24
    65f4:	f1 22       	and	r15, r17
    65f6:	f6 fe       	sbrs	r15, 6
    65f8:	0b c0       	rjmp	.+22     	; 0x6610 <vfprintf+0x2cc>
    65fa:	5e ef       	ldi	r21, 0xFE	; 254
    65fc:	f5 22       	and	r15, r21
    65fe:	d9 14       	cp	r13, r9
    6600:	38 f4       	brcc	.+14     	; 0x6610 <vfprintf+0x2cc>
    6602:	f4 fe       	sbrs	r15, 4
    6604:	07 c0       	rjmp	.+14     	; 0x6614 <vfprintf+0x2d0>
    6606:	f2 fc       	sbrc	r15, 2
    6608:	05 c0       	rjmp	.+10     	; 0x6614 <vfprintf+0x2d0>
    660a:	8f ee       	ldi	r24, 0xEF	; 239
    660c:	f8 22       	and	r15, r24
    660e:	02 c0       	rjmp	.+4      	; 0x6614 <vfprintf+0x2d0>
    6610:	1d 2d       	mov	r17, r13
    6612:	01 c0       	rjmp	.+2      	; 0x6616 <vfprintf+0x2d2>
    6614:	19 2d       	mov	r17, r9
    6616:	f4 fe       	sbrs	r15, 4
    6618:	0d c0       	rjmp	.+26     	; 0x6634 <vfprintf+0x2f0>
    661a:	fe 01       	movw	r30, r28
    661c:	ed 0d       	add	r30, r13
    661e:	f1 1d       	adc	r31, r1
    6620:	80 81       	ld	r24, Z
    6622:	80 33       	cpi	r24, 0x30	; 48
    6624:	19 f4       	brne	.+6      	; 0x662c <vfprintf+0x2e8>
    6626:	99 ee       	ldi	r25, 0xE9	; 233
    6628:	f9 22       	and	r15, r25
    662a:	08 c0       	rjmp	.+16     	; 0x663c <vfprintf+0x2f8>
    662c:	1f 5f       	subi	r17, 0xFF	; 255
    662e:	f2 fe       	sbrs	r15, 2
    6630:	05 c0       	rjmp	.+10     	; 0x663c <vfprintf+0x2f8>
    6632:	03 c0       	rjmp	.+6      	; 0x663a <vfprintf+0x2f6>
    6634:	8f 2d       	mov	r24, r15
    6636:	86 78       	andi	r24, 0x86	; 134
    6638:	09 f0       	breq	.+2      	; 0x663c <vfprintf+0x2f8>
    663a:	1f 5f       	subi	r17, 0xFF	; 255
    663c:	0f 2d       	mov	r16, r15
    663e:	f3 fc       	sbrc	r15, 3
    6640:	14 c0       	rjmp	.+40     	; 0x666a <vfprintf+0x326>
    6642:	f0 fe       	sbrs	r15, 0
    6644:	0f c0       	rjmp	.+30     	; 0x6664 <vfprintf+0x320>
    6646:	1e 15       	cp	r17, r14
    6648:	10 f0       	brcs	.+4      	; 0x664e <vfprintf+0x30a>
    664a:	9d 2c       	mov	r9, r13
    664c:	0b c0       	rjmp	.+22     	; 0x6664 <vfprintf+0x320>
    664e:	9d 2c       	mov	r9, r13
    6650:	9e 0c       	add	r9, r14
    6652:	91 1a       	sub	r9, r17
    6654:	1e 2d       	mov	r17, r14
    6656:	06 c0       	rjmp	.+12     	; 0x6664 <vfprintf+0x320>
    6658:	80 e2       	ldi	r24, 0x20	; 32
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	b3 01       	movw	r22, r6
    665e:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    6662:	1f 5f       	subi	r17, 0xFF	; 255
    6664:	1e 15       	cp	r17, r14
    6666:	c0 f3       	brcs	.-16     	; 0x6658 <vfprintf+0x314>
    6668:	04 c0       	rjmp	.+8      	; 0x6672 <vfprintf+0x32e>
    666a:	1e 15       	cp	r17, r14
    666c:	10 f4       	brcc	.+4      	; 0x6672 <vfprintf+0x32e>
    666e:	e1 1a       	sub	r14, r17
    6670:	01 c0       	rjmp	.+2      	; 0x6674 <vfprintf+0x330>
    6672:	ee 24       	eor	r14, r14
    6674:	04 ff       	sbrs	r16, 4
    6676:	0f c0       	rjmp	.+30     	; 0x6696 <vfprintf+0x352>
    6678:	80 e3       	ldi	r24, 0x30	; 48
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	b3 01       	movw	r22, r6
    667e:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    6682:	02 ff       	sbrs	r16, 2
    6684:	1d c0       	rjmp	.+58     	; 0x66c0 <vfprintf+0x37c>
    6686:	01 fd       	sbrc	r16, 1
    6688:	03 c0       	rjmp	.+6      	; 0x6690 <vfprintf+0x34c>
    668a:	88 e7       	ldi	r24, 0x78	; 120
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	0e c0       	rjmp	.+28     	; 0x66ac <vfprintf+0x368>
    6690:	88 e5       	ldi	r24, 0x58	; 88
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	0b c0       	rjmp	.+22     	; 0x66ac <vfprintf+0x368>
    6696:	80 2f       	mov	r24, r16
    6698:	86 78       	andi	r24, 0x86	; 134
    669a:	91 f0       	breq	.+36     	; 0x66c0 <vfprintf+0x37c>
    669c:	01 ff       	sbrs	r16, 1
    669e:	02 c0       	rjmp	.+4      	; 0x66a4 <vfprintf+0x360>
    66a0:	8b e2       	ldi	r24, 0x2B	; 43
    66a2:	01 c0       	rjmp	.+2      	; 0x66a6 <vfprintf+0x362>
    66a4:	80 e2       	ldi	r24, 0x20	; 32
    66a6:	f7 fc       	sbrc	r15, 7
    66a8:	8d e2       	ldi	r24, 0x2D	; 45
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	b3 01       	movw	r22, r6
    66ae:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    66b2:	06 c0       	rjmp	.+12     	; 0x66c0 <vfprintf+0x37c>
    66b4:	80 e3       	ldi	r24, 0x30	; 48
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	b3 01       	movw	r22, r6
    66ba:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    66be:	9a 94       	dec	r9
    66c0:	d9 14       	cp	r13, r9
    66c2:	c0 f3       	brcs	.-16     	; 0x66b4 <vfprintf+0x370>
    66c4:	da 94       	dec	r13
    66c6:	f1 01       	movw	r30, r2
    66c8:	ed 0d       	add	r30, r13
    66ca:	f1 1d       	adc	r31, r1
    66cc:	80 81       	ld	r24, Z
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	b3 01       	movw	r22, r6
    66d2:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    66d6:	dd 20       	and	r13, r13
    66d8:	a9 f7       	brne	.-22     	; 0x66c4 <vfprintf+0x380>
    66da:	06 c0       	rjmp	.+12     	; 0x66e8 <vfprintf+0x3a4>
    66dc:	80 e2       	ldi	r24, 0x20	; 32
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	b3 01       	movw	r22, r6
    66e2:	0e 94 95 33 	call	0x672a	; 0x672a <fputc>
    66e6:	ea 94       	dec	r14
    66e8:	ee 20       	and	r14, r14
    66ea:	c1 f7       	brne	.-16     	; 0x66dc <vfprintf+0x398>
    66ec:	43 ce       	rjmp	.-890    	; 0x6374 <vfprintf+0x30>
    66ee:	f3 01       	movw	r30, r6
    66f0:	66 81       	ldd	r22, Z+6	; 0x06
    66f2:	77 81       	ldd	r23, Z+7	; 0x07
    66f4:	cb 01       	movw	r24, r22
    66f6:	2b 96       	adiw	r28, 0x0b	; 11
    66f8:	e2 e1       	ldi	r30, 0x12	; 18
    66fa:	0c 94 43 31 	jmp	0x6286	; 0x6286 <__epilogue_restores__>

000066fe <strnlen_P>:
    66fe:	fc 01       	movw	r30, r24
    6700:	05 90       	lpm	r0, Z+
    6702:	61 50       	subi	r22, 0x01	; 1
    6704:	70 40       	sbci	r23, 0x00	; 0
    6706:	01 10       	cpse	r0, r1
    6708:	d8 f7       	brcc	.-10     	; 0x6700 <strnlen_P+0x2>
    670a:	80 95       	com	r24
    670c:	90 95       	com	r25
    670e:	8e 0f       	add	r24, r30
    6710:	9f 1f       	adc	r25, r31
    6712:	08 95       	ret

00006714 <strnlen>:
    6714:	fc 01       	movw	r30, r24
    6716:	61 50       	subi	r22, 0x01	; 1
    6718:	70 40       	sbci	r23, 0x00	; 0
    671a:	01 90       	ld	r0, Z+
    671c:	01 10       	cpse	r0, r1
    671e:	d8 f7       	brcc	.-10     	; 0x6716 <strnlen+0x2>
    6720:	80 95       	com	r24
    6722:	90 95       	com	r25
    6724:	8e 0f       	add	r24, r30
    6726:	9f 1f       	adc	r25, r31
    6728:	08 95       	ret

0000672a <fputc>:
    672a:	0f 93       	push	r16
    672c:	1f 93       	push	r17
    672e:	cf 93       	push	r28
    6730:	df 93       	push	r29
    6732:	8c 01       	movw	r16, r24
    6734:	eb 01       	movw	r28, r22
    6736:	8b 81       	ldd	r24, Y+3	; 0x03
    6738:	81 ff       	sbrs	r24, 1
    673a:	1b c0       	rjmp	.+54     	; 0x6772 <fputc+0x48>
    673c:	82 ff       	sbrs	r24, 2
    673e:	0d c0       	rjmp	.+26     	; 0x675a <fputc+0x30>
    6740:	2e 81       	ldd	r18, Y+6	; 0x06
    6742:	3f 81       	ldd	r19, Y+7	; 0x07
    6744:	8c 81       	ldd	r24, Y+4	; 0x04
    6746:	9d 81       	ldd	r25, Y+5	; 0x05
    6748:	28 17       	cp	r18, r24
    674a:	39 07       	cpc	r19, r25
    674c:	64 f4       	brge	.+24     	; 0x6766 <fputc+0x3c>
    674e:	e8 81       	ld	r30, Y
    6750:	f9 81       	ldd	r31, Y+1	; 0x01
    6752:	01 93       	st	Z+, r16
    6754:	f9 83       	std	Y+1, r31	; 0x01
    6756:	e8 83       	st	Y, r30
    6758:	06 c0       	rjmp	.+12     	; 0x6766 <fputc+0x3c>
    675a:	e8 85       	ldd	r30, Y+8	; 0x08
    675c:	f9 85       	ldd	r31, Y+9	; 0x09
    675e:	80 2f       	mov	r24, r16
    6760:	09 95       	icall
    6762:	89 2b       	or	r24, r25
    6764:	31 f4       	brne	.+12     	; 0x6772 <fputc+0x48>
    6766:	8e 81       	ldd	r24, Y+6	; 0x06
    6768:	9f 81       	ldd	r25, Y+7	; 0x07
    676a:	01 96       	adiw	r24, 0x01	; 1
    676c:	9f 83       	std	Y+7, r25	; 0x07
    676e:	8e 83       	std	Y+6, r24	; 0x06
    6770:	02 c0       	rjmp	.+4      	; 0x6776 <fputc+0x4c>
    6772:	0f ef       	ldi	r16, 0xFF	; 255
    6774:	1f ef       	ldi	r17, 0xFF	; 255
    6776:	c8 01       	movw	r24, r16
    6778:	df 91       	pop	r29
    677a:	cf 91       	pop	r28
    677c:	1f 91       	pop	r17
    677e:	0f 91       	pop	r16
    6780:	08 95       	ret

00006782 <__ultoa_invert>:
    6782:	fa 01       	movw	r30, r20
    6784:	aa 27       	eor	r26, r26
    6786:	28 30       	cpi	r18, 0x08	; 8
    6788:	51 f1       	breq	.+84     	; 0x67de <__ultoa_invert+0x5c>
    678a:	20 31       	cpi	r18, 0x10	; 16
    678c:	81 f1       	breq	.+96     	; 0x67ee <__ultoa_invert+0x6c>
    678e:	e8 94       	clt
    6790:	6f 93       	push	r22
    6792:	6e 7f       	andi	r22, 0xFE	; 254
    6794:	6e 5f       	subi	r22, 0xFE	; 254
    6796:	7f 4f       	sbci	r23, 0xFF	; 255
    6798:	8f 4f       	sbci	r24, 0xFF	; 255
    679a:	9f 4f       	sbci	r25, 0xFF	; 255
    679c:	af 4f       	sbci	r26, 0xFF	; 255
    679e:	b1 e0       	ldi	r27, 0x01	; 1
    67a0:	3e d0       	rcall	.+124    	; 0x681e <__ultoa_invert+0x9c>
    67a2:	b4 e0       	ldi	r27, 0x04	; 4
    67a4:	3c d0       	rcall	.+120    	; 0x681e <__ultoa_invert+0x9c>
    67a6:	67 0f       	add	r22, r23
    67a8:	78 1f       	adc	r23, r24
    67aa:	89 1f       	adc	r24, r25
    67ac:	9a 1f       	adc	r25, r26
    67ae:	a1 1d       	adc	r26, r1
    67b0:	68 0f       	add	r22, r24
    67b2:	79 1f       	adc	r23, r25
    67b4:	8a 1f       	adc	r24, r26
    67b6:	91 1d       	adc	r25, r1
    67b8:	a1 1d       	adc	r26, r1
    67ba:	6a 0f       	add	r22, r26
    67bc:	71 1d       	adc	r23, r1
    67be:	81 1d       	adc	r24, r1
    67c0:	91 1d       	adc	r25, r1
    67c2:	a1 1d       	adc	r26, r1
    67c4:	20 d0       	rcall	.+64     	; 0x6806 <__ultoa_invert+0x84>
    67c6:	09 f4       	brne	.+2      	; 0x67ca <__ultoa_invert+0x48>
    67c8:	68 94       	set
    67ca:	3f 91       	pop	r19
    67cc:	2a e0       	ldi	r18, 0x0A	; 10
    67ce:	26 9f       	mul	r18, r22
    67d0:	11 24       	eor	r1, r1
    67d2:	30 19       	sub	r19, r0
    67d4:	30 5d       	subi	r19, 0xD0	; 208
    67d6:	31 93       	st	Z+, r19
    67d8:	de f6       	brtc	.-74     	; 0x6790 <__ultoa_invert+0xe>
    67da:	cf 01       	movw	r24, r30
    67dc:	08 95       	ret
    67de:	46 2f       	mov	r20, r22
    67e0:	47 70       	andi	r20, 0x07	; 7
    67e2:	40 5d       	subi	r20, 0xD0	; 208
    67e4:	41 93       	st	Z+, r20
    67e6:	b3 e0       	ldi	r27, 0x03	; 3
    67e8:	0f d0       	rcall	.+30     	; 0x6808 <__ultoa_invert+0x86>
    67ea:	c9 f7       	brne	.-14     	; 0x67de <__ultoa_invert+0x5c>
    67ec:	f6 cf       	rjmp	.-20     	; 0x67da <__ultoa_invert+0x58>
    67ee:	46 2f       	mov	r20, r22
    67f0:	4f 70       	andi	r20, 0x0F	; 15
    67f2:	40 5d       	subi	r20, 0xD0	; 208
    67f4:	4a 33       	cpi	r20, 0x3A	; 58
    67f6:	18 f0       	brcs	.+6      	; 0x67fe <__ultoa_invert+0x7c>
    67f8:	49 5d       	subi	r20, 0xD9	; 217
    67fa:	31 fd       	sbrc	r19, 1
    67fc:	40 52       	subi	r20, 0x20	; 32
    67fe:	41 93       	st	Z+, r20
    6800:	02 d0       	rcall	.+4      	; 0x6806 <__ultoa_invert+0x84>
    6802:	a9 f7       	brne	.-22     	; 0x67ee <__ultoa_invert+0x6c>
    6804:	ea cf       	rjmp	.-44     	; 0x67da <__ultoa_invert+0x58>
    6806:	b4 e0       	ldi	r27, 0x04	; 4
    6808:	a6 95       	lsr	r26
    680a:	97 95       	ror	r25
    680c:	87 95       	ror	r24
    680e:	77 95       	ror	r23
    6810:	67 95       	ror	r22
    6812:	ba 95       	dec	r27
    6814:	c9 f7       	brne	.-14     	; 0x6808 <__ultoa_invert+0x86>
    6816:	00 97       	sbiw	r24, 0x00	; 0
    6818:	61 05       	cpc	r22, r1
    681a:	71 05       	cpc	r23, r1
    681c:	08 95       	ret
    681e:	9b 01       	movw	r18, r22
    6820:	ac 01       	movw	r20, r24
    6822:	0a 2e       	mov	r0, r26
    6824:	06 94       	lsr	r0
    6826:	57 95       	ror	r21
    6828:	47 95       	ror	r20
    682a:	37 95       	ror	r19
    682c:	27 95       	ror	r18
    682e:	ba 95       	dec	r27
    6830:	c9 f7       	brne	.-14     	; 0x6824 <__ultoa_invert+0xa2>
    6832:	62 0f       	add	r22, r18
    6834:	73 1f       	adc	r23, r19
    6836:	84 1f       	adc	r24, r20
    6838:	95 1f       	adc	r25, r21
    683a:	a0 1d       	adc	r26, r0
    683c:	08 95       	ret

0000683e <__fp_mintl>:
    683e:	88 23       	and	r24, r24
    6840:	71 f4       	brne	.+28     	; 0x685e <__fp_mintl+0x20>
    6842:	77 23       	and	r23, r23
    6844:	21 f0       	breq	.+8      	; 0x684e <__fp_mintl+0x10>
    6846:	98 50       	subi	r25, 0x08	; 8
    6848:	87 2b       	or	r24, r23
    684a:	76 2f       	mov	r23, r22
    684c:	07 c0       	rjmp	.+14     	; 0x685c <__fp_mintl+0x1e>
    684e:	66 23       	and	r22, r22
    6850:	11 f4       	brne	.+4      	; 0x6856 <__fp_mintl+0x18>
    6852:	99 27       	eor	r25, r25
    6854:	0d c0       	rjmp	.+26     	; 0x6870 <__fp_mintl+0x32>
    6856:	90 51       	subi	r25, 0x10	; 16
    6858:	86 2b       	or	r24, r22
    685a:	70 e0       	ldi	r23, 0x00	; 0
    685c:	60 e0       	ldi	r22, 0x00	; 0
    685e:	2a f0       	brmi	.+10     	; 0x686a <__fp_mintl+0x2c>
    6860:	9a 95       	dec	r25
    6862:	66 0f       	add	r22, r22
    6864:	77 1f       	adc	r23, r23
    6866:	88 1f       	adc	r24, r24
    6868:	da f7       	brpl	.-10     	; 0x6860 <__fp_mintl+0x22>
    686a:	88 0f       	add	r24, r24
    686c:	96 95       	lsr	r25
    686e:	87 95       	ror	r24
    6870:	97 f9       	bld	r25, 7
    6872:	08 95       	ret

00006874 <__fp_mpack>:
    6874:	9f 3f       	cpi	r25, 0xFF	; 255
    6876:	31 f0       	breq	.+12     	; 0x6884 <__fp_mpack_finite+0xc>

00006878 <__fp_mpack_finite>:
    6878:	91 50       	subi	r25, 0x01	; 1
    687a:	20 f4       	brcc	.+8      	; 0x6884 <__fp_mpack_finite+0xc>
    687c:	87 95       	ror	r24
    687e:	77 95       	ror	r23
    6880:	67 95       	ror	r22
    6882:	b7 95       	ror	r27
    6884:	88 0f       	add	r24, r24
    6886:	91 1d       	adc	r25, r1
    6888:	96 95       	lsr	r25
    688a:	87 95       	ror	r24
    688c:	97 f9       	bld	r25, 7
    688e:	08 95       	ret

00006890 <__fp_split3>:
    6890:	57 fd       	sbrc	r21, 7
    6892:	90 58       	subi	r25, 0x80	; 128
    6894:	44 0f       	add	r20, r20
    6896:	55 1f       	adc	r21, r21
    6898:	59 f0       	breq	.+22     	; 0x68b0 <__fp_splitA+0x10>
    689a:	5f 3f       	cpi	r21, 0xFF	; 255
    689c:	71 f0       	breq	.+28     	; 0x68ba <__fp_splitA+0x1a>
    689e:	47 95       	ror	r20

000068a0 <__fp_splitA>:
    68a0:	88 0f       	add	r24, r24
    68a2:	97 fb       	bst	r25, 7
    68a4:	99 1f       	adc	r25, r25
    68a6:	61 f0       	breq	.+24     	; 0x68c0 <__fp_splitA+0x20>
    68a8:	9f 3f       	cpi	r25, 0xFF	; 255
    68aa:	79 f0       	breq	.+30     	; 0x68ca <__fp_splitA+0x2a>
    68ac:	87 95       	ror	r24
    68ae:	08 95       	ret
    68b0:	12 16       	cp	r1, r18
    68b2:	13 06       	cpc	r1, r19
    68b4:	14 06       	cpc	r1, r20
    68b6:	55 1f       	adc	r21, r21
    68b8:	f2 cf       	rjmp	.-28     	; 0x689e <__fp_split3+0xe>
    68ba:	46 95       	lsr	r20
    68bc:	f1 df       	rcall	.-30     	; 0x68a0 <__fp_splitA>
    68be:	08 c0       	rjmp	.+16     	; 0x68d0 <__fp_splitA+0x30>
    68c0:	16 16       	cp	r1, r22
    68c2:	17 06       	cpc	r1, r23
    68c4:	18 06       	cpc	r1, r24
    68c6:	99 1f       	adc	r25, r25
    68c8:	f1 cf       	rjmp	.-30     	; 0x68ac <__fp_splitA+0xc>
    68ca:	86 95       	lsr	r24
    68cc:	71 05       	cpc	r23, r1
    68ce:	61 05       	cpc	r22, r1
    68d0:	08 94       	sec
    68d2:	08 95       	ret

000068d4 <__fp_zero>:
    68d4:	e8 94       	clt

000068d6 <__fp_szero>:
    68d6:	bb 27       	eor	r27, r27
    68d8:	66 27       	eor	r22, r22
    68da:	77 27       	eor	r23, r23
    68dc:	cb 01       	movw	r24, r22
    68de:	97 f9       	bld	r25, 7
    68e0:	08 95       	ret

000068e2 <_exit>:
    68e2:	f8 94       	cli

000068e4 <__stop_program>:
    68e4:	ff cf       	rjmp	.-2      	; 0x68e4 <__stop_program>
